
leds_controller.elf:     file format elf32-littlenios2
leds_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001b28 memsz 0x00001b28 flags r-x
    LOAD off    0x00002b48 vaddr 0x00001b48 paddr 0x00001e1c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000030f0 vaddr 0x000020f0 paddr 0x000020f0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00002e1c  2**0
                  CONTENTS
  2 .text         000019e4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  00001a04  00001a04  00002a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00001b48  00001e1c  00002b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000020f0  000020f0  000030f0  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00002100  00002100  00002e1c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002e1c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000578  00000000  00000000  00002e40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000082a3  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bc4  00000000  00000000  0000b65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002f67  00000000  00000000  0000e21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000948  00000000  00000000  00011188  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016de  00000000  00000000  00011ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b59  00000000  00000000  000131ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d8  00000000  00000000  00014d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001672d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00016730  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016735  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016736  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00016737  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001673b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001673f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00016743  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  00016747  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005730d  00000000  00000000  00016760  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00001a04 l    d  .rodata	00000000 .rodata
00001b48 l    d  .rwdata	00000000 .rwdata
000020f0 l    d  .bss	00000000 .bss
00002100 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../leds_controller_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001b48 l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000bd8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000d18 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001d1c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
000008c4 g     F .text	00000060 alt_main
00001e1c g       *ABS*	00000000 __flash_rwdata_start
00000930 g     F .text	0000000c alt_putstr
00000ffc g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000020fc g     O .bss	00000004 errno
000020f4 g     O .bss	00000004 alt_argv
00009dfc g       *ABS*	00000000 _gp
0000093c g     F .text	00000004 usleep
00001b74 g     O .rwdata	00000180 alt_fd_list
00001004 g     F .text	00000078 alt_find_dev
00000788 g     F .text	00000028 memcpy
00000da4 g     F .text	00000074 alt_io_redirect
00001a04 g       *ABS*	00000000 __DTOR_END__
00001824 g     F .text	00000064 .hidden __udivsi3
00001dfc g     O .rwdata	00000004 alt_max_fd
00001e14 g     O .rwdata	00000004 _global_impure_ptr
00002100 g       *ABS*	00000000 __bss_end
0000005c g     F .text	00000048 enable
000000f0 g     F .text	00000090 write_text
00001cf4 g     O .rwdata	00000028 alt_dev_null
00000bd4 g     F .text	00000004 alt_dcache_flush_all
00001e1c g       *ABS*	00000000 __ram_rwdata_end
00001e00 g     O .rwdata	00000008 alt_dev_list
000018f4 g     F .text	00000110 write
00001378 g     F .text	00000058 _putc_r
00001b48 g       *ABS*	00000000 __ram_rodata_end
00000338 g     F .text	00000150 init_esp
00001888 g     F .text	00000058 .hidden __umodsi3
00002100 g       *ABS*	00000000 end
00000a0c g     F .text	00000080 altera_avalon_uart_write
00001a04 g       *ABS*	00000000 __CTOR_LIST__
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000980 g     F .text	00000010 altera_avalon_uart_write_fd
0000159c g     F .text	00000190 __call_exitprocs
00000020 g     F .text	0000003c _start
00000488 g     F .text	00000080 publish
00000960 g     F .text	00000010 alt_sys_init
00001444 g     F .text	00000158 __register_exitproc
00000760 g     F .text	00000028 .hidden __mulsi3
00001b48 g       *ABS*	00000000 __ram_rwdata_start
00001a04 g       *ABS*	00000000 __ram_rodata_start
00000284 g     F .text	0000007c sendATCommand
00001128 g     F .text	00000088 alt_get_fd
00000a8c g     F .text	00000088 alt_busy_sleep
000000a4 g     F .text	0000004c clear_display
000012f4 g     F .text	00000030 memcmp
00002100 g       *ABS*	00000000 __alt_stack_base
0000107c g     F .text	000000ac alt_find_file
00000be0 g     F .text	0000006c alt_dev_llist_insert
0000123c g     F .text	000000b8 __sfvwrite_small_dev
000020f0 g       *ABS*	00000000 __bss_start
00000508 g     F .text	00000258 main
000020f0 g     O .bss	00000004 alt_envp
00001e10 g     O .rwdata	00000004 alt_errno
00001324 g     F .text	00000054 putc
0000172c g     F .text	00000084 .hidden __divsi3
00001a04 g       *ABS*	00000000 __CTOR_END__
00001a04 g       *ABS*	00000000 __flash_rodata_start
00001a04 g       *ABS*	00000000 __DTOR_LIST__
00000940 g     F .text	00000020 alt_irq_init
00000fa0 g     F .text	0000005c alt_release_fd
000011b0 g     F .text	00000014 atexit
000013ec g     F .text	00000058 _write_r
00001e18 g     O .rwdata	00000004 _impure_ptr
000020f8 g     O .bss	00000004 alt_argc
00000cb0 g     F .text	00000064 _do_dtors
00001e08 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001e1c g       *ABS*	00000000 _edata
00000970 g     F .text	00000010 altera_avalon_uart_read_fd
00002100 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000300 g     F .text	00000038 uart_ok
00000000 g       *ABS*	00000000 __alt_mem_memory
000011c4 g     F .text	00000020 exit
000017b0 g     F .text	00000074 .hidden __modsi3
00000180 g     F .text	00000104 init_lcd
00004000 g       *ABS*	00000000 __alt_data_end
000018e0 g     F .text	00000014 _exit
000013d0 g     F .text	0000001c strlen
00000e18 g     F .text	00000188 open
00000924 g     F .text	0000000c alt_putchar
00000d14 g     F .text	00000004 alt_icache_flush_all
000011e4 g     F .text	00000058 fputs
00000990 g     F .text	0000007c altera_avalon_uart_read
00000c4c g     F .text	00000064 _do_ctors
00000b14 g     F .text	000000c0 close
000007b0 g     F .text	00000114 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a77f14 	ori	gp,gp,40444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10883c14 	ori	r2,r2,8432

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18c84014 	ori	r3,r3,8448

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff6248>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	00007b00 	call	7b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00008c40 	call	8c4 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff625c>

0000005c <enable>:
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "sys/alt_stdio.h";
#include "altera_avalon_uart_regs.h"

void enable() {
      5c:	defffe04 	addi	sp,sp,-8
      60:	dfc00115 	stw	ra,4(sp)
      64:	df000015 	stw	fp,0(sp)
      68:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
      6c:	00c00044 	movi	r3,1
      70:	00943404 	movi	r2,20688
      74:	10c00035 	stwio	r3,0(r2)
	usleep(200);
      78:	01003204 	movi	r4,200
      7c:	000093c0 	call	93c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
      80:	0007883a 	mov	r3,zero
      84:	00943404 	movi	r2,20688
      88:	10c00035 	stwio	r3,0(r2)
}
      8c:	0001883a 	nop
      90:	e037883a 	mov	sp,fp
      94:	dfc00117 	ldw	ra,4(sp)
      98:	df000017 	ldw	fp,0(sp)
      9c:	dec00204 	addi	sp,sp,8
      a0:	f800283a 	ret

000000a4 <clear_display>:

void clear_display() {
      a4:	defffe04 	addi	sp,sp,-8
      a8:	dfc00115 	stw	ra,4(sp)
      ac:	df000015 	stw	fp,0(sp)
      b0:	d839883a 	mov	fp,sp
	// clear display - 00000001
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
      b4:	0007883a 	mov	r3,zero
      b8:	00942c04 	movi	r2,20656
      bc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x1);
      c0:	00c00044 	movi	r3,1
      c4:	00942804 	movi	r2,20640
      c8:	10c00035 	stwio	r3,0(r2)
	enable();
      cc:	000005c0 	call	5c <enable>
	usleep(3000);
      d0:	0102ee04 	movi	r4,3000
      d4:	000093c0 	call	93c <usleep>
}
      d8:	0001883a 	nop
      dc:	e037883a 	mov	sp,fp
      e0:	dfc00117 	ldw	ra,4(sp)
      e4:	df000017 	ldw	fp,0(sp)
      e8:	dec00204 	addi	sp,sp,8
      ec:	f800283a 	ret

000000f0 <write_text>:

void write_text(char* text, int size) {
      f0:	defffb04 	addi	sp,sp,-20
      f4:	dfc00415 	stw	ra,16(sp)
      f8:	df000315 	stw	fp,12(sp)
      fc:	df000304 	addi	fp,sp,12
     100:	e13ffe15 	stw	r4,-8(fp)
     104:	e17fff15 	stw	r5,-4(fp)
	clear_display();
     108:	00000a40 	call	a4 <clear_display>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
     10c:	00c00044 	movi	r3,1
     110:	00942c04 	movi	r2,20656
     114:	10c00035 	stwio	r3,0(r2)

	int i;
	for (i = 0; i < size; i++) {
     118:	e03ffd15 	stw	zero,-12(fp)
     11c:	00000f06 	br	15c <write_text+0x6c>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
     120:	e0bffd17 	ldw	r2,-12(fp)
     124:	e0fffe17 	ldw	r3,-8(fp)
     128:	1885883a 	add	r2,r3,r2
     12c:	10800003 	ldbu	r2,0(r2)
     130:	10c03fcc 	andi	r3,r2,255
     134:	18c0201c 	xori	r3,r3,128
     138:	18ffe004 	addi	r3,r3,-128
     13c:	00942804 	movi	r2,20640
     140:	10c00035 	stwio	r3,0(r2)
		enable();
     144:	000005c0 	call	5c <enable>
		usleep(100);
     148:	01001904 	movi	r4,100
     14c:	000093c0 	call	93c <usleep>
void write_text(char* text, int size) {
	clear_display();
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);

	int i;
	for (i = 0; i < size; i++) {
     150:	e0bffd17 	ldw	r2,-12(fp)
     154:	10800044 	addi	r2,r2,1
     158:	e0bffd15 	stw	r2,-12(fp)
     15c:	e0fffd17 	ldw	r3,-12(fp)
     160:	e0bfff17 	ldw	r2,-4(fp)
     164:	18bfee16 	blt	r3,r2,120 <_gp+0xffff6324>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
		enable();
		usleep(100);
	}
}
     168:	0001883a 	nop
     16c:	e037883a 	mov	sp,fp
     170:	dfc00117 	ldw	ra,4(sp)
     174:	df000017 	ldw	fp,0(sp)
     178:	dec00204 	addi	sp,sp,8
     17c:	f800283a 	ret

00000180 <init_lcd>:

void init_lcd() {
     180:	defffe04 	addi	sp,sp,-8
     184:	dfc00115 	stw	ra,4(sp)
     188:	df000015 	stw	fp,0(sp)
     18c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
     190:	0007883a 	mov	r3,zero
     194:	00942c04 	movi	r2,20656
     198:	10c00035 	stwio	r3,0(r2)

	// function set 3x - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     19c:	00c00c04 	movi	r3,48
     1a0:	00942804 	movi	r2,20640
     1a4:	10c00035 	stwio	r3,0(r2)
	enable();
     1a8:	000005c0 	call	5c <enable>
	usleep(4100);
     1ac:	01040104 	movi	r4,4100
     1b0:	000093c0 	call	93c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     1b4:	00c00c04 	movi	r3,48
     1b8:	00942804 	movi	r2,20640
     1bc:	10c00035 	stwio	r3,0(r2)
	enable();
     1c0:	000005c0 	call	5c <enable>
	usleep(100);
     1c4:	01001904 	movi	r4,100
     1c8:	000093c0 	call	93c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     1cc:	00c00c04 	movi	r3,48
     1d0:	00942804 	movi	r2,20640
     1d4:	10c00035 	stwio	r3,0(r2)
	enable();
     1d8:	000005c0 	call	5c <enable>
	usleep(100);
     1dc:	01001904 	movi	r4,100
     1e0:	000093c0 	call	93c <usleep>

	// real function set - 00111000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x38);
     1e4:	00c00e04 	movi	r3,56
     1e8:	00942804 	movi	r2,20640
     1ec:	10c00035 	stwio	r3,0(r2)
	enable();
     1f0:	000005c0 	call	5c <enable>
	usleep(100);
     1f4:	01001904 	movi	r4,100
     1f8:	000093c0 	call	93c <usleep>

	// display on/off - 00001000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x8);
     1fc:	00c00204 	movi	r3,8
     200:	00942804 	movi	r2,20640
     204:	10c00035 	stwio	r3,0(r2)
	enable();
     208:	000005c0 	call	5c <enable>
	usleep(100);
     20c:	01001904 	movi	r4,100
     210:	000093c0 	call	93c <usleep>

	clear_display();
     214:	00000a40 	call	a4 <clear_display>

	// entry mode - 00000110
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x6);
     218:	00c00184 	movi	r3,6
     21c:	00942804 	movi	r2,20640
     220:	10c00035 	stwio	r3,0(r2)
	enable();
     224:	000005c0 	call	5c <enable>
	usleep(100);
     228:	01001904 	movi	r4,100
     22c:	000093c0 	call	93c <usleep>

	// display on/off - 00001110 - cursor appears and doesn't blinks
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0xE);
     230:	00c00384 	movi	r3,14
     234:	00942804 	movi	r2,20640
     238:	10c00035 	stwio	r3,0(r2)
	enable();
     23c:	000005c0 	call	5c <enable>
	usleep(100);
     240:	01001904 	movi	r4,100
     244:	000093c0 	call	93c <usleep>

	// send some data to test - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
     248:	00c00044 	movi	r3,1
     24c:	00942c04 	movi	r2,20656
     250:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, '0');
     254:	00c00c04 	movi	r3,48
     258:	00942804 	movi	r2,20640
     25c:	10c00035 	stwio	r3,0(r2)
	enable();
     260:	000005c0 	call	5c <enable>
	usleep(100);
     264:	01001904 	movi	r4,100
     268:	000093c0 	call	93c <usleep>
}
     26c:	0001883a 	nop
     270:	e037883a 	mov	sp,fp
     274:	dfc00117 	ldw	ra,4(sp)
     278:	df000017 	ldw	fp,0(sp)
     27c:	dec00204 	addi	sp,sp,8
     280:	f800283a 	ret

00000284 <sendATCommand>:

void sendATCommand(char* command, int size) {
     284:	defffc04 	addi	sp,sp,-16
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13ffe15 	stw	r4,-8(fp)
     294:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
     298:	e03ffd15 	stw	zero,-12(fp)
	while (i < size) {
     29c:	00001006 	br	2e0 <sendATCommand+0x5c>
		if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
     2a0:	00940204 	movi	r2,20488
     2a4:	10800037 	ldwio	r2,0(r2)
     2a8:	1080100c 	andi	r2,r2,64
     2ac:	10000c26 	beq	r2,zero,2e0 <sendATCommand+0x5c>
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, command[i]);
     2b0:	e0bffd17 	ldw	r2,-12(fp)
     2b4:	e0fffe17 	ldw	r3,-8(fp)
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10c03fcc 	andi	r3,r2,255
     2c4:	18c0201c 	xori	r3,r3,128
     2c8:	18ffe004 	addi	r3,r3,-128
     2cc:	00940104 	movi	r2,20484
     2d0:	10c00035 	stwio	r3,0(r2)
			i++;
     2d4:	e0bffd17 	ldw	r2,-12(fp)
     2d8:	10800044 	addi	r2,r2,1
     2dc:	e0bffd15 	stw	r2,-12(fp)
	usleep(100);
}

void sendATCommand(char* command, int size) {
	int i = 0;
	while (i < size) {
     2e0:	e0fffd17 	ldw	r3,-12(fp)
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	18bfed16 	blt	r3,r2,2a0 <_gp+0xffff64a4>
		if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, command[i]);
			i++;
		}
	}
}
     2ec:	0001883a 	nop
     2f0:	e037883a 	mov	sp,fp
     2f4:	df000017 	ldw	fp,0(sp)
     2f8:	dec00104 	addi	sp,sp,4
     2fc:	f800283a 	ret

00000300 <uart_ok>:

unsigned int uart_ok() {
     300:	defffe04 	addi	sp,sp,-8
     304:	df000115 	stw	fp,4(sp)
     308:	df000104 	addi	fp,sp,4
	char a;

	while (1) {
		a = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
     30c:	00940004 	movi	r2,20480
     310:	10800037 	ldwio	r2,0(r2)
     314:	e0bfff05 	stb	r2,-4(fp)
		if (a == 'K') {
     318:	e0bfff07 	ldb	r2,-4(fp)
     31c:	108012d8 	cmpnei	r2,r2,75
     320:	103ffa1e 	bne	r2,zero,30c <_gp+0xffff6510>
			return 1;
     324:	00800044 	movi	r2,1
		}
	}
}
     328:	e037883a 	mov	sp,fp
     32c:	df000017 	ldw	fp,0(sp)
     330:	dec00104 	addi	sp,sp,4
     334:	f800283a 	ret

00000338 <init_esp>:

void init_esp() {
     338:	defffe04 	addi	sp,sp,-8
     33c:	dfc00115 	stw	ra,4(sp)
     340:	df000015 	stw	fp,0(sp)
     344:	d839883a 	mov	fp,sp
	write_text("WAITING...", 10);
     348:	01400284 	movi	r5,10
     34c:	01000034 	movhi	r4,0
     350:	21068104 	addi	r4,r4,6660
     354:	00000f00 	call	f0 <write_text>

	while (1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) == 7) {
     358:	00942004 	movi	r2,20608
     35c:	10800037 	ldwio	r2,0(r2)
     360:	108001d8 	cmpnei	r2,r2,7
     364:	10000426 	beq	r2,zero,378 <init_esp+0x40>
			break;
		}
		usleep(100000);
     368:	010000b4 	movhi	r4,2
     36c:	2121a804 	addi	r4,r4,-31072
     370:	000093c0 	call	93c <usleep>
	}
     374:	003ff806 	br	358 <_gp+0xffff655c>
void init_esp() {
	write_text("WAITING...", 10);

	while (1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) == 7) {
			break;
     378:	0001883a 	nop
		}
		usleep(100000);
	}

	alt_putstr("AT+CWMODE_CUR=3\r\n");
     37c:	01000034 	movhi	r4,0
     380:	21068404 	addi	r4,r4,6672
     384:	00009300 	call	930 <alt_putstr>
	uart_ok();
     388:	00003000 	call	300 <uart_ok>

	write_text("WIFI...", 7);
     38c:	014001c4 	movi	r5,7
     390:	01000034 	movhi	r4,0
     394:	21068904 	addi	r4,r4,6692
     398:	00000f00 	call	f0 <write_text>
	alt_putstr("AT+CWJAP_CUR=\"WLessLEDS\",\"HelloWorldMP31\"\r\n");
     39c:	01000034 	movhi	r4,0
     3a0:	21068b04 	addi	r4,r4,6700
     3a4:	00009300 	call	930 <alt_putstr>
	uart_ok();
     3a8:	00003000 	call	300 <uart_ok>

	write_text("BROKER...", 9);
     3ac:	01400244 	movi	r5,9
     3b0:	01000034 	movhi	r4,0
     3b4:	21069604 	addi	r4,r4,6744
     3b8:	00000f00 	call	f0 <write_text>
	alt_putstr("AT+CIPSTART=\"TCP\",\"192.168.1.102\",1883,7200\r\n");
     3bc:	01000034 	movhi	r4,0
     3c0:	21069904 	addi	r4,r4,6756
     3c4:	00009300 	call	930 <alt_putstr>
	uart_ok();
     3c8:	00003000 	call	300 <uart_ok>


	alt_putstr("AT+CIPSEND=14\r\n");
     3cc:	01000034 	movhi	r4,0
     3d0:	2106a504 	addi	r4,r4,6804
     3d4:	00009300 	call	930 <alt_putstr>
	uart_ok();
     3d8:	00003000 	call	300 <uart_ok>
	alt_putchar(0x10);
     3dc:	01000404 	movi	r4,16
     3e0:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x0D);
     3e4:	01000344 	movi	r4,13
     3e8:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x00);
     3ec:	0009883a 	mov	r4,zero
     3f0:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x04);
     3f4:	01000104 	movi	r4,4
     3f8:	00009240 	call	924 <alt_putchar>
	//MQTT
	alt_putchar(0x4D);
     3fc:	01001344 	movi	r4,77
     400:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x51);
     404:	01001444 	movi	r4,81
     408:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x54);
     40c:	01001504 	movi	r4,84
     410:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x54);
     414:	01001504 	movi	r4,84
     418:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x04);
     41c:	01000104 	movi	r4,4
     420:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x02);
     424:	01000084 	movi	r4,2
     428:	00009240 	call	924 <alt_putchar>
	alt_putchar(0xFF00);
     42c:	013fc014 	movui	r4,65280
     430:	00009240 	call	924 <alt_putchar>
	//es
	alt_putchar(0x65);
     434:	01001944 	movi	r4,101
     438:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x73);
     43c:	01001cc4 	movi	r4,115
     440:	00009240 	call	924 <alt_putchar>
	alt_putstr("\r\n");
     444:	01000034 	movhi	r4,0
     448:	2106a904 	addi	r4,r4,6820
     44c:	00009300 	call	930 <alt_putstr>
	uart_ok();
     450:	00003000 	call	300 <uart_ok>

	write_text("CONNECTED BROKER", 16);
     454:	01400404 	movi	r5,16
     458:	01000034 	movhi	r4,0
     45c:	2106aa04 	addi	r4,r4,6824
     460:	00000f00 	call	f0 <write_text>
	usleep(2000000);
     464:	010007f4 	movhi	r4,31
     468:	21212004 	addi	r4,r4,-31616
     46c:	000093c0 	call	93c <usleep>
}
     470:	0001883a 	nop
     474:	e037883a 	mov	sp,fp
     478:	dfc00117 	ldw	ra,4(sp)
     47c:	df000017 	ldw	fp,0(sp)
     480:	dec00204 	addi	sp,sp,8
     484:	f800283a 	ret

00000488 <publish>:

void publish(char* message) {
     488:	defffd04 	addi	sp,sp,-12
     48c:	dfc00215 	stw	ra,8(sp)
     490:	df000115 	stw	fp,4(sp)
     494:	df000104 	addi	fp,sp,4
     498:	e13fff15 	stw	r4,-4(fp)
	alt_putstr("AT+CIPSEND=24\r\n");
     49c:	01000034 	movhi	r4,0
     4a0:	2106af04 	addi	r4,r4,6844
     4a4:	00009300 	call	930 <alt_putstr>
	uart_ok();
     4a8:	00003000 	call	300 <uart_ok>

	// FIXED HEADER
	alt_putchar(0x30);
     4ac:	01000c04 	movi	r4,48
     4b0:	00009240 	call	924 <alt_putchar>
	// remaining length - 23
	alt_putchar(0x17);
     4b4:	010005c4 	movi	r4,23
     4b8:	00009240 	call	924 <alt_putchar>

	// VARIABLE HEADER
	alt_putchar(0x00);
     4bc:	0009883a 	mov	r4,zero
     4c0:	00009240 	call	924 <alt_putchar>
	alt_putchar(0x0C);
     4c4:	01000304 	movi	r4,12
     4c8:	00009240 	call	924 <alt_putchar>
	alt_putstr("teste/teste0");
     4cc:	01000034 	movhi	r4,0
     4d0:	2106b304 	addi	r4,r4,6860
     4d4:	00009300 	call	930 <alt_putstr>

	// PAYLOAD
	// msg size is 9
	alt_putstr(message);
     4d8:	e13fff17 	ldw	r4,-4(fp)
     4dc:	00009300 	call	930 <alt_putstr>

	alt_putstr("\r\n");
     4e0:	01000034 	movhi	r4,0
     4e4:	2106a904 	addi	r4,r4,6820
     4e8:	00009300 	call	930 <alt_putstr>
	uart_ok();
     4ec:	00003000 	call	300 <uart_ok>
}
     4f0:	0001883a 	nop
     4f4:	e037883a 	mov	sp,fp
     4f8:	dfc00117 	ldw	ra,4(sp)
     4fc:	df000017 	ldw	fp,0(sp)
     500:	dec00204 	addi	sp,sp,8
     504:	f800283a 	ret

00000508 <main>:

int main() {
     508:	deffde04 	addi	sp,sp,-136
     50c:	dfc02115 	stw	ra,132(sp)
     510:	df002015 	stw	fp,128(sp)
     514:	dc001f15 	stw	r16,124(sp)
     518:	df002004 	addi	fp,sp,128
	int outputs[] = {15, 23, 27, 29, 30};
     51c:	008003c4 	movi	r2,15
     520:	e0bfe415 	stw	r2,-112(fp)
     524:	008005c4 	movi	r2,23
     528:	e0bfe515 	stw	r2,-108(fp)
     52c:	008006c4 	movi	r2,27
     530:	e0bfe615 	stw	r2,-104(fp)
     534:	00800744 	movi	r2,29
     538:	e0bfe715 	stw	r2,-100(fp)
     53c:	00800784 	movi	r2,30
     540:	e0bfe815 	stw	r2,-96(fp)

	char lcd_options[][9] = {
     544:	00800034 	movhi	r2,0
     548:	1086b644 	addi	r2,r2,6873
     54c:	e0ffe904 	addi	r3,fp,-92
     550:	1009883a 	mov	r4,r2
     554:	00800b44 	movi	r2,45
     558:	100d883a 	mov	r6,r2
     55c:	200b883a 	mov	r5,r4
     560:	1809883a 	mov	r4,r3
     564:	00007880 	call	788 <memcpy>
			"3 - LED C",
			"4 - LED D",
			"5 - LED E"
	};

	char lcd_option_selected[][8] = {
     568:	00800034 	movhi	r2,0
     56c:	1086c184 	addi	r2,r2,6918
     570:	e0fff444 	addi	r3,fp,-47
     574:	1009883a 	mov	r4,r2
     578:	00800a04 	movi	r2,40
     57c:	100d883a 	mov	r6,r2
     580:	200b883a 	mov	r5,r4
     584:	1809883a 	mov	r4,r3
     588:	00007880 	call	788 <memcpy>
			"LED C ON",
			"LED D ON",
			"LED E ON",
	};

	int i = 0;
     58c:	e03fe015 	stw	zero,-128(fp)
	int previous_i;
	int selected = 0;
     590:	e03fe115 	stw	zero,-124(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     594:	00c007c4 	movi	r3,31
     598:	00942404 	movi	r2,20624
     59c:	10c00035 	stwio	r3,0(r2)
	init_lcd();
     5a0:	00001800 	call	180 <init_lcd>
	init_esp();
     5a4:	00003380 	call	338 <init_esp>

	write_text(lcd_options[0], 9);
     5a8:	e0bfe904 	addi	r2,fp,-92
     5ac:	01400244 	movi	r5,9
     5b0:	1009883a 	mov	r4,r2
     5b4:	00000f00 	call	f0 <write_text>

	while(1) {
		int in = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
     5b8:	00942004 	movi	r2,20608
     5bc:	10800037 	ldwio	r2,0(r2)
     5c0:	e0bfe215 	stw	r2,-120(fp)

		previous_i = i;
     5c4:	e0bfe017 	ldw	r2,-128(fp)
     5c8:	e0bfe315 	stw	r2,-116(fp)

		if (in == 13 && !selected) {
     5cc:	e0bfe217 	ldw	r2,-120(fp)
     5d0:	10800358 	cmpnei	r2,r2,13
     5d4:	1000061e 	bne	r2,zero,5f0 <main+0xe8>
     5d8:	e0bfe117 	ldw	r2,-124(fp)
     5dc:	1000041e 	bne	r2,zero,5f0 <main+0xe8>
			i++;
     5e0:	e0bfe017 	ldw	r2,-128(fp)
     5e4:	10800044 	addi	r2,r2,1
     5e8:	e0bfe015 	stw	r2,-128(fp)
     5ec:	00004506 	br	704 <main+0x1fc>
		} else if (in == 14 && !selected) {
     5f0:	e0bfe217 	ldw	r2,-120(fp)
     5f4:	10800398 	cmpnei	r2,r2,14
     5f8:	1000061e 	bne	r2,zero,614 <main+0x10c>
     5fc:	e0bfe117 	ldw	r2,-124(fp)
     600:	1000041e 	bne	r2,zero,614 <main+0x10c>
			i--;
     604:	e0bfe017 	ldw	r2,-128(fp)
     608:	10bfffc4 	addi	r2,r2,-1
     60c:	e0bfe015 	stw	r2,-128(fp)
     610:	00003c06 	br	704 <main+0x1fc>
		} else if (in == 7) {
     614:	e0bfe217 	ldw	r2,-120(fp)
     618:	108001d8 	cmpnei	r2,r2,7
     61c:	10001a1e 	bne	r2,zero,688 <main+0x180>
			// seleciona
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, outputs[i]);
     620:	e0bfe017 	ldw	r2,-128(fp)
     624:	1085883a 	add	r2,r2,r2
     628:	1085883a 	add	r2,r2,r2
     62c:	e0ffe004 	addi	r3,fp,-128
     630:	1885883a 	add	r2,r3,r2
     634:	10800404 	addi	r2,r2,16
     638:	10c00017 	ldw	r3,0(r2)
     63c:	00942404 	movi	r2,20624
     640:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_option_selected[i], 8);
     644:	e0fff444 	addi	r3,fp,-47
     648:	e0bfe017 	ldw	r2,-128(fp)
     64c:	100490fa 	slli	r2,r2,3
     650:	1885883a 	add	r2,r3,r2
     654:	01400204 	movi	r5,8
     658:	1009883a 	mov	r4,r2
     65c:	00000f00 	call	f0 <write_text>
			selected = 1;
     660:	00800044 	movi	r2,1
     664:	e0bfe115 	stw	r2,-124(fp)

			publish(lcd_options[i]);
     668:	e43fe904 	addi	r16,fp,-92
     66c:	01400244 	movi	r5,9
     670:	e13fe017 	ldw	r4,-128(fp)
     674:	00007600 	call	760 <__mulsi3>
     678:	8085883a 	add	r2,r16,r2
     67c:	1009883a 	mov	r4,r2
     680:	00004880 	call	488 <publish>
     684:	00001f06 	br	704 <main+0x1fc>
		} else if (in == 11) {
     688:	e0bfe217 	ldw	r2,-120(fp)
     68c:	108002d8 	cmpnei	r2,r2,11
     690:	10000d1e 	bne	r2,zero,6c8 <main+0x1c0>
			selected = 0;
     694:	e03fe115 	stw	zero,-124(fp)
			//apaga todos os leds
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     698:	00c007c4 	movi	r3,31
     69c:	00942404 	movi	r2,20624
     6a0:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_options[i], 9);
     6a4:	e43fe904 	addi	r16,fp,-92
     6a8:	01400244 	movi	r5,9
     6ac:	e13fe017 	ldw	r4,-128(fp)
     6b0:	00007600 	call	760 <__mulsi3>
     6b4:	8085883a 	add	r2,r16,r2
     6b8:	01400244 	movi	r5,9
     6bc:	1009883a 	mov	r4,r2
     6c0:	00000f00 	call	f0 <write_text>
     6c4:	00000f06 	br	704 <main+0x1fc>
		} else if (in == 12 ) {
     6c8:	e0bfe217 	ldw	r2,-120(fp)
     6cc:	10800318 	cmpnei	r2,r2,12
     6d0:	10000c1e 	bne	r2,zero,704 <main+0x1fc>
			init_esp();
     6d4:	00003380 	call	338 <init_esp>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     6d8:	00c007c4 	movi	r3,31
     6dc:	00942404 	movi	r2,20624
     6e0:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_options[i], 9);
     6e4:	e43fe904 	addi	r16,fp,-92
     6e8:	01400244 	movi	r5,9
     6ec:	e13fe017 	ldw	r4,-128(fp)
     6f0:	00007600 	call	760 <__mulsi3>
     6f4:	8085883a 	add	r2,r16,r2
     6f8:	01400244 	movi	r5,9
     6fc:	1009883a 	mov	r4,r2
     700:	00000f00 	call	f0 <write_text>
		}

		if (i > 4) {
     704:	e0bfe017 	ldw	r2,-128(fp)
     708:	10800150 	cmplti	r2,r2,5
     70c:	1000011e 	bne	r2,zero,714 <main+0x20c>
			i = 0;
     710:	e03fe015 	stw	zero,-128(fp)
		}

		if (i < 0) {
     714:	e0bfe017 	ldw	r2,-128(fp)
     718:	1000020e 	bge	r2,zero,724 <main+0x21c>
			i = 4;
     71c:	00800104 	movi	r2,4
     720:	e0bfe015 	stw	r2,-128(fp)
		}

		if (previous_i != i) {
     724:	e0ffe317 	ldw	r3,-116(fp)
     728:	e0bfe017 	ldw	r2,-128(fp)
     72c:	18800826 	beq	r3,r2,750 <main+0x248>
			write_text(lcd_options[i], 9);
     730:	e43fe904 	addi	r16,fp,-92
     734:	01400244 	movi	r5,9
     738:	e13fe017 	ldw	r4,-128(fp)
     73c:	00007600 	call	760 <__mulsi3>
     740:	8085883a 	add	r2,r16,r2
     744:	01400244 	movi	r5,9
     748:	1009883a 	mov	r4,r2
     74c:	00000f00 	call	f0 <write_text>
		}

		usleep(100000);
     750:	010000b4 	movhi	r4,2
     754:	2121a804 	addi	r4,r4,-31072
     758:	000093c0 	call	93c <usleep>
	}
     75c:	003f9606 	br	5b8 <_gp+0xffff67bc>

00000760 <__mulsi3>:
     760:	0005883a 	mov	r2,zero
     764:	20000726 	beq	r4,zero,784 <__mulsi3+0x24>
     768:	20c0004c 	andi	r3,r4,1
     76c:	2008d07a 	srli	r4,r4,1
     770:	18000126 	beq	r3,zero,778 <__mulsi3+0x18>
     774:	1145883a 	add	r2,r2,r5
     778:	294b883a 	add	r5,r5,r5
     77c:	203ffa1e 	bne	r4,zero,768 <_gp+0xffff696c>
     780:	f800283a 	ret
     784:	f800283a 	ret

00000788 <memcpy>:
     788:	2005883a 	mov	r2,r4
     78c:	2007883a 	mov	r3,r4
     790:	218d883a 	add	r6,r4,r6
     794:	19800526 	beq	r3,r6,7ac <memcpy+0x24>
     798:	29000003 	ldbu	r4,0(r5)
     79c:	18c00044 	addi	r3,r3,1
     7a0:	29400044 	addi	r5,r5,1
     7a4:	193fffc5 	stb	r4,-1(r3)
     7a8:	003ffa06 	br	794 <_gp+0xffff6998>
     7ac:	f800283a 	ret

000007b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     7b0:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     7b4:	01800034 	movhi	r6,0
     7b8:	01c00034 	movhi	r7,0
     7bc:	dfc00015 	stw	ra,0(sp)
     7c0:	3186d204 	addi	r6,r6,6984
     7c4:	39c78704 	addi	r7,r7,7708
     7c8:	31c01026 	beq	r6,r7,80c <alt_load+0x5c>
  {
    while( to != end )
     7cc:	00800034 	movhi	r2,0
     7d0:	10878704 	addi	r2,r2,7708
     7d4:	30800d26 	beq	r6,r2,80c <alt_load+0x5c>
     7d8:	30c00104 	addi	r3,r6,4
     7dc:	10c7c83a 	sub	r3,r2,r3
     7e0:	1806d0ba 	srli	r3,r3,2
     7e4:	0005883a 	mov	r2,zero
     7e8:	18c00044 	addi	r3,r3,1
     7ec:	18c7883a 	add	r3,r3,r3
     7f0:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     7f4:	11c9883a 	add	r4,r2,r7
     7f8:	21400017 	ldw	r5,0(r4)
     7fc:	1189883a 	add	r4,r2,r6
     800:	10800104 	addi	r2,r2,4
     804:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     808:	10fffa1e 	bne	r2,r3,7f4 <_gp+0xffff69f8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     80c:	01800034 	movhi	r6,0
     810:	01c00034 	movhi	r7,0
     814:	31800804 	addi	r6,r6,32
     818:	39c00804 	addi	r7,r7,32
     81c:	31c01026 	beq	r6,r7,860 <alt_load+0xb0>
  {
    while( to != end )
     820:	00800034 	movhi	r2,0
     824:	10800804 	addi	r2,r2,32
     828:	30800d26 	beq	r6,r2,860 <alt_load+0xb0>
     82c:	30c00104 	addi	r3,r6,4
     830:	10c7c83a 	sub	r3,r2,r3
     834:	1806d0ba 	srli	r3,r3,2
     838:	0005883a 	mov	r2,zero
     83c:	18c00044 	addi	r3,r3,1
     840:	18c7883a 	add	r3,r3,r3
     844:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     848:	11c9883a 	add	r4,r2,r7
     84c:	21400017 	ldw	r5,0(r4)
     850:	1189883a 	add	r4,r2,r6
     854:	10800104 	addi	r2,r2,4
     858:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     85c:	18bffa1e 	bne	r3,r2,848 <_gp+0xffff6a4c>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     860:	01800034 	movhi	r6,0
     864:	01c00034 	movhi	r7,0
     868:	31868104 	addi	r6,r6,6660
     86c:	39c68104 	addi	r7,r7,6660
     870:	31c01026 	beq	r6,r7,8b4 <alt_load+0x104>
  {
    while( to != end )
     874:	00800034 	movhi	r2,0
     878:	1086d204 	addi	r2,r2,6984
     87c:	30800d26 	beq	r6,r2,8b4 <alt_load+0x104>
     880:	30c00104 	addi	r3,r6,4
     884:	10c7c83a 	sub	r3,r2,r3
     888:	1806d0ba 	srli	r3,r3,2
     88c:	0005883a 	mov	r2,zero
     890:	18c00044 	addi	r3,r3,1
     894:	18c7883a 	add	r3,r3,r3
     898:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     89c:	11c9883a 	add	r4,r2,r7
     8a0:	21400017 	ldw	r5,0(r4)
     8a4:	1189883a 	add	r4,r2,r6
     8a8:	10800104 	addi	r2,r2,4
     8ac:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8b0:	10fffa1e 	bne	r2,r3,89c <_gp+0xffff6aa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     8b4:	0000bd40 	call	bd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
     8b8:	dfc00017 	ldw	ra,0(sp)
     8bc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
     8c0:	0000d141 	jmpi	d14 <alt_icache_flush_all>

000008c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     8c4:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     8c8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     8cc:	dfc00115 	stw	ra,4(sp)
     8d0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     8d4:	00009400 	call	940 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     8d8:	00009600 	call	960 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     8dc:	01800034 	movhi	r6,0
     8e0:	3186cc04 	addi	r6,r6,6960
     8e4:	300b883a 	mov	r5,r6
     8e8:	3009883a 	mov	r4,r6
     8ec:	0000da40 	call	da4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     8f0:	0000c4c0 	call	c4c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     8f4:	01000034 	movhi	r4,0
     8f8:	21032c04 	addi	r4,r4,3248
     8fc:	00011b00 	call	11b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     900:	d1a0bd17 	ldw	r6,-32012(gp)
     904:	d160be17 	ldw	r5,-32008(gp)
     908:	d120bf17 	ldw	r4,-32004(gp)
     90c:	00005080 	call	508 <main>
  close(STDOUT_FILENO);
     910:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     914:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     918:	0000b140 	call	b14 <close>
  exit (result);
     91c:	8009883a 	mov	r4,r16
     920:	00011c40 	call	11c4 <exit>

00000924 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     924:	d0a00717 	ldw	r2,-32740(gp)
     928:	11400217 	ldw	r5,8(r2)
     92c:	00013241 	jmpi	1324 <putc>

00000930 <alt_putstr>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     930:	d0a00717 	ldw	r2,-32740(gp)
     934:	11400217 	ldw	r5,8(r2)
     938:	00011e41 	jmpi	11e4 <fputs>

0000093c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
     93c:	0000a8c1 	jmpi	a8c <alt_busy_sleep>

00000940 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     940:	deffff04 	addi	sp,sp,-4
     944:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
     948:	0000ffc0 	call	ffc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     94c:	00800044 	movi	r2,1
     950:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     954:	dfc00017 	ldw	ra,0(sp)
     958:	dec00104 	addi	sp,sp,4
     95c:	f800283a 	ret

00000960 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     960:	01000034 	movhi	r4,0
     964:	2106d204 	addi	r4,r4,6984
     968:	d1600104 	addi	r5,gp,-32764
     96c:	0000be01 	jmpi	be0 <alt_dev_llist_insert>

00000970 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
     970:	20800017 	ldw	r2,0(r4)
     974:	21c00217 	ldw	r7,8(r4)
     978:	11000a04 	addi	r4,r2,40
     97c:	00009901 	jmpi	990 <altera_avalon_uart_read>

00000980 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
     980:	20800017 	ldw	r2,0(r4)
     984:	21c00217 	ldw	r7,8(r4)
     988:	11000a04 	addi	r4,r2,40
     98c:	0000a0c1 	jmpi	a0c <altera_avalon_uart_write>

00000990 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
     990:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
     994:	20800017 	ldw	r2,0(r4)
     998:	10800204 	addi	r2,r2,8
     99c:	10c00037 	ldwio	r3,0(r2)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
     9a0:	10000035 	stwio	zero,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
     9a4:	1880200c 	andi	r2,r3,128
     9a8:	10000c1e 	bne	r2,zero,9dc <altera_avalon_uart_read+0x4c>
      {
        return 1;
      }
    }
  }
  while (block);
     9ac:	383ff926 	beq	r7,zero,994 <_gp+0xffff6b98>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     9b0:	d0a00517 	ldw	r2,-32748(gp)
     9b4:	10001026 	beq	r2,zero,9f8 <altera_avalon_uart_read+0x68>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
     9b8:	deffff04 	addi	sp,sp,-4
     9bc:	dfc00015 	stw	ra,0(sp)
     9c0:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
     9c4:	00c002c4 	movi	r3,11
     9c8:	10c00015 	stw	r3,0(r2)
 
  return 0;
     9cc:	0005883a 	mov	r2,zero
}
     9d0:	dfc00017 	ldw	ra,0(sp)
     9d4:	dec00104 	addi	sp,sp,4
     9d8:	f800283a 	ret

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
     9dc:	20800017 	ldw	r2,0(r4)
     9e0:	10800037 	ldwio	r2,0(r2)
     9e4:	28800005 	stb	r2,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
     9e8:	18c000cc 	andi	r3,r3,3
     9ec:	183fef1e 	bne	r3,zero,9ac <_gp+0xffff6bb0>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
     9f0:	00800044 	movi	r2,1
     9f4:	f800283a 	ret
     9f8:	d0a0c004 	addi	r2,gp,-32000
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
     9fc:	00c002c4 	movi	r3,11
     a00:	10c00015 	stw	r3,0(r2)
 
  return 0;
     a04:	0005883a 	mov	r2,zero
}
     a08:	f800283a 	ret

00000a0c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
     a0c:	defffd04 	addi	sp,sp,-12
     a10:	dc000115 	stw	r16,4(sp)
     a14:	dfc00215 	stw	ra,8(sp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
     a18:	39d0000c 	andi	r7,r7,16384
  count = len;
     a1c:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
     a20:	20c00017 	ldw	r3,0(r4)
     a24:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
     a28:	1080100c 	andi	r2,r2,64
     a2c:	1000071e 	bne	r2,zero,a4c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
      count--;
    }
  }
  while (block && count);
     a30:	38000b1e 	bne	r7,zero,a60 <altera_avalon_uart_write+0x54>
     a34:	803ffa1e 	bne	r16,zero,a20 <_gp+0xffff6c24>
  {
    ALT_ERRNO = EWOULDBLOCK;
  }

  return (len - count);
}
     a38:	3405c83a 	sub	r2,r6,r16
     a3c:	dfc00217 	ldw	ra,8(sp)
     a40:	dc000117 	ldw	r16,4(sp)
     a44:	dec00304 	addi	sp,sp,12
     a48:	f800283a 	ret
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
     a4c:	28800007 	ldb	r2,0(r5)
     a50:	29400044 	addi	r5,r5,1
     a54:	18800135 	stwio	r2,4(r3)
      count--;
     a58:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
     a5c:	383ff526 	beq	r7,zero,a34 <_gp+0xffff6c38>

  if (count)
     a60:	803ff526 	beq	r16,zero,a38 <_gp+0xffff6c3c>
     a64:	d0a00517 	ldw	r2,-32748(gp)
     a68:	10000626 	beq	r2,zero,a84 <altera_avalon_uart_write+0x78>
     a6c:	d9800015 	stw	r6,0(sp)
     a70:	103ee83a 	callr	r2
     a74:	d9800017 	ldw	r6,0(sp)
  {
    ALT_ERRNO = EWOULDBLOCK;
     a78:	00c002c4 	movi	r3,11
     a7c:	10c00015 	stw	r3,0(r2)
     a80:	003fed06 	br	a38 <_gp+0xffff6c3c>
     a84:	d0a0c004 	addi	r2,gp,-32000
     a88:	003ffb06 	br	a78 <_gp+0xffff6c7c>

00000a8c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     a8c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     a90:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     a94:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     a98:	dc000015 	stw	r16,0(sp)
     a9c:	dfc00115 	stw	ra,4(sp)
     aa0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     aa4:	00018240 	call	1824 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     aa8:	10001426 	beq	r2,zero,afc <alt_busy_sleep+0x70>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     aac:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     ab0:	013999b4 	movhi	r4,58982
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     ab4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     ab8:	211999c4 	addi	r4,r4,26215
     abc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     ac0:	297fffc4 	addi	r5,r5,-1
     ac4:	283ffe1e 	bne	r5,zero,ac0 <_gp+0xffff6cc4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     ac8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     acc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     ad0:	18bffb16 	blt	r3,r2,ac0 <_gp+0xffff6cc4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     ad4:	01400144 	movi	r5,5
     ad8:	8009883a 	mov	r4,r16
     adc:	00007600 	call	760 <__mulsi3>
     ae0:	10bfffc4 	addi	r2,r2,-1
     ae4:	103ffe1e 	bne	r2,zero,ae0 <_gp+0xffff6ce4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
     ae8:	0005883a 	mov	r2,zero
     aec:	dfc00117 	ldw	ra,4(sp)
     af0:	dc000017 	ldw	r16,0(sp)
     af4:	dec00204 	addi	sp,sp,8
     af8:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     afc:	01400144 	movi	r5,5
     b00:	8009883a 	mov	r4,r16
     b04:	00007600 	call	760 <__mulsi3>
     b08:	10bfffc4 	addi	r2,r2,-1
     b0c:	00bffe16 	blt	zero,r2,b08 <_gp+0xffff6d0c>
     b10:	003ff506 	br	ae8 <_gp+0xffff6cec>

00000b14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     b14:	defffd04 	addi	sp,sp,-12
     b18:	dfc00215 	stw	ra,8(sp)
     b1c:	dc400115 	stw	r17,4(sp)
     b20:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     b24:	20002016 	blt	r4,zero,ba8 <close+0x94>
     b28:	01400304 	movi	r5,12
     b2c:	2021883a 	mov	r16,r4
     b30:	00007600 	call	760 <__mulsi3>
     b34:	01000034 	movhi	r4,0
     b38:	2106dd04 	addi	r4,r4,7028
     b3c:	2089883a 	add	r4,r4,r2

  if (fd)
     b40:	20001926 	beq	r4,zero,ba8 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     b44:	20800017 	ldw	r2,0(r4)
     b48:	10800417 	ldw	r2,16(r2)
     b4c:	10000b26 	beq	r2,zero,b7c <close+0x68>
     b50:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     b54:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     b58:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     b5c:	0000fa00 	call	fa0 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     b60:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
     b64:	88000916 	blt	r17,zero,b8c <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     b68:	dfc00217 	ldw	ra,8(sp)
     b6c:	dc400117 	ldw	r17,4(sp)
     b70:	dc000017 	ldw	r16,0(sp)
     b74:	dec00304 	addi	sp,sp,12
     b78:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     b7c:	8009883a 	mov	r4,r16
     b80:	0000fa00 	call	fa0 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     b84:	0005883a 	mov	r2,zero
     b88:	003ff706 	br	b68 <_gp+0xffff6d6c>
     b8c:	d0a00517 	ldw	r2,-32748(gp)
     b90:	10000c26 	beq	r2,zero,bc4 <close+0xb0>
     b94:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
     b98:	0463c83a 	sub	r17,zero,r17
     b9c:	14400015 	stw	r17,0(r2)
      return -1;
     ba0:	00bfffc4 	movi	r2,-1
     ba4:	003ff006 	br	b68 <_gp+0xffff6d6c>
     ba8:	d0a00517 	ldw	r2,-32748(gp)
     bac:	10000726 	beq	r2,zero,bcc <close+0xb8>
     bb0:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
     bb4:	00c01444 	movi	r3,81
     bb8:	10c00015 	stw	r3,0(r2)
    return -1;
     bbc:	00bfffc4 	movi	r2,-1
     bc0:	003fe906 	br	b68 <_gp+0xffff6d6c>
     bc4:	d0a0c004 	addi	r2,gp,-32000
     bc8:	003ff306 	br	b98 <_gp+0xffff6d9c>
     bcc:	d0a0c004 	addi	r2,gp,-32000
     bd0:	003ff806 	br	bb4 <_gp+0xffff6db8>

00000bd4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     bd4:	f800283a 	ret

00000bd8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
     bd8:	3005883a 	mov	r2,r6
     bdc:	f800283a 	ret

00000be0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     be0:	20000a26 	beq	r4,zero,c0c <alt_dev_llist_insert+0x2c>
     be4:	20800217 	ldw	r2,8(r4)
     be8:	10000826 	beq	r2,zero,c0c <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
     bec:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     bf0:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
     bf4:	0005883a 	mov	r2,zero
  entry->next     = list->next;
     bf8:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
     bfc:	28c00017 	ldw	r3,0(r5)
     c00:	19000115 	stw	r4,4(r3)
  list->next           = entry;
     c04:	29000015 	stw	r4,0(r5)
     c08:	f800283a 	ret
     c0c:	d0a00517 	ldw	r2,-32748(gp)
     c10:	10000926 	beq	r2,zero,c38 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     c14:	deffff04 	addi	sp,sp,-4
     c18:	dfc00015 	stw	ra,0(sp)
     c1c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
     c20:	00c00584 	movi	r3,22
     c24:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     c28:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     c2c:	dfc00017 	ldw	ra,0(sp)
     c30:	dec00104 	addi	sp,sp,4
     c34:	f800283a 	ret
     c38:	d0a0c004 	addi	r2,gp,-32000
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
     c3c:	00c00584 	movi	r3,22
     c40:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     c44:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     c48:	f800283a 	ret

00000c4c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     c4c:	defffc04 	addi	sp,sp,-16
     c50:	dc800215 	stw	r18,8(sp)
     c54:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     c58:	04800034 	movhi	r18,0
     c5c:	04000034 	movhi	r16,0
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     c60:	dfc00315 	stw	ra,12(sp)
     c64:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     c68:	84068004 	addi	r16,r16,6656
     c6c:	94868104 	addi	r18,r18,6660
     c70:	84800936 	bltu	r16,r18,c98 <_do_ctors+0x4c>
     c74:	84a5c83a 	sub	r18,r16,r18
     c78:	9024d0ba 	srli	r18,r18,2
     c7c:	0023883a 	mov	r17,zero
     c80:	94800044 	addi	r18,r18,1
        (*ctor) (); 
     c84:	80800017 	ldw	r2,0(r16)
     c88:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     c8c:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
     c90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     c94:	8cbffb1e 	bne	r17,r18,c84 <_gp+0xffff6e88>
        (*ctor) (); 
}
     c98:	dfc00317 	ldw	ra,12(sp)
     c9c:	dc800217 	ldw	r18,8(sp)
     ca0:	dc400117 	ldw	r17,4(sp)
     ca4:	dc000017 	ldw	r16,0(sp)
     ca8:	dec00404 	addi	sp,sp,16
     cac:	f800283a 	ret

00000cb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     cb0:	defffc04 	addi	sp,sp,-16
     cb4:	dc800215 	stw	r18,8(sp)
     cb8:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     cbc:	04800034 	movhi	r18,0
     cc0:	04000034 	movhi	r16,0
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     cc4:	dfc00315 	stw	ra,12(sp)
     cc8:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     ccc:	84068004 	addi	r16,r16,6656
     cd0:	94868104 	addi	r18,r18,6660
     cd4:	84800936 	bltu	r16,r18,cfc <_do_dtors+0x4c>
     cd8:	84a5c83a 	sub	r18,r16,r18
     cdc:	9024d0ba 	srli	r18,r18,2
     ce0:	0023883a 	mov	r17,zero
     ce4:	94800044 	addi	r18,r18,1
        (*dtor) (); 
     ce8:	80800017 	ldw	r2,0(r16)
     cec:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     cf0:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
     cf4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     cf8:	8cbffb1e 	bne	r17,r18,ce8 <_gp+0xffff6eec>
        (*dtor) (); 
}
     cfc:	dfc00317 	ldw	ra,12(sp)
     d00:	dc800217 	ldw	r18,8(sp)
     d04:	dc400117 	ldw	r17,4(sp)
     d08:	dc000017 	ldw	r16,0(sp)
     d0c:	dec00404 	addi	sp,sp,16
     d10:	f800283a 	ret

00000d14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     d14:	f800283a 	ret

00000d18 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
     d18:	defffd04 	addi	sp,sp,-12
     d1c:	2805883a 	mov	r2,r5
     d20:	dc400115 	stw	r17,4(sp)
     d24:	300b883a 	mov	r5,r6
     d28:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
     d2c:	01807fc4 	movi	r6,511
     d30:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
     d34:	dfc00215 	stw	ra,8(sp)
     d38:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
     d3c:	0000e180 	call	e18 <open>

  if (old >= 0)
     d40:	10001316 	blt	r2,zero,d90 <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
     d44:	1009883a 	mov	r4,r2
     d48:	01400304 	movi	r5,12
     d4c:	1021883a 	mov	r16,r2
     d50:	00007600 	call	760 <__mulsi3>
     d54:	00c00034 	movhi	r3,0
     d58:	18c6dd04 	addi	r3,r3,7028
     d5c:	1885883a 	add	r2,r3,r2
     d60:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
     d64:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
     d68:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
     d6c:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
     d70:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
     d74:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
     d78:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
     d7c:	dfc00217 	ldw	ra,8(sp)
     d80:	dc400117 	ldw	r17,4(sp)
     d84:	dc000017 	ldw	r16,0(sp)
     d88:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
     d8c:	0000fa01 	jmpi	fa0 <alt_release_fd>
  }
} 
     d90:	dfc00217 	ldw	ra,8(sp)
     d94:	dc400117 	ldw	r17,4(sp)
     d98:	dc000017 	ldw	r16,0(sp)
     d9c:	dec00304 	addi	sp,sp,12
     da0:	f800283a 	ret

00000da4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     da4:	defffb04 	addi	sp,sp,-20
     da8:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     dac:	04000034 	movhi	r16,0
     db0:	8406e004 	addi	r16,r16,7040
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     db4:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     db8:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     dbc:	dcc00315 	stw	r19,12(sp)
     dc0:	dc800215 	stw	r18,8(sp)
     dc4:	2827883a 	mov	r19,r5
     dc8:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     dcc:	200b883a 	mov	r5,r4
     dd0:	880d883a 	mov	r6,r17
     dd4:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     dd8:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     ddc:	0000d180 	call	d18 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
     de0:	813ffd04 	addi	r4,r16,-12
     de4:	980b883a 	mov	r5,r19
     de8:	000d883a 	mov	r6,zero
     dec:	0000d180 	call	d18 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     df0:	880d883a 	mov	r6,r17
     df4:	900b883a 	mov	r5,r18
     df8:	81000304 	addi	r4,r16,12
}  
     dfc:	dfc00417 	ldw	ra,16(sp)
     e00:	dcc00317 	ldw	r19,12(sp)
     e04:	dc800217 	ldw	r18,8(sp)
     e08:	dc400117 	ldw	r17,4(sp)
     e0c:	dc000017 	ldw	r16,0(sp)
     e10:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     e14:	0000d181 	jmpi	d18 <alt_open_fd.constprop.0>

00000e18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     e18:	defffa04 	addi	sp,sp,-24
     e1c:	dc000015 	stw	r16,0(sp)
     e20:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     e24:	d1600104 	addi	r5,gp,-32764
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     e28:	dc800215 	stw	r18,8(sp)
     e2c:	dc400115 	stw	r17,4(sp)
     e30:	dfc00515 	stw	ra,20(sp)
     e34:	dd000415 	stw	r20,16(sp)
     e38:	dcc00315 	stw	r19,12(sp)
     e3c:	2023883a 	mov	r17,r4
     e40:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     e44:	00010040 	call	1004 <alt_find_dev>
     e48:	10004a26 	beq	r2,zero,f74 <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
     e4c:	1009883a 	mov	r4,r2
     e50:	1029883a 	mov	r20,r2
     e54:	00011280 	call	1128 <alt_get_fd>
     e58:	1027883a 	mov	r19,r2
     e5c:	1000090e 	bge	r2,zero,e84 <open+0x6c>
     e60:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
     e64:	9809883a 	mov	r4,r19
     e68:	0000fa00 	call	fa0 <alt_release_fd>
     e6c:	d0a00517 	ldw	r2,-32748(gp)
     e70:	10004726 	beq	r2,zero,f90 <open+0x178>
     e74:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
     e78:	14000015 	stw	r16,0(r2)
    return -1;
     e7c:	00bfffc4 	movi	r2,-1
     e80:	00003206 	br	f4c <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     e84:	01400304 	movi	r5,12
     e88:	9809883a 	mov	r4,r19
     e8c:	00007600 	call	760 <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     e90:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     e94:	00c00034 	movhi	r3,0

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     e98:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     e9c:	18c6dd04 	addi	r3,r3,7028

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     ea0:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     ea4:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     ea8:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     eac:	d2600017 	ldw	r9,-32768(gp)
     eb0:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     eb4:	21400215 	stw	r5,8(r4)
     eb8:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     ebc:	000b883a 	mov	r5,zero
     ec0:	00000306 	br	ed0 <open+0xb8>
     ec4:	18c00304 	addi	r3,r3,12
     ec8:	31800304 	addi	r6,r6,12
     ecc:	49401636 	bltu	r9,r5,f28 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     ed0:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     ed4:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     ed8:	3a3ffa1e 	bne	r7,r8,ec4 <_gp+0xffff70c8>
     edc:	30800017 	ldw	r2,0(r6)
     ee0:	103ff80e 	bge	r2,zero,ec4 <_gp+0xffff70c8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
     ee4:	20fff726 	beq	r4,r3,ec4 <_gp+0xffff70c8>
     ee8:	04000344 	movi	r16,13
     eec:	003fdd06 	br	e64 <_gp+0xffff7068>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
     ef0:	1009883a 	mov	r4,r2
     ef4:	00011280 	call	1128 <alt_get_fd>
     ef8:	1027883a 	mov	r19,r2
     efc:	103fd816 	blt	r2,zero,e60 <_gp+0xffff7064>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     f00:	9809883a 	mov	r4,r19
     f04:	01400304 	movi	r5,12
     f08:	00007600 	call	760 <__mulsi3>
     f0c:	01000034 	movhi	r4,0
     f10:	2106dd04 	addi	r4,r4,7028
     f14:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
     f18:	00900034 	movhi	r2,16384
     f1c:	10bfffc4 	addi	r2,r2,-1
     f20:	8084703a 	and	r2,r16,r2
     f24:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
     f28:	a0800317 	ldw	r2,12(r20)
     f2c:	10000f26 	beq	r2,zero,f6c <open+0x154>
     f30:	900f883a 	mov	r7,r18
     f34:	800d883a 	mov	r6,r16
     f38:	880b883a 	mov	r5,r17
     f3c:	103ee83a 	callr	r2
     f40:	1007883a 	mov	r3,r2
     f44:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
     f48:	18001316 	blt	r3,zero,f98 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
     f4c:	dfc00517 	ldw	ra,20(sp)
     f50:	dd000417 	ldw	r20,16(sp)
     f54:	dcc00317 	ldw	r19,12(sp)
     f58:	dc800217 	ldw	r18,8(sp)
     f5c:	dc400117 	ldw	r17,4(sp)
     f60:	dc000017 	ldw	r16,0(sp)
     f64:	dec00604 	addi	sp,sp,24
     f68:	f800283a 	ret
     f6c:	9805883a 	mov	r2,r19
     f70:	003ff606 	br	f4c <_gp+0xffff7150>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
     f74:	8809883a 	mov	r4,r17
     f78:	000107c0 	call	107c <alt_find_file>
     f7c:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
     f80:	103fdb1e 	bne	r2,zero,ef0 <_gp+0xffff70f4>
     f84:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
     f88:	04ffffc4 	movi	r19,-1
     f8c:	003fb506 	br	e64 <_gp+0xffff7068>
     f90:	d0a0c004 	addi	r2,gp,-32000
     f94:	003fb806 	br	e78 <_gp+0xffff707c>
     f98:	00e1c83a 	sub	r16,zero,r3
     f9c:	003fb106 	br	e64 <_gp+0xffff7068>

00000fa0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
     fa0:	00c00084 	movi	r3,2
     fa4:	1900140e 	bge	r3,r4,ff8 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     fa8:	defffd04 	addi	sp,sp,-12
     fac:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     fb0:	01400304 	movi	r5,12
     fb4:	04400034 	movhi	r17,0
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     fb8:	dfc00215 	stw	ra,8(sp)
     fbc:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     fc0:	8c46dd04 	addi	r17,r17,7028
     fc4:	2021883a 	mov	r16,r4
     fc8:	00007600 	call	760 <__mulsi3>
     fcc:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
     fd0:	01400304 	movi	r5,12
     fd4:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     fd8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
     fdc:	00007600 	call	760 <__mulsi3>
     fe0:	8885883a 	add	r2,r17,r2
     fe4:	10000015 	stw	zero,0(r2)
  }
}
     fe8:	dfc00217 	ldw	ra,8(sp)
     fec:	dc400117 	ldw	r17,4(sp)
     ff0:	dc000017 	ldw	r16,0(sp)
     ff4:	dec00304 	addi	sp,sp,12
     ff8:	f800283a 	ret

00000ffc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
     ffc:	000170fa 	wrctl	ienable,zero
    1000:	f800283a 	ret

00001004 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1004:	defffb04 	addi	sp,sp,-20
    1008:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    100c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1010:	dc400115 	stw	r17,4(sp)
    1014:	2823883a 	mov	r17,r5
    1018:	dcc00315 	stw	r19,12(sp)
    101c:	dfc00415 	stw	ra,16(sp)
    1020:	dc800215 	stw	r18,8(sp)
    1024:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    1028:	00013d00 	call	13d0 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    102c:	8c000b26 	beq	r17,r16,105c <alt_find_dev+0x58>
    1030:	14800044 	addi	r18,r2,1
    1034:	00000206 	br	1040 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1038:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    103c:	8c000726 	beq	r17,r16,105c <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1040:	81000217 	ldw	r4,8(r16)
    1044:	900d883a 	mov	r6,r18
    1048:	980b883a 	mov	r5,r19
    104c:	00012f40 	call	12f4 <memcmp>
    1050:	103ff91e 	bne	r2,zero,1038 <_gp+0xffff723c>
    1054:	8005883a 	mov	r2,r16
    1058:	00000106 	br	1060 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    105c:	0005883a 	mov	r2,zero
}
    1060:	dfc00417 	ldw	ra,16(sp)
    1064:	dcc00317 	ldw	r19,12(sp)
    1068:	dc800217 	ldw	r18,8(sp)
    106c:	dc400117 	ldw	r17,4(sp)
    1070:	dc000017 	ldw	r16,0(sp)
    1074:	dec00504 	addi	sp,sp,20
    1078:	f800283a 	ret

0000107c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    107c:	defffa04 	addi	sp,sp,-24
    1080:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1084:	d4200317 	ldw	r16,-32756(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1088:	dd000415 	stw	r20,16(sp)
    108c:	dfc00515 	stw	ra,20(sp)
    1090:	dcc00315 	stw	r19,12(sp)
    1094:	dc800215 	stw	r18,8(sp)
    1098:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    109c:	d5200304 	addi	r20,gp,-32756
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    10a0:	85001626 	beq	r16,r20,10fc <alt_find_file+0x80>
    10a4:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    10a8:	04c00bc4 	movi	r19,47
    10ac:	00000806 	br	10d0 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    10b0:	9185883a 	add	r2,r18,r6
    10b4:	10800007 	ldb	r2,0(r2)
    10b8:	14c00126 	beq	r2,r19,10c0 <alt_find_file+0x44>
    10bc:	1000021e 	bne	r2,zero,10c8 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    10c0:	00012f40 	call	12f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    10c4:	10001626 	beq	r2,zero,1120 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    10c8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    10cc:	85000b26 	beq	r16,r20,10fc <alt_find_file+0x80>
  {
    len = strlen(next->name);
    10d0:	84400217 	ldw	r17,8(r16)
    10d4:	8809883a 	mov	r4,r17
    10d8:	00013d00 	call	13d0 <strlen>
    10dc:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    10e0:	8885883a 	add	r2,r17,r2
    10e4:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    10e8:	900b883a 	mov	r5,r18
    10ec:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    10f0:	14ffef1e 	bne	r2,r19,10b0 <_gp+0xffff72b4>
    {
      len -= 1;
    10f4:	31bfffc4 	addi	r6,r6,-1
    10f8:	003fed06 	br	10b0 <_gp+0xffff72b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    10fc:	0005883a 	mov	r2,zero
}
    1100:	dfc00517 	ldw	ra,20(sp)
    1104:	dd000417 	ldw	r20,16(sp)
    1108:	dcc00317 	ldw	r19,12(sp)
    110c:	dc800217 	ldw	r18,8(sp)
    1110:	dc400117 	ldw	r17,4(sp)
    1114:	dc000017 	ldw	r16,0(sp)
    1118:	dec00604 	addi	sp,sp,24
    111c:	f800283a 	ret
    1120:	8005883a 	mov	r2,r16
    1124:	003ff606 	br	1100 <_gp+0xffff7304>

00001128 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1128:	defffc04 	addi	sp,sp,-16
    112c:	dc400115 	stw	r17,4(sp)
    1130:	04400034 	movhi	r17,0
    1134:	8c46dd04 	addi	r17,r17,7028
    1138:	dc000015 	stw	r16,0(sp)
    113c:	dfc00315 	stw	ra,12(sp)
    1140:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1144:	0021883a 	mov	r16,zero
    1148:	8805883a 	mov	r2,r17
    114c:	01400804 	movi	r5,32
    1150:	00000206 	br	115c <alt_get_fd+0x34>
    1154:	84000044 	addi	r16,r16,1
    1158:	81401326 	beq	r16,r5,11a8 <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
    115c:	10c00017 	ldw	r3,0(r2)
    1160:	10800304 	addi	r2,r2,12
    1164:	183ffb1e 	bne	r3,zero,1154 <_gp+0xffff7358>
    1168:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
    116c:	01400304 	movi	r5,12
    1170:	8009883a 	mov	r4,r16
    1174:	00007600 	call	760 <__mulsi3>
    1178:	8885883a 	add	r2,r17,r2
    117c:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    1180:	d0a00017 	ldw	r2,-32768(gp)
    1184:	1400010e 	bge	r2,r16,118c <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    1188:	d4200015 	stw	r16,-32768(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    118c:	8005883a 	mov	r2,r16
    1190:	dfc00317 	ldw	ra,12(sp)
    1194:	dc800217 	ldw	r18,8(sp)
    1198:	dc400117 	ldw	r17,4(sp)
    119c:	dc000017 	ldw	r16,0(sp)
    11a0:	dec00404 	addi	sp,sp,16
    11a4:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    11a8:	043ffa04 	movi	r16,-24
    11ac:	003ff706 	br	118c <_gp+0xffff7390>

000011b0 <atexit>:
    11b0:	200b883a 	mov	r5,r4
    11b4:	000f883a 	mov	r7,zero
    11b8:	000d883a 	mov	r6,zero
    11bc:	0009883a 	mov	r4,zero
    11c0:	00014441 	jmpi	1444 <__register_exitproc>

000011c4 <exit>:
    11c4:	defffe04 	addi	sp,sp,-8
    11c8:	000b883a 	mov	r5,zero
    11cc:	dc000015 	stw	r16,0(sp)
    11d0:	dfc00115 	stw	ra,4(sp)
    11d4:	2021883a 	mov	r16,r4
    11d8:	000159c0 	call	159c <__call_exitprocs>
    11dc:	8009883a 	mov	r4,r16
    11e0:	00018e00 	call	18e0 <_exit>

000011e4 <fputs>:
    11e4:	defffd04 	addi	sp,sp,-12
    11e8:	dfc00215 	stw	ra,8(sp)
    11ec:	dc000115 	stw	r16,4(sp)
    11f0:	d9400015 	stw	r5,0(sp)
    11f4:	2021883a 	mov	r16,r4
    11f8:	00013d00 	call	13d0 <strlen>
    11fc:	100f883a 	mov	r7,r2
    1200:	00800034 	movhi	r2,0
    1204:	d9400017 	ldw	r5,0(sp)
    1208:	10878604 	addi	r2,r2,7704
    120c:	11000017 	ldw	r4,0(r2)
    1210:	00c00034 	movhi	r3,0
    1214:	18c48f04 	addi	r3,r3,4668
    1218:	28c00115 	stw	r3,4(r5)
    121c:	800d883a 	mov	r6,r16
    1220:	000123c0 	call	123c <__sfvwrite_small_dev>
    1224:	10bfffe0 	cmpeqi	r2,r2,-1
    1228:	0085c83a 	sub	r2,zero,r2
    122c:	dfc00217 	ldw	ra,8(sp)
    1230:	dc000117 	ldw	r16,4(sp)
    1234:	dec00304 	addi	sp,sp,12
    1238:	f800283a 	ret

0000123c <__sfvwrite_small_dev>:
    123c:	2880000b 	ldhu	r2,0(r5)
    1240:	1080020c 	andi	r2,r2,8
    1244:	10002126 	beq	r2,zero,12cc <__sfvwrite_small_dev+0x90>
    1248:	2880008f 	ldh	r2,2(r5)
    124c:	defffa04 	addi	sp,sp,-24
    1250:	dc000015 	stw	r16,0(sp)
    1254:	dfc00515 	stw	ra,20(sp)
    1258:	dd000415 	stw	r20,16(sp)
    125c:	dcc00315 	stw	r19,12(sp)
    1260:	dc800215 	stw	r18,8(sp)
    1264:	dc400115 	stw	r17,4(sp)
    1268:	2821883a 	mov	r16,r5
    126c:	10001216 	blt	r2,zero,12b8 <__sfvwrite_small_dev+0x7c>
    1270:	2027883a 	mov	r19,r4
    1274:	3025883a 	mov	r18,r6
    1278:	3823883a 	mov	r17,r7
    127c:	05010004 	movi	r20,1024
    1280:	04400b0e 	bge	zero,r17,12b0 <__sfvwrite_small_dev+0x74>
    1284:	880f883a 	mov	r7,r17
    1288:	a440010e 	bge	r20,r17,1290 <__sfvwrite_small_dev+0x54>
    128c:	01c10004 	movi	r7,1024
    1290:	8140008f 	ldh	r5,2(r16)
    1294:	900d883a 	mov	r6,r18
    1298:	9809883a 	mov	r4,r19
    129c:	00013ec0 	call	13ec <_write_r>
    12a0:	0080050e 	bge	zero,r2,12b8 <__sfvwrite_small_dev+0x7c>
    12a4:	88a3c83a 	sub	r17,r17,r2
    12a8:	90a5883a 	add	r18,r18,r2
    12ac:	003ff406 	br	1280 <_gp+0xffff7484>
    12b0:	0005883a 	mov	r2,zero
    12b4:	00000706 	br	12d4 <__sfvwrite_small_dev+0x98>
    12b8:	8080000b 	ldhu	r2,0(r16)
    12bc:	10801014 	ori	r2,r2,64
    12c0:	8080000d 	sth	r2,0(r16)
    12c4:	00bfffc4 	movi	r2,-1
    12c8:	00000206 	br	12d4 <__sfvwrite_small_dev+0x98>
    12cc:	00bfffc4 	movi	r2,-1
    12d0:	f800283a 	ret
    12d4:	dfc00517 	ldw	ra,20(sp)
    12d8:	dd000417 	ldw	r20,16(sp)
    12dc:	dcc00317 	ldw	r19,12(sp)
    12e0:	dc800217 	ldw	r18,8(sp)
    12e4:	dc400117 	ldw	r17,4(sp)
    12e8:	dc000017 	ldw	r16,0(sp)
    12ec:	dec00604 	addi	sp,sp,24
    12f0:	f800283a 	ret

000012f4 <memcmp>:
    12f4:	218d883a 	add	r6,r4,r6
    12f8:	21800826 	beq	r4,r6,131c <memcmp+0x28>
    12fc:	20800003 	ldbu	r2,0(r4)
    1300:	28c00003 	ldbu	r3,0(r5)
    1304:	10c00226 	beq	r2,r3,1310 <memcmp+0x1c>
    1308:	10c5c83a 	sub	r2,r2,r3
    130c:	f800283a 	ret
    1310:	21000044 	addi	r4,r4,1
    1314:	29400044 	addi	r5,r5,1
    1318:	003ff706 	br	12f8 <_gp+0xffff74fc>
    131c:	0005883a 	mov	r2,zero
    1320:	f800283a 	ret

00001324 <putc>:
    1324:	defffd04 	addi	sp,sp,-12
    1328:	00800034 	movhi	r2,0
    132c:	dc000115 	stw	r16,4(sp)
    1330:	dfc00215 	stw	ra,8(sp)
    1334:	10848f04 	addi	r2,r2,4668
    1338:	28800115 	stw	r2,4(r5)
    133c:	00800034 	movhi	r2,0
    1340:	10878604 	addi	r2,r2,7704
    1344:	d9000005 	stb	r4,0(sp)
    1348:	2021883a 	mov	r16,r4
    134c:	11000017 	ldw	r4,0(r2)
    1350:	01c00044 	movi	r7,1
    1354:	d80d883a 	mov	r6,sp
    1358:	000123c0 	call	123c <__sfvwrite_small_dev>
    135c:	00ffffc4 	movi	r3,-1
    1360:	10c00126 	beq	r2,r3,1368 <putc+0x44>
    1364:	8005883a 	mov	r2,r16
    1368:	dfc00217 	ldw	ra,8(sp)
    136c:	dc000117 	ldw	r16,4(sp)
    1370:	dec00304 	addi	sp,sp,12
    1374:	f800283a 	ret

00001378 <_putc_r>:
    1378:	defffd04 	addi	sp,sp,-12
    137c:	00800034 	movhi	r2,0
    1380:	dc000115 	stw	r16,4(sp)
    1384:	dfc00215 	stw	ra,8(sp)
    1388:	10848f04 	addi	r2,r2,4668
    138c:	30800115 	stw	r2,4(r6)
    1390:	00800034 	movhi	r2,0
    1394:	10878604 	addi	r2,r2,7704
    1398:	11000017 	ldw	r4,0(r2)
    139c:	2821883a 	mov	r16,r5
    13a0:	01c00044 	movi	r7,1
    13a4:	300b883a 	mov	r5,r6
    13a8:	d80d883a 	mov	r6,sp
    13ac:	dc000005 	stb	r16,0(sp)
    13b0:	000123c0 	call	123c <__sfvwrite_small_dev>
    13b4:	00ffffc4 	movi	r3,-1
    13b8:	10c00126 	beq	r2,r3,13c0 <_putc_r+0x48>
    13bc:	8005883a 	mov	r2,r16
    13c0:	dfc00217 	ldw	ra,8(sp)
    13c4:	dc000117 	ldw	r16,4(sp)
    13c8:	dec00304 	addi	sp,sp,12
    13cc:	f800283a 	ret

000013d0 <strlen>:
    13d0:	2005883a 	mov	r2,r4
    13d4:	10c00007 	ldb	r3,0(r2)
    13d8:	18000226 	beq	r3,zero,13e4 <strlen+0x14>
    13dc:	10800044 	addi	r2,r2,1
    13e0:	003ffc06 	br	13d4 <_gp+0xffff75d8>
    13e4:	1105c83a 	sub	r2,r2,r4
    13e8:	f800283a 	ret

000013ec <_write_r>:
    13ec:	defffd04 	addi	sp,sp,-12
    13f0:	dc000015 	stw	r16,0(sp)
    13f4:	04000034 	movhi	r16,0
    13f8:	dc400115 	stw	r17,4(sp)
    13fc:	84083f04 	addi	r16,r16,8444
    1400:	2023883a 	mov	r17,r4
    1404:	2809883a 	mov	r4,r5
    1408:	300b883a 	mov	r5,r6
    140c:	380d883a 	mov	r6,r7
    1410:	dfc00215 	stw	ra,8(sp)
    1414:	80000015 	stw	zero,0(r16)
    1418:	00018f40 	call	18f4 <write>
    141c:	00ffffc4 	movi	r3,-1
    1420:	10c0031e 	bne	r2,r3,1430 <_write_r+0x44>
    1424:	80c00017 	ldw	r3,0(r16)
    1428:	18000126 	beq	r3,zero,1430 <_write_r+0x44>
    142c:	88c00015 	stw	r3,0(r17)
    1430:	dfc00217 	ldw	ra,8(sp)
    1434:	dc400117 	ldw	r17,4(sp)
    1438:	dc000017 	ldw	r16,0(sp)
    143c:	dec00304 	addi	sp,sp,12
    1440:	f800283a 	ret

00001444 <__register_exitproc>:
    1444:	00800034 	movhi	r2,0
    1448:	10878504 	addi	r2,r2,7700
    144c:	10c00017 	ldw	r3,0(r2)
    1450:	defff904 	addi	sp,sp,-28
    1454:	dc000015 	stw	r16,0(sp)
    1458:	1c000c17 	ldw	r16,48(r3)
    145c:	dd400515 	stw	r21,20(sp)
    1460:	dd000415 	stw	r20,16(sp)
    1464:	dcc00315 	stw	r19,12(sp)
    1468:	dc800215 	stw	r18,8(sp)
    146c:	dc400115 	stw	r17,4(sp)
    1470:	dfc00615 	stw	ra,24(sp)
    1474:	202b883a 	mov	r21,r4
    1478:	2823883a 	mov	r17,r5
    147c:	3027883a 	mov	r19,r6
    1480:	3825883a 	mov	r18,r7
    1484:	1029883a 	mov	r20,r2
    1488:	8000021e 	bne	r16,zero,1494 <__register_exitproc+0x50>
    148c:	1c000d04 	addi	r16,r3,52
    1490:	1c000c15 	stw	r16,48(r3)
    1494:	80800117 	ldw	r2,4(r16)
    1498:	00c007c4 	movi	r3,31
    149c:	1880110e 	bge	r3,r2,14e4 <__register_exitproc+0xa0>
    14a0:	00800034 	movhi	r2,0
    14a4:	10800004 	addi	r2,r2,0
    14a8:	1000021e 	bne	r2,zero,14b4 <__register_exitproc+0x70>
    14ac:	00bfffc4 	movi	r2,-1
    14b0:	00003106 	br	1578 <__register_exitproc+0x134>
    14b4:	01002304 	movi	r4,140
    14b8:	00000000 	call	0 <__reset>
    14bc:	1021883a 	mov	r16,r2
    14c0:	103ffa26 	beq	r2,zero,14ac <_gp+0xffff76b0>
    14c4:	10000115 	stw	zero,4(r2)
    14c8:	a0800017 	ldw	r2,0(r20)
    14cc:	10c00c17 	ldw	r3,48(r2)
    14d0:	80c00015 	stw	r3,0(r16)
    14d4:	14000c15 	stw	r16,48(r2)
    14d8:	80002215 	stw	zero,136(r16)
    14dc:	a8001d26 	beq	r21,zero,1554 <__register_exitproc+0x110>
    14e0:	00000606 	br	14fc <__register_exitproc+0xb8>
    14e4:	a8001b26 	beq	r21,zero,1554 <__register_exitproc+0x110>
    14e8:	80802217 	ldw	r2,136(r16)
    14ec:	1000091e 	bne	r2,zero,1514 <__register_exitproc+0xd0>
    14f0:	00800034 	movhi	r2,0
    14f4:	10800004 	addi	r2,r2,0
    14f8:	103fec26 	beq	r2,zero,14ac <_gp+0xffff76b0>
    14fc:	01004204 	movi	r4,264
    1500:	00000000 	call	0 <__reset>
    1504:	103fe926 	beq	r2,zero,14ac <_gp+0xffff76b0>
    1508:	10004015 	stw	zero,256(r2)
    150c:	10004115 	stw	zero,260(r2)
    1510:	80802215 	stw	r2,136(r16)
    1514:	81400117 	ldw	r5,4(r16)
    1518:	01000044 	movi	r4,1
    151c:	2947883a 	add	r3,r5,r5
    1520:	18c7883a 	add	r3,r3,r3
    1524:	10c7883a 	add	r3,r2,r3
    1528:	1cc00015 	stw	r19,0(r3)
    152c:	2148983a 	sll	r4,r4,r5
    1530:	11404017 	ldw	r5,256(r2)
    1534:	290ab03a 	or	r5,r5,r4
    1538:	11404015 	stw	r5,256(r2)
    153c:	1c802015 	stw	r18,128(r3)
    1540:	00c00084 	movi	r3,2
    1544:	a8c0031e 	bne	r21,r3,1554 <__register_exitproc+0x110>
    1548:	10c04117 	ldw	r3,260(r2)
    154c:	1908b03a 	or	r4,r3,r4
    1550:	11004115 	stw	r4,260(r2)
    1554:	80800117 	ldw	r2,4(r16)
    1558:	10c00044 	addi	r3,r2,1
    155c:	10800084 	addi	r2,r2,2
    1560:	1085883a 	add	r2,r2,r2
    1564:	1085883a 	add	r2,r2,r2
    1568:	80c00115 	stw	r3,4(r16)
    156c:	80a1883a 	add	r16,r16,r2
    1570:	84400015 	stw	r17,0(r16)
    1574:	0005883a 	mov	r2,zero
    1578:	dfc00617 	ldw	ra,24(sp)
    157c:	dd400517 	ldw	r21,20(sp)
    1580:	dd000417 	ldw	r20,16(sp)
    1584:	dcc00317 	ldw	r19,12(sp)
    1588:	dc800217 	ldw	r18,8(sp)
    158c:	dc400117 	ldw	r17,4(sp)
    1590:	dc000017 	ldw	r16,0(sp)
    1594:	dec00704 	addi	sp,sp,28
    1598:	f800283a 	ret

0000159c <__call_exitprocs>:
    159c:	defff504 	addi	sp,sp,-44
    15a0:	dd000515 	stw	r20,20(sp)
    15a4:	05000034 	movhi	r20,0
    15a8:	dc800315 	stw	r18,12(sp)
    15ac:	dfc00a15 	stw	ra,40(sp)
    15b0:	df000915 	stw	fp,36(sp)
    15b4:	ddc00815 	stw	r23,32(sp)
    15b8:	dd800715 	stw	r22,28(sp)
    15bc:	dd400615 	stw	r21,24(sp)
    15c0:	dcc00415 	stw	r19,16(sp)
    15c4:	dc400215 	stw	r17,8(sp)
    15c8:	dc000115 	stw	r16,4(sp)
    15cc:	d9000015 	stw	r4,0(sp)
    15d0:	2825883a 	mov	r18,r5
    15d4:	a5078504 	addi	r20,r20,7700
    15d8:	a4400017 	ldw	r17,0(r20)
    15dc:	8cc00c17 	ldw	r19,48(r17)
    15e0:	8c400c04 	addi	r17,r17,48
    15e4:	98004526 	beq	r19,zero,16fc <__call_exitprocs+0x160>
    15e8:	9c000117 	ldw	r16,4(r19)
    15ec:	00900034 	movhi	r2,16384
    15f0:	10bfffc4 	addi	r2,r2,-1
    15f4:	9d402217 	ldw	r21,136(r19)
    15f8:	85bfffc4 	addi	r22,r16,-1
    15fc:	80a1883a 	add	r16,r16,r2
    1600:	8421883a 	add	r16,r16,r16
    1604:	8421883a 	add	r16,r16,r16
    1608:	ac2f883a 	add	r23,r21,r16
    160c:	84000204 	addi	r16,r16,8
    1610:	9c21883a 	add	r16,r19,r16
    1614:	b0002716 	blt	r22,zero,16b4 <__call_exitprocs+0x118>
    1618:	90000726 	beq	r18,zero,1638 <__call_exitprocs+0x9c>
    161c:	a800041e 	bne	r21,zero,1630 <__call_exitprocs+0x94>
    1620:	b5bfffc4 	addi	r22,r22,-1
    1624:	bdffff04 	addi	r23,r23,-4
    1628:	843fff04 	addi	r16,r16,-4
    162c:	003ff906 	br	1614 <_gp+0xffff7818>
    1630:	b9002017 	ldw	r4,128(r23)
    1634:	913ffa1e 	bne	r18,r4,1620 <_gp+0xffff7824>
    1638:	99000117 	ldw	r4,4(r19)
    163c:	82000017 	ldw	r8,0(r16)
    1640:	213fffc4 	addi	r4,r4,-1
    1644:	b100021e 	bne	r22,r4,1650 <__call_exitprocs+0xb4>
    1648:	9d800115 	stw	r22,4(r19)
    164c:	00000106 	br	1654 <__call_exitprocs+0xb8>
    1650:	80000015 	stw	zero,0(r16)
    1654:	403ff226 	beq	r8,zero,1620 <_gp+0xffff7824>
    1658:	9f000117 	ldw	fp,4(r19)
    165c:	a8000526 	beq	r21,zero,1674 <__call_exitprocs+0xd8>
    1660:	00800044 	movi	r2,1
    1664:	1592983a 	sll	r9,r2,r22
    1668:	a9404017 	ldw	r5,256(r21)
    166c:	494a703a 	and	r5,r9,r5
    1670:	2800021e 	bne	r5,zero,167c <__call_exitprocs+0xe0>
    1674:	403ee83a 	callr	r8
    1678:	00000906 	br	16a0 <__call_exitprocs+0x104>
    167c:	a9004117 	ldw	r4,260(r21)
    1680:	4908703a 	and	r4,r9,r4
    1684:	2000041e 	bne	r4,zero,1698 <__call_exitprocs+0xfc>
    1688:	b9400017 	ldw	r5,0(r23)
    168c:	d9000017 	ldw	r4,0(sp)
    1690:	403ee83a 	callr	r8
    1694:	00000206 	br	16a0 <__call_exitprocs+0x104>
    1698:	b9000017 	ldw	r4,0(r23)
    169c:	403ee83a 	callr	r8
    16a0:	99000117 	ldw	r4,4(r19)
    16a4:	e13fcc1e 	bne	fp,r4,15d8 <_gp+0xffff77dc>
    16a8:	89000017 	ldw	r4,0(r17)
    16ac:	993fdc26 	beq	r19,r4,1620 <_gp+0xffff7824>
    16b0:	003fc906 	br	15d8 <_gp+0xffff77dc>
    16b4:	00800034 	movhi	r2,0
    16b8:	10800004 	addi	r2,r2,0
    16bc:	10000f26 	beq	r2,zero,16fc <__call_exitprocs+0x160>
    16c0:	99400117 	ldw	r5,4(r19)
    16c4:	99000017 	ldw	r4,0(r19)
    16c8:	2800091e 	bne	r5,zero,16f0 <__call_exitprocs+0x154>
    16cc:	20000826 	beq	r4,zero,16f0 <__call_exitprocs+0x154>
    16d0:	89000015 	stw	r4,0(r17)
    16d4:	a8000226 	beq	r21,zero,16e0 <__call_exitprocs+0x144>
    16d8:	a809883a 	mov	r4,r21
    16dc:	00000000 	call	0 <__reset>
    16e0:	9809883a 	mov	r4,r19
    16e4:	00000000 	call	0 <__reset>
    16e8:	8cc00017 	ldw	r19,0(r17)
    16ec:	003fbd06 	br	15e4 <_gp+0xffff77e8>
    16f0:	9823883a 	mov	r17,r19
    16f4:	2027883a 	mov	r19,r4
    16f8:	003fba06 	br	15e4 <_gp+0xffff77e8>
    16fc:	dfc00a17 	ldw	ra,40(sp)
    1700:	df000917 	ldw	fp,36(sp)
    1704:	ddc00817 	ldw	r23,32(sp)
    1708:	dd800717 	ldw	r22,28(sp)
    170c:	dd400617 	ldw	r21,24(sp)
    1710:	dd000517 	ldw	r20,20(sp)
    1714:	dcc00417 	ldw	r19,16(sp)
    1718:	dc800317 	ldw	r18,12(sp)
    171c:	dc400217 	ldw	r17,8(sp)
    1720:	dc000117 	ldw	r16,4(sp)
    1724:	dec00b04 	addi	sp,sp,44
    1728:	f800283a 	ret

0000172c <__divsi3>:
    172c:	20001b16 	blt	r4,zero,179c <__divsi3+0x70>
    1730:	000f883a 	mov	r7,zero
    1734:	28001616 	blt	r5,zero,1790 <__divsi3+0x64>
    1738:	200d883a 	mov	r6,r4
    173c:	29001a2e 	bgeu	r5,r4,17a8 <__divsi3+0x7c>
    1740:	00800804 	movi	r2,32
    1744:	00c00044 	movi	r3,1
    1748:	00000106 	br	1750 <__divsi3+0x24>
    174c:	10000d26 	beq	r2,zero,1784 <__divsi3+0x58>
    1750:	294b883a 	add	r5,r5,r5
    1754:	10bfffc4 	addi	r2,r2,-1
    1758:	18c7883a 	add	r3,r3,r3
    175c:	293ffb36 	bltu	r5,r4,174c <_gp+0xffff7950>
    1760:	0005883a 	mov	r2,zero
    1764:	18000726 	beq	r3,zero,1784 <__divsi3+0x58>
    1768:	0005883a 	mov	r2,zero
    176c:	31400236 	bltu	r6,r5,1778 <__divsi3+0x4c>
    1770:	314dc83a 	sub	r6,r6,r5
    1774:	10c4b03a 	or	r2,r2,r3
    1778:	1806d07a 	srli	r3,r3,1
    177c:	280ad07a 	srli	r5,r5,1
    1780:	183ffa1e 	bne	r3,zero,176c <_gp+0xffff7970>
    1784:	38000126 	beq	r7,zero,178c <__divsi3+0x60>
    1788:	0085c83a 	sub	r2,zero,r2
    178c:	f800283a 	ret
    1790:	014bc83a 	sub	r5,zero,r5
    1794:	39c0005c 	xori	r7,r7,1
    1798:	003fe706 	br	1738 <_gp+0xffff793c>
    179c:	0109c83a 	sub	r4,zero,r4
    17a0:	01c00044 	movi	r7,1
    17a4:	003fe306 	br	1734 <_gp+0xffff7938>
    17a8:	00c00044 	movi	r3,1
    17ac:	003fee06 	br	1768 <_gp+0xffff796c>

000017b0 <__modsi3>:
    17b0:	20001716 	blt	r4,zero,1810 <__modsi3+0x60>
    17b4:	000f883a 	mov	r7,zero
    17b8:	2005883a 	mov	r2,r4
    17bc:	28001216 	blt	r5,zero,1808 <__modsi3+0x58>
    17c0:	2900162e 	bgeu	r5,r4,181c <__modsi3+0x6c>
    17c4:	01800804 	movi	r6,32
    17c8:	00c00044 	movi	r3,1
    17cc:	00000106 	br	17d4 <__modsi3+0x24>
    17d0:	30000a26 	beq	r6,zero,17fc <__modsi3+0x4c>
    17d4:	294b883a 	add	r5,r5,r5
    17d8:	31bfffc4 	addi	r6,r6,-1
    17dc:	18c7883a 	add	r3,r3,r3
    17e0:	293ffb36 	bltu	r5,r4,17d0 <_gp+0xffff79d4>
    17e4:	18000526 	beq	r3,zero,17fc <__modsi3+0x4c>
    17e8:	1806d07a 	srli	r3,r3,1
    17ec:	11400136 	bltu	r2,r5,17f4 <__modsi3+0x44>
    17f0:	1145c83a 	sub	r2,r2,r5
    17f4:	280ad07a 	srli	r5,r5,1
    17f8:	183ffb1e 	bne	r3,zero,17e8 <_gp+0xffff79ec>
    17fc:	38000126 	beq	r7,zero,1804 <__modsi3+0x54>
    1800:	0085c83a 	sub	r2,zero,r2
    1804:	f800283a 	ret
    1808:	014bc83a 	sub	r5,zero,r5
    180c:	003fec06 	br	17c0 <_gp+0xffff79c4>
    1810:	0109c83a 	sub	r4,zero,r4
    1814:	01c00044 	movi	r7,1
    1818:	003fe706 	br	17b8 <_gp+0xffff79bc>
    181c:	00c00044 	movi	r3,1
    1820:	003ff106 	br	17e8 <_gp+0xffff79ec>

00001824 <__udivsi3>:
    1824:	200d883a 	mov	r6,r4
    1828:	2900152e 	bgeu	r5,r4,1880 <__udivsi3+0x5c>
    182c:	28001416 	blt	r5,zero,1880 <__udivsi3+0x5c>
    1830:	00800804 	movi	r2,32
    1834:	00c00044 	movi	r3,1
    1838:	00000206 	br	1844 <__udivsi3+0x20>
    183c:	10000e26 	beq	r2,zero,1878 <__udivsi3+0x54>
    1840:	28000516 	blt	r5,zero,1858 <__udivsi3+0x34>
    1844:	294b883a 	add	r5,r5,r5
    1848:	10bfffc4 	addi	r2,r2,-1
    184c:	18c7883a 	add	r3,r3,r3
    1850:	293ffa36 	bltu	r5,r4,183c <_gp+0xffff7a40>
    1854:	18000826 	beq	r3,zero,1878 <__udivsi3+0x54>
    1858:	0005883a 	mov	r2,zero
    185c:	31400236 	bltu	r6,r5,1868 <__udivsi3+0x44>
    1860:	314dc83a 	sub	r6,r6,r5
    1864:	10c4b03a 	or	r2,r2,r3
    1868:	1806d07a 	srli	r3,r3,1
    186c:	280ad07a 	srli	r5,r5,1
    1870:	183ffa1e 	bne	r3,zero,185c <_gp+0xffff7a60>
    1874:	f800283a 	ret
    1878:	0005883a 	mov	r2,zero
    187c:	f800283a 	ret
    1880:	00c00044 	movi	r3,1
    1884:	003ff406 	br	1858 <_gp+0xffff7a5c>

00001888 <__umodsi3>:
    1888:	2005883a 	mov	r2,r4
    188c:	2900122e 	bgeu	r5,r4,18d8 <__umodsi3+0x50>
    1890:	28001116 	blt	r5,zero,18d8 <__umodsi3+0x50>
    1894:	01800804 	movi	r6,32
    1898:	00c00044 	movi	r3,1
    189c:	00000206 	br	18a8 <__umodsi3+0x20>
    18a0:	30000c26 	beq	r6,zero,18d4 <__umodsi3+0x4c>
    18a4:	28000516 	blt	r5,zero,18bc <__umodsi3+0x34>
    18a8:	294b883a 	add	r5,r5,r5
    18ac:	31bfffc4 	addi	r6,r6,-1
    18b0:	18c7883a 	add	r3,r3,r3
    18b4:	293ffa36 	bltu	r5,r4,18a0 <_gp+0xffff7aa4>
    18b8:	18000626 	beq	r3,zero,18d4 <__umodsi3+0x4c>
    18bc:	1806d07a 	srli	r3,r3,1
    18c0:	11400136 	bltu	r2,r5,18c8 <__umodsi3+0x40>
    18c4:	1145c83a 	sub	r2,r2,r5
    18c8:	280ad07a 	srli	r5,r5,1
    18cc:	183ffb1e 	bne	r3,zero,18bc <_gp+0xffff7ac0>
    18d0:	f800283a 	ret
    18d4:	f800283a 	ret
    18d8:	00c00044 	movi	r3,1
    18dc:	003ff706 	br	18bc <_gp+0xffff7ac0>

000018e0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    18e0:	20000226 	beq	r4,zero,18ec <_exit+0xc>
    ALT_SIM_FAIL();
    18e4:	002af070 	cmpltui	zero,zero,43969
    18e8:	003fff06 	br	18e8 <_gp+0xffff7aec>
  } else {
    ALT_SIM_PASS();
    18ec:	002af0b0 	cmpltui	zero,zero,43970
    18f0:	003ffd06 	br	18e8 <_gp+0xffff7aec>

000018f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    18f4:	defffa04 	addi	sp,sp,-24
    18f8:	dfc00515 	stw	ra,20(sp)
    18fc:	dd000415 	stw	r20,16(sp)
    1900:	dcc00315 	stw	r19,12(sp)
    1904:	dc800215 	stw	r18,8(sp)
    1908:	dc400115 	stw	r17,4(sp)
    190c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1910:	20003116 	blt	r4,zero,19d8 <write+0xe4>
    1914:	2827883a 	mov	r19,r5
    1918:	04000034 	movhi	r16,0
    191c:	01400304 	movi	r5,12
    1920:	2025883a 	mov	r18,r4
    1924:	3029883a 	mov	r20,r6
    1928:	8406dd04 	addi	r16,r16,7028
    192c:	00007600 	call	760 <__mulsi3>
    1930:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    1934:	88002826 	beq	r17,zero,19d8 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1938:	88800217 	ldw	r2,8(r17)
    193c:	108000cc 	andi	r2,r2,3
    1940:	10001526 	beq	r2,zero,1998 <write+0xa4>
    1944:	01400304 	movi	r5,12
    1948:	9009883a 	mov	r4,r18
    194c:	00007600 	call	760 <__mulsi3>
    1950:	8085883a 	add	r2,r16,r2
    1954:	10800017 	ldw	r2,0(r2)
    1958:	10800617 	ldw	r2,24(r2)
    195c:	10000e26 	beq	r2,zero,1998 <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1960:	a00d883a 	mov	r6,r20
    1964:	980b883a 	mov	r5,r19
    1968:	8809883a 	mov	r4,r17
    196c:	103ee83a 	callr	r2
    1970:	1021883a 	mov	r16,r2
    1974:	10001116 	blt	r2,zero,19bc <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    1978:	dfc00517 	ldw	ra,20(sp)
    197c:	dd000417 	ldw	r20,16(sp)
    1980:	dcc00317 	ldw	r19,12(sp)
    1984:	dc800217 	ldw	r18,8(sp)
    1988:	dc400117 	ldw	r17,4(sp)
    198c:	dc000017 	ldw	r16,0(sp)
    1990:	dec00604 	addi	sp,sp,24
    1994:	f800283a 	ret
    1998:	d0a00517 	ldw	r2,-32748(gp)
    199c:	10000526 	beq	r2,zero,19b4 <write+0xc0>
    19a0:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    19a4:	00c00344 	movi	r3,13
    19a8:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    19ac:	00bfffc4 	movi	r2,-1
    19b0:	003ff106 	br	1978 <_gp+0xffff7b7c>
    19b4:	d0a0c004 	addi	r2,gp,-32000
    19b8:	003ffa06 	br	19a4 <_gp+0xffff7ba8>
    19bc:	d0a00517 	ldw	r2,-32748(gp)
    19c0:	10000c26 	beq	r2,zero,19f4 <write+0x100>
    19c4:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    19c8:	0421c83a 	sub	r16,zero,r16
    19cc:	14000015 	stw	r16,0(r2)
        return -1;
    19d0:	00bfffc4 	movi	r2,-1
    19d4:	003fe806 	br	1978 <_gp+0xffff7b7c>
    19d8:	d0a00517 	ldw	r2,-32748(gp)
    19dc:	10000726 	beq	r2,zero,19fc <write+0x108>
    19e0:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    19e4:	00c01444 	movi	r3,81
    19e8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    19ec:	00bfffc4 	movi	r2,-1
    19f0:	003fe106 	br	1978 <_gp+0xffff7b7c>
    19f4:	d0a0c004 	addi	r2,gp,-32000
    19f8:	003ff306 	br	19c8 <_gp+0xffff7bcc>
    19fc:	d0a0c004 	addi	r2,gp,-32000
    1a00:	003ff806 	br	19e4 <_gp+0xffff7be8>
