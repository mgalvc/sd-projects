
leds_controller.elf:     file format elf32-littlenios2
leds_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001d94 memsz 0x00001d94 flags r-x
    LOAD off    0x00002db4 vaddr 0x00001db4 paddr 0x00002088 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x0000335c vaddr 0x0000235c paddr 0x0000235c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00003088  2**0
                  CONTENTS
  2 .text         00001bd4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001c0  00001bf4  00001bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00001db4  00002088  00002db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0000235c  0000235c  0000335c  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  0000236c  0000236c  00003088  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000580  00000000  00000000  000030b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007765  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029ef  00000000  00000000  0000ad95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002e4a  00000000  00000000  0000d784  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000970  00000000  00000000  000105d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000174c  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001db2  00000000  00000000  0001268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014440  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f0  00000000  00000000  00014480  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015eaa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00015ead  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015eb2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015eb3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00015eb4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00015eb8  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00015ebc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00015ec0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  00015ec4  2**0
                  CONTENTS, READONLY
 26 .jdi          000031ce  00000000  00000000  00015edd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005735e  00000000  00000000  000190ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00001bf4 l    d  .rodata	00000000 .rodata
00001db4 l    d  .rwdata	00000000 .rwdata
0000235c l    d  .bss	00000000 .bss
0000236c l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../leds_controller_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001db4 l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001028 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001168 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001f88 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
00000d20 g     F .text	00000060 alt_main
00002088 g       *ABS*	00000000 __flash_rwdata_start
00000d80 g     F .text	0000000c alt_putstr
0000144c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002368 g     O .bss	00000004 errno
00002360 g     O .bss	00000004 alt_argv
0000a068 g       *ABS*	00000000 _gp
00000d8c g     F .text	00000004 usleep
00001de0 g     O .rwdata	00000180 alt_fd_list
00001454 g     F .text	00000078 alt_find_dev
00000930 g     F .text	00000028 memcpy
000011f4 g     F .text	00000074 alt_io_redirect
00001bf4 g       *ABS*	00000000 __DTOR_END__
00000b50 g     F .text	00000064 .hidden __udivsi3
0000092c g     F .text	00000004 itoa
00002068 g     O .rwdata	00000004 alt_max_fd
00002080 g     O .rwdata	00000004 _global_impure_ptr
0000236c g       *ABS*	00000000 __bss_end
0000005c g     F .text	00000048 enable
000000f0 g     F .text	00000090 write_text
00001f60 g     O .rwdata	00000028 alt_dev_null
00001024 g     F .text	00000004 alt_dcache_flush_all
00000a54 g     F .text	00000004 utoa
00002088 g       *ABS*	00000000 __ram_rwdata_end
0000206c g     O .rwdata	00000008 alt_dev_list
00001ae4 g     F .text	00000110 write
00001db4 g       *ABS*	00000000 __ram_rodata_end
00000338 g     F .text	00000118 init_esp
00000bb4 g     F .text	00000058 .hidden __umodsi3
0000236c g       *ABS*	00000000 end
000008c4 g     F .text	00000068 __itoa
00000e5c g     F .text	00000080 altera_avalon_uart_write
00001bf4 g       *ABS*	00000000 __CTOR_LIST__
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000dd0 g     F .text	00000010 altera_avalon_uart_write_fd
00001940 g     F .text	00000190 __call_exitprocs
00000020 g     F .text	0000003c _start
00000450 g     F .text	0000019c publish
00000db0 g     F .text	00000010 alt_sys_init
000017e8 g     F .text	00000158 __register_exitproc
0000089c g     F .text	00000028 .hidden __mulsi3
00001db4 g       *ABS*	00000000 __ram_rwdata_start
00001bf4 g       *ABS*	00000000 __ram_rodata_start
00000284 g     F .text	0000007c sendATCommand
00001578 g     F .text	00000088 alt_get_fd
00000edc g     F .text	00000088 alt_busy_sleep
000000a4 g     F .text	0000004c clear_display
00001744 g     F .text	00000030 memcmp
0000236c g       *ABS*	00000000 __alt_stack_base
000014cc g     F .text	000000ac alt_find_file
00001030 g     F .text	0000006c alt_dev_llist_insert
00000958 g     F .text	000000fc __utoa
0000168c g     F .text	000000b8 __sfvwrite_small_dev
0000235c g       *ABS*	00000000 __bss_start
000005ec g     F .text	000002b0 main
0000235c g     O .bss	00000004 alt_envp
0000207c g     O .rwdata	00000004 alt_errno
00000a58 g     F .text	00000084 .hidden __divsi3
00001bf4 g       *ABS*	00000000 __CTOR_END__
00001bf4 g       *ABS*	00000000 __flash_rodata_start
00001bf4 g       *ABS*	00000000 __DTOR_LIST__
00000d90 g     F .text	00000020 alt_irq_init
000013f0 g     F .text	0000005c alt_release_fd
00001600 g     F .text	00000014 atexit
00001790 g     F .text	00000058 _write_r
00002084 g     O .rwdata	00000004 _impure_ptr
00002364 g     O .bss	00000004 alt_argc
00001100 g     F .text	00000064 _do_dtors
00002074 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002088 g       *ABS*	00000000 _edata
00000dc0 g     F .text	00000010 altera_avalon_uart_read_fd
0000236c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000300 g     F .text	00000038 uart_ok
00000000 g       *ABS*	00000000 __alt_mem_memory
00001614 g     F .text	00000020 exit
00000adc g     F .text	00000074 .hidden __modsi3
00000180 g     F .text	00000104 init_lcd
00004000 g       *ABS*	00000000 __alt_data_end
00001ad0 g     F .text	00000014 _exit
00001774 g     F .text	0000001c strlen
00001268 g     F .text	00000188 open
00001164 g     F .text	00000004 alt_icache_flush_all
00001634 g     F .text	00000058 fputs
00000de0 g     F .text	0000007c altera_avalon_uart_read
0000109c g     F .text	00000064 _do_ctors
00000f64 g     F .text	000000c0 close
00000c0c g     F .text	00000114 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a81a14 	ori	gp,gp,41064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	1088d714 	ori	r2,r2,9052

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18c8db14 	ori	r3,r3,9068

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff5fdc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0000c0c0 	call	c0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	0000d200 	call	d20 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff5ff0>

0000005c <enable>:
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "sys/alt_stdio.h";
#include "altera_avalon_uart_regs.h"

void enable() {
      5c:	defffe04 	addi	sp,sp,-8
      60:	dfc00115 	stw	ra,4(sp)
      64:	df000015 	stw	fp,0(sp)
      68:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
      6c:	00c00044 	movi	r3,1
      70:	00943404 	movi	r2,20688
      74:	10c00035 	stwio	r3,0(r2)
	usleep(200);
      78:	01003204 	movi	r4,200
      7c:	0000d8c0 	call	d8c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
      80:	0007883a 	mov	r3,zero
      84:	00943404 	movi	r2,20688
      88:	10c00035 	stwio	r3,0(r2)
}
      8c:	0001883a 	nop
      90:	e037883a 	mov	sp,fp
      94:	dfc00117 	ldw	ra,4(sp)
      98:	df000017 	ldw	fp,0(sp)
      9c:	dec00204 	addi	sp,sp,8
      a0:	f800283a 	ret

000000a4 <clear_display>:

void clear_display() {
      a4:	defffe04 	addi	sp,sp,-8
      a8:	dfc00115 	stw	ra,4(sp)
      ac:	df000015 	stw	fp,0(sp)
      b0:	d839883a 	mov	fp,sp
	// clear display - 00000001
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
      b4:	0007883a 	mov	r3,zero
      b8:	00942c04 	movi	r2,20656
      bc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x1);
      c0:	00c00044 	movi	r3,1
      c4:	00942804 	movi	r2,20640
      c8:	10c00035 	stwio	r3,0(r2)
	enable();
      cc:	000005c0 	call	5c <enable>
	usleep(3000);
      d0:	0102ee04 	movi	r4,3000
      d4:	0000d8c0 	call	d8c <usleep>
}
      d8:	0001883a 	nop
      dc:	e037883a 	mov	sp,fp
      e0:	dfc00117 	ldw	ra,4(sp)
      e4:	df000017 	ldw	fp,0(sp)
      e8:	dec00204 	addi	sp,sp,8
      ec:	f800283a 	ret

000000f0 <write_text>:

void write_text(char* text, int size) {
      f0:	defffb04 	addi	sp,sp,-20
      f4:	dfc00415 	stw	ra,16(sp)
      f8:	df000315 	stw	fp,12(sp)
      fc:	df000304 	addi	fp,sp,12
     100:	e13ffe15 	stw	r4,-8(fp)
     104:	e17fff15 	stw	r5,-4(fp)
	clear_display();
     108:	00000a40 	call	a4 <clear_display>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
     10c:	00c00044 	movi	r3,1
     110:	00942c04 	movi	r2,20656
     114:	10c00035 	stwio	r3,0(r2)

	int i;
	for (i = 0; i < size; i++) {
     118:	e03ffd15 	stw	zero,-12(fp)
     11c:	00000f06 	br	15c <write_text+0x6c>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
     120:	e0bffd17 	ldw	r2,-12(fp)
     124:	e0fffe17 	ldw	r3,-8(fp)
     128:	1885883a 	add	r2,r3,r2
     12c:	10800003 	ldbu	r2,0(r2)
     130:	10c03fcc 	andi	r3,r2,255
     134:	18c0201c 	xori	r3,r3,128
     138:	18ffe004 	addi	r3,r3,-128
     13c:	00942804 	movi	r2,20640
     140:	10c00035 	stwio	r3,0(r2)
		enable();
     144:	000005c0 	call	5c <enable>
		usleep(100);
     148:	01001904 	movi	r4,100
     14c:	0000d8c0 	call	d8c <usleep>
void write_text(char* text, int size) {
	clear_display();
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);

	int i;
	for (i = 0; i < size; i++) {
     150:	e0bffd17 	ldw	r2,-12(fp)
     154:	10800044 	addi	r2,r2,1
     158:	e0bffd15 	stw	r2,-12(fp)
     15c:	e0fffd17 	ldw	r3,-12(fp)
     160:	e0bfff17 	ldw	r2,-4(fp)
     164:	18bfee16 	blt	r3,r2,120 <_gp+0xffff60b8>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
		enable();
		usleep(100);
	}
}
     168:	0001883a 	nop
     16c:	e037883a 	mov	sp,fp
     170:	dfc00117 	ldw	ra,4(sp)
     174:	df000017 	ldw	fp,0(sp)
     178:	dec00204 	addi	sp,sp,8
     17c:	f800283a 	ret

00000180 <init_lcd>:

void init_lcd() {
     180:	defffe04 	addi	sp,sp,-8
     184:	dfc00115 	stw	ra,4(sp)
     188:	df000015 	stw	fp,0(sp)
     18c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
     190:	0007883a 	mov	r3,zero
     194:	00942c04 	movi	r2,20656
     198:	10c00035 	stwio	r3,0(r2)

	// function set 3x - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     19c:	00c00c04 	movi	r3,48
     1a0:	00942804 	movi	r2,20640
     1a4:	10c00035 	stwio	r3,0(r2)
	enable();
     1a8:	000005c0 	call	5c <enable>
	usleep(4100);
     1ac:	01040104 	movi	r4,4100
     1b0:	0000d8c0 	call	d8c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     1b4:	00c00c04 	movi	r3,48
     1b8:	00942804 	movi	r2,20640
     1bc:	10c00035 	stwio	r3,0(r2)
	enable();
     1c0:	000005c0 	call	5c <enable>
	usleep(100);
     1c4:	01001904 	movi	r4,100
     1c8:	0000d8c0 	call	d8c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     1cc:	00c00c04 	movi	r3,48
     1d0:	00942804 	movi	r2,20640
     1d4:	10c00035 	stwio	r3,0(r2)
	enable();
     1d8:	000005c0 	call	5c <enable>
	usleep(100);
     1dc:	01001904 	movi	r4,100
     1e0:	0000d8c0 	call	d8c <usleep>

	// real function set - 00111000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x38);
     1e4:	00c00e04 	movi	r3,56
     1e8:	00942804 	movi	r2,20640
     1ec:	10c00035 	stwio	r3,0(r2)
	enable();
     1f0:	000005c0 	call	5c <enable>
	usleep(100);
     1f4:	01001904 	movi	r4,100
     1f8:	0000d8c0 	call	d8c <usleep>

	// display on/off - 00001000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x8);
     1fc:	00c00204 	movi	r3,8
     200:	00942804 	movi	r2,20640
     204:	10c00035 	stwio	r3,0(r2)
	enable();
     208:	000005c0 	call	5c <enable>
	usleep(100);
     20c:	01001904 	movi	r4,100
     210:	0000d8c0 	call	d8c <usleep>

	clear_display();
     214:	00000a40 	call	a4 <clear_display>

	// entry mode - 00000110
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x6);
     218:	00c00184 	movi	r3,6
     21c:	00942804 	movi	r2,20640
     220:	10c00035 	stwio	r3,0(r2)
	enable();
     224:	000005c0 	call	5c <enable>
	usleep(100);
     228:	01001904 	movi	r4,100
     22c:	0000d8c0 	call	d8c <usleep>

	// display on/off - 00001110 - cursor appears and doesn't blinks
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0xE);
     230:	00c00384 	movi	r3,14
     234:	00942804 	movi	r2,20640
     238:	10c00035 	stwio	r3,0(r2)
	enable();
     23c:	000005c0 	call	5c <enable>
	usleep(100);
     240:	01001904 	movi	r4,100
     244:	0000d8c0 	call	d8c <usleep>

	// send some data to test - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
     248:	00c00044 	movi	r3,1
     24c:	00942c04 	movi	r2,20656
     250:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, '0');
     254:	00c00c04 	movi	r3,48
     258:	00942804 	movi	r2,20640
     25c:	10c00035 	stwio	r3,0(r2)
	enable();
     260:	000005c0 	call	5c <enable>
	usleep(100);
     264:	01001904 	movi	r4,100
     268:	0000d8c0 	call	d8c <usleep>
}
     26c:	0001883a 	nop
     270:	e037883a 	mov	sp,fp
     274:	dfc00117 	ldw	ra,4(sp)
     278:	df000017 	ldw	fp,0(sp)
     27c:	dec00204 	addi	sp,sp,8
     280:	f800283a 	ret

00000284 <sendATCommand>:

void sendATCommand(char* command, int size) {
     284:	defffc04 	addi	sp,sp,-16
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13ffe15 	stw	r4,-8(fp)
     294:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
     298:	e03ffd15 	stw	zero,-12(fp)
	while (i < size) {
     29c:	00001006 	br	2e0 <sendATCommand+0x5c>
		if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
     2a0:	00940204 	movi	r2,20488
     2a4:	10800037 	ldwio	r2,0(r2)
     2a8:	1080100c 	andi	r2,r2,64
     2ac:	10000c26 	beq	r2,zero,2e0 <sendATCommand+0x5c>
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, command[i]);
     2b0:	e0bffd17 	ldw	r2,-12(fp)
     2b4:	e0fffe17 	ldw	r3,-8(fp)
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10c03fcc 	andi	r3,r2,255
     2c4:	18c0201c 	xori	r3,r3,128
     2c8:	18ffe004 	addi	r3,r3,-128
     2cc:	00940104 	movi	r2,20484
     2d0:	10c00035 	stwio	r3,0(r2)
			i++;
     2d4:	e0bffd17 	ldw	r2,-12(fp)
     2d8:	10800044 	addi	r2,r2,1
     2dc:	e0bffd15 	stw	r2,-12(fp)
	usleep(100);
}

void sendATCommand(char* command, int size) {
	int i = 0;
	while (i < size) {
     2e0:	e0fffd17 	ldw	r3,-12(fp)
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	18bfed16 	blt	r3,r2,2a0 <_gp+0xffff6238>
		if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, command[i]);
			i++;
		}
	}
}
     2ec:	0001883a 	nop
     2f0:	e037883a 	mov	sp,fp
     2f4:	df000017 	ldw	fp,0(sp)
     2f8:	dec00104 	addi	sp,sp,4
     2fc:	f800283a 	ret

00000300 <uart_ok>:

unsigned int uart_ok() {
     300:	defffe04 	addi	sp,sp,-8
     304:	df000115 	stw	fp,4(sp)
     308:	df000104 	addi	fp,sp,4
	char a;

	while (1) {
		a = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
     30c:	00940004 	movi	r2,20480
     310:	10800037 	ldwio	r2,0(r2)
     314:	e0bfff05 	stb	r2,-4(fp)
		if (a == 'K') {
     318:	e0bfff07 	ldb	r2,-4(fp)
     31c:	108012d8 	cmpnei	r2,r2,75
     320:	103ffa1e 	bne	r2,zero,30c <_gp+0xffff62a4>
			return 1;
     324:	00800044 	movi	r2,1
		}
	}
}
     328:	e037883a 	mov	sp,fp
     32c:	df000017 	ldw	fp,0(sp)
     330:	dec00104 	addi	sp,sp,4
     334:	f800283a 	ret

00000338 <init_esp>:
void init_esp() {
     338:	defffa04 	addi	sp,sp,-24
     33c:	dfc00515 	stw	ra,20(sp)
     340:	df000415 	stw	fp,16(sp)
     344:	df000404 	addi	fp,sp,16
	write_text("WAITING...", 10);
     348:	01400284 	movi	r5,10
     34c:	01000034 	movhi	r4,0
     350:	2106fd04 	addi	r4,r4,7156
     354:	00000f00 	call	f0 <write_text>

	while (1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) == 7) {
     358:	00942004 	movi	r2,20608
     35c:	10800037 	ldwio	r2,0(r2)
     360:	108001d8 	cmpnei	r2,r2,7
     364:	10000426 	beq	r2,zero,378 <init_esp+0x40>
			break;
		}
		usleep(100000);
     368:	010000b4 	movhi	r4,2
     36c:	2121a804 	addi	r4,r4,-31072
     370:	0000d8c0 	call	d8c <usleep>
	}
     374:	003ff806 	br	358 <_gp+0xffff62f0>
void init_esp() {
	write_text("WAITING...", 10);

	while (1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) == 7) {
			break;
     378:	0001883a 	nop
		}
		usleep(100000);
	}

	alt_putstr("AT+CWMODE_CUR=3\r\n");
     37c:	01000034 	movhi	r4,0
     380:	21070004 	addi	r4,r4,7168
     384:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     388:	00003000 	call	300 <uart_ok>

	write_text("WIFI...", 7);
     38c:	014001c4 	movi	r5,7
     390:	01000034 	movhi	r4,0
     394:	21070504 	addi	r4,r4,7188
     398:	00000f00 	call	f0 <write_text>
	alt_putstr("AT+CWJAP_CUR=\"WLessLEDS\",\"HelloWorldMP31\"\r\n");
     39c:	01000034 	movhi	r4,0
     3a0:	21070704 	addi	r4,r4,7196
     3a4:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     3a8:	00003000 	call	300 <uart_ok>

	write_text("BROKER...", 9);
     3ac:	01400244 	movi	r5,9
     3b0:	01000034 	movhi	r4,0
     3b4:	21071204 	addi	r4,r4,7240
     3b8:	00000f00 	call	f0 <write_text>
	alt_putstr("AT+CIPSTART=\"TCP\",\"192.168.1.103\",1883,7200\r\n");
     3bc:	01000034 	movhi	r4,0
     3c0:	21071504 	addi	r4,r4,7252
     3c4:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     3c8:	00003000 	call	300 <uart_ok>

	alt_putstr("AT+CIPSEND=15\r\n");
     3cc:	01000034 	movhi	r4,0
     3d0:	21072104 	addi	r4,r4,7300
     3d4:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     3d8:	00003000 	call	300 <uart_ok>
	char connect[] = { 0x10, 0x0d, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0x02, 0x00, 0x3c, 0x00, 0x01, 0x78 };
     3dc:	00800034 	movhi	r2,0
     3e0:	10872a44 	addi	r2,r2,7337
     3e4:	e0fffc04 	addi	r3,fp,-16
     3e8:	1009883a 	mov	r4,r2
     3ec:	008003c4 	movi	r2,15
     3f0:	100d883a 	mov	r6,r2
     3f4:	200b883a 	mov	r5,r4
     3f8:	1809883a 	mov	r4,r3
     3fc:	00009300 	call	930 <memcpy>
	sendATCommand(connect, 15);
     400:	014003c4 	movi	r5,15
     404:	e13ffc04 	addi	r4,fp,-16
     408:	00002840 	call	284 <sendATCommand>
	alt_putstr("\r\n");
     40c:	01000034 	movhi	r4,0
     410:	21072504 	addi	r4,r4,7316
     414:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     418:	00003000 	call	300 <uart_ok>

	write_text("CONNECTED BROKER", 16);
     41c:	01400404 	movi	r5,16
     420:	01000034 	movhi	r4,0
     424:	21072604 	addi	r4,r4,7320
     428:	00000f00 	call	f0 <write_text>
	usleep(2000000);
     42c:	010007f4 	movhi	r4,31
     430:	21212004 	addi	r4,r4,-31616
     434:	0000d8c0 	call	d8c <usleep>
}
     438:	0001883a 	nop
     43c:	e037883a 	mov	sp,fp
     440:	dfc00117 	ldw	ra,4(sp)
     444:	df000017 	ldw	fp,0(sp)
     448:	dec00204 	addi	sp,sp,8
     44c:	f800283a 	ret

00000450 <publish>:

void publish(int index) {
     450:	deffe704 	addi	sp,sp,-100
     454:	dfc01815 	stw	ra,96(sp)
     458:	df001715 	stw	fp,92(sp)
     45c:	df001704 	addi	fp,sp,92
     460:	e13fff15 	stw	r4,-4(fp)
	char publish_A[] = {
     464:	00800034 	movhi	r2,0
     468:	10873204 	addi	r2,r2,7368
     46c:	e0ffe904 	addi	r3,fp,-92
     470:	1009883a 	mov	r4,r2
     474:	00800444 	movi	r2,17
     478:	100d883a 	mov	r6,r2
     47c:	200b883a 	mov	r5,r4
     480:	1809883a 	mov	r4,r3
     484:	00009300 	call	930 <memcpy>
			  0x30, 0x0f, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74,
			  0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
			  0x41
			};
	char publish_B[] = {
     488:	00800034 	movhi	r2,0
     48c:	10873644 	addi	r2,r2,7385
     490:	e0ffed44 	addi	r3,fp,-75
     494:	1009883a 	mov	r4,r2
     498:	00800444 	movi	r2,17
     49c:	100d883a 	mov	r6,r2
     4a0:	200b883a 	mov	r5,r4
     4a4:	1809883a 	mov	r4,r3
     4a8:	00009300 	call	930 <memcpy>
			  0x30, 0x0f, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74,
			  0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
			  0x42
			};
	char publish_C[] = {
     4ac:	00800034 	movhi	r2,0
     4b0:	10873a84 	addi	r2,r2,7402
     4b4:	e0fff184 	addi	r3,fp,-58
     4b8:	1009883a 	mov	r4,r2
     4bc:	00800444 	movi	r2,17
     4c0:	100d883a 	mov	r6,r2
     4c4:	200b883a 	mov	r5,r4
     4c8:	1809883a 	mov	r4,r3
     4cc:	00009300 	call	930 <memcpy>
			  0x30, 0x0f, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74,
			  0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
			  0x43
			};
	char publish_D[] = {
     4d0:	00800034 	movhi	r2,0
     4d4:	10873ec4 	addi	r2,r2,7419
     4d8:	e0fff5c4 	addi	r3,fp,-41
     4dc:	1009883a 	mov	r4,r2
     4e0:	00800444 	movi	r2,17
     4e4:	100d883a 	mov	r6,r2
     4e8:	200b883a 	mov	r5,r4
     4ec:	1809883a 	mov	r4,r3
     4f0:	00009300 	call	930 <memcpy>
			  0x30, 0x0f, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74,
			  0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
			  0x44
			};
	char publish_E[] = {
     4f4:	00800034 	movhi	r2,0
     4f8:	10874304 	addi	r2,r2,7436
     4fc:	e0fffa04 	addi	r3,fp,-24
     500:	1009883a 	mov	r4,r2
     504:	00800444 	movi	r2,17
     508:	100d883a 	mov	r6,r2
     50c:	200b883a 	mov	r5,r4
     510:	1809883a 	mov	r4,r3
     514:	00009300 	call	930 <memcpy>
			  0x30, 0x0f, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74,
			  0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
			  0x45
			};

	alt_putstr("AT+CIPSEND=17\r\n");
     518:	01000034 	movhi	r4,0
     51c:	21072e04 	addi	r4,r4,7352
     520:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     524:	00003000 	call	300 <uart_ok>

	switch(index) {
     528:	e0bfff17 	ldw	r2,-4(fp)
     52c:	10800168 	cmpgeui	r2,r2,5
     530:	1000241e 	bne	r2,zero,5c4 <publish+0x174>
     534:	e0bfff17 	ldw	r2,-4(fp)
     538:	100690ba 	slli	r3,r2,2
     53c:	00800034 	movhi	r2,0
     540:	10815404 	addi	r2,r2,1360
     544:	1885883a 	add	r2,r3,r2
     548:	10800017 	ldw	r2,0(r2)
     54c:	1000683a 	jmp	r2
     550:	00000564 	muli	zero,zero,21
     554:	00000574 	movhi	zero,21
     558:	00000588 	cmpgei	zero,zero,22
     55c:	0000059c 	xori	zero,zero,22
     560:	000005b0 	cmpltui	zero,zero,22
		case 0:
			sendATCommand(publish_A, 17);
     564:	01400444 	movi	r5,17
     568:	e13fe904 	addi	r4,fp,-92
     56c:	00002840 	call	284 <sendATCommand>
			break;
     570:	00001406 	br	5c4 <publish+0x174>
		case 1:
			sendATCommand(publish_B, 17);
     574:	e0bfed44 	addi	r2,fp,-75
     578:	01400444 	movi	r5,17
     57c:	1009883a 	mov	r4,r2
     580:	00002840 	call	284 <sendATCommand>
			break;
     584:	00000f06 	br	5c4 <publish+0x174>
		case 2:
			sendATCommand(publish_C, 17);
     588:	e0bff184 	addi	r2,fp,-58
     58c:	01400444 	movi	r5,17
     590:	1009883a 	mov	r4,r2
     594:	00002840 	call	284 <sendATCommand>
			break;
     598:	00000a06 	br	5c4 <publish+0x174>
		case 3:
			sendATCommand(publish_D, 17);
     59c:	e0bff5c4 	addi	r2,fp,-41
     5a0:	01400444 	movi	r5,17
     5a4:	1009883a 	mov	r4,r2
     5a8:	00002840 	call	284 <sendATCommand>
			break;
     5ac:	00000506 	br	5c4 <publish+0x174>
		case 4:
			sendATCommand(publish_E, 17);
     5b0:	e0bffa04 	addi	r2,fp,-24
     5b4:	01400444 	movi	r5,17
     5b8:	1009883a 	mov	r4,r2
     5bc:	00002840 	call	284 <sendATCommand>
			break;
     5c0:	0001883a 	nop
	}

	alt_putstr("\r\n");
     5c4:	01000034 	movhi	r4,0
     5c8:	21072504 	addi	r4,r4,7316
     5cc:	0000d800 	call	d80 <alt_putstr>
	uart_ok();
     5d0:	00003000 	call	300 <uart_ok>
}
     5d4:	0001883a 	nop
     5d8:	e037883a 	mov	sp,fp
     5dc:	dfc00117 	ldw	ra,4(sp)
     5e0:	df000017 	ldw	fp,0(sp)
     5e4:	dec00204 	addi	sp,sp,8
     5e8:	f800283a 	ret

000005ec <main>:

int main() {
     5ec:	deffdb04 	addi	sp,sp,-148
     5f0:	dfc02415 	stw	ra,144(sp)
     5f4:	df002315 	stw	fp,140(sp)
     5f8:	dc002215 	stw	r16,136(sp)
     5fc:	df002304 	addi	fp,sp,140
	int outputs[] = {15, 23, 27, 29, 30};
     600:	008003c4 	movi	r2,15
     604:	e0bfe215 	stw	r2,-120(fp)
     608:	008005c4 	movi	r2,23
     60c:	e0bfe315 	stw	r2,-116(fp)
     610:	008006c4 	movi	r2,27
     614:	e0bfe415 	stw	r2,-112(fp)
     618:	00800744 	movi	r2,29
     61c:	e0bfe515 	stw	r2,-108(fp)
     620:	00800784 	movi	r2,30
     624:	e0bfe615 	stw	r2,-104(fp)

	char lcd_options[][9] = {
     628:	00800034 	movhi	r2,0
     62c:	10874744 	addi	r2,r2,7453
     630:	e0ffe704 	addi	r3,fp,-100
     634:	1009883a 	mov	r4,r2
     638:	00800b44 	movi	r2,45
     63c:	100d883a 	mov	r6,r2
     640:	200b883a 	mov	r5,r4
     644:	1809883a 	mov	r4,r3
     648:	00009300 	call	930 <memcpy>
			"3 - LED C",
			"4 - LED D",
			"5 - LED E"
	};

	char lcd_option_selected[][8] = {
     64c:	00800034 	movhi	r2,0
     650:	10875284 	addi	r2,r2,7498
     654:	e0fff244 	addi	r3,fp,-55
     658:	1009883a 	mov	r4,r2
     65c:	00800a04 	movi	r2,40
     660:	100d883a 	mov	r6,r2
     664:	200b883a 	mov	r5,r4
     668:	1809883a 	mov	r4,r3
     66c:	00009300 	call	930 <memcpy>
			"LED C ON",
			"LED D ON",
			"LED E ON",
	};

	char selected_sensor[] = { 0x01, 0x02, 0x03, 0x04, 0x05 };
     670:	00800044 	movi	r2,1
     674:	e0bffc45 	stb	r2,-15(fp)
     678:	00800084 	movi	r2,2
     67c:	e0bffc85 	stb	r2,-14(fp)
     680:	008000c4 	movi	r2,3
     684:	e0bffcc5 	stb	r2,-13(fp)
     688:	00800104 	movi	r2,4
     68c:	e0bffd05 	stb	r2,-12(fp)
     690:	00800144 	movi	r2,5
     694:	e0bffd45 	stb	r2,-11(fp)

	int i = 0;
     698:	e03fdd15 	stw	zero,-140(fp)
	int previous_i;
	int selected = 0;
     69c:	e03fde15 	stw	zero,-136(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     6a0:	00c007c4 	movi	r3,31
     6a4:	00942404 	movi	r2,20624
     6a8:	10c00035 	stwio	r3,0(r2)
	init_lcd();
     6ac:	00001800 	call	180 <init_lcd>
	//init_esp();

	write_text(lcd_options[0], 9);
     6b0:	e0bfe704 	addi	r2,fp,-100
     6b4:	01400244 	movi	r5,9
     6b8:	1009883a 	mov	r4,r2
     6bc:	00000f00 	call	f0 <write_text>

	while(1) {
		int in = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
     6c0:	00942004 	movi	r2,20608
     6c4:	10800037 	ldwio	r2,0(r2)
     6c8:	e0bfdf15 	stw	r2,-132(fp)

		previous_i = i;
     6cc:	e0bfdd17 	ldw	r2,-140(fp)
     6d0:	e0bfe015 	stw	r2,-128(fp)

		if (in == 13 && !selected) {
     6d4:	e0bfdf17 	ldw	r2,-132(fp)
     6d8:	10800358 	cmpnei	r2,r2,13
     6dc:	1000061e 	bne	r2,zero,6f8 <main+0x10c>
     6e0:	e0bfde17 	ldw	r2,-136(fp)
     6e4:	1000041e 	bne	r2,zero,6f8 <main+0x10c>
			i++;
     6e8:	e0bfdd17 	ldw	r2,-140(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfdd15 	stw	r2,-140(fp)
     6f4:	00005206 	br	840 <main+0x254>
		} else if (in == 14 && !selected) {
     6f8:	e0bfdf17 	ldw	r2,-132(fp)
     6fc:	10800398 	cmpnei	r2,r2,14
     700:	1000061e 	bne	r2,zero,71c <main+0x130>
     704:	e0bfde17 	ldw	r2,-136(fp)
     708:	1000041e 	bne	r2,zero,71c <main+0x130>
			i--;
     70c:	e0bfdd17 	ldw	r2,-140(fp)
     710:	10bfffc4 	addi	r2,r2,-1
     714:	e0bfdd15 	stw	r2,-140(fp)
     718:	00004906 	br	840 <main+0x254>
		} else if (in == 7 && !selected) {
     71c:	e0bfdf17 	ldw	r2,-132(fp)
     720:	108001d8 	cmpnei	r2,r2,7
     724:	1000281e 	bne	r2,zero,7c8 <main+0x1dc>
     728:	e0bfde17 	ldw	r2,-136(fp)
     72c:	1000261e 	bne	r2,zero,7c8 <main+0x1dc>
			// seleciona
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, outputs[i]);
     730:	e0bfdd17 	ldw	r2,-140(fp)
     734:	1085883a 	add	r2,r2,r2
     738:	1085883a 	add	r2,r2,r2
     73c:	e0ffdd04 	addi	r3,fp,-140
     740:	1885883a 	add	r2,r3,r2
     744:	10800504 	addi	r2,r2,20
     748:	10c00017 	ldw	r3,0(r2)
     74c:	00942404 	movi	r2,20624
     750:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_option_selected[i], 8);
     754:	e0fff244 	addi	r3,fp,-55
     758:	e0bfdd17 	ldw	r2,-140(fp)
     75c:	100490fa 	slli	r2,r2,3
     760:	1885883a 	add	r2,r3,r2
     764:	01400204 	movi	r5,8
     768:	1009883a 	mov	r4,r2
     76c:	00000f00 	call	f0 <write_text>
			selected = 1;
     770:	00800044 	movi	r2,1
     774:	e0bfde15 	stw	r2,-136(fp)

			int result = ALT_CI_ARBITER_0(selected_sensor[i], 0x0);
     778:	e0fffc44 	addi	r3,fp,-15
     77c:	e0bfdd17 	ldw	r2,-140(fp)
     780:	1885883a 	add	r2,r3,r2
     784:	10800003 	ldbu	r2,0(r2)
     788:	10803fcc 	andi	r2,r2,255
     78c:	1080201c 	xori	r2,r2,128
     790:	10bfe004 	addi	r2,r2,-128
     794:	0007883a 	mov	r3,zero
     798:	10c5c032 	custom	0,r2,r2,r3
     79c:	e0bfe115 	stw	r2,-124(fp)

			char buffer[3];
			itoa(result, buffer, 10);
     7a0:	e0bffd84 	addi	r2,fp,-10
     7a4:	01800284 	movi	r6,10
     7a8:	100b883a 	mov	r5,r2
     7ac:	e13fe117 	ldw	r4,-124(fp)
     7b0:	000092c0 	call	92c <itoa>
			write_text(buffer, 2);
     7b4:	e0bffd84 	addi	r2,fp,-10
     7b8:	01400084 	movi	r5,2
     7bc:	1009883a 	mov	r4,r2
     7c0:	00000f00 	call	f0 <write_text>

		if (in == 13 && !selected) {
			i++;
		} else if (in == 14 && !selected) {
			i--;
		} else if (in == 7 && !selected) {
     7c4:	00001e06 	br	840 <main+0x254>
			char buffer[3];
			itoa(result, buffer, 10);
			write_text(buffer, 2);

			//publish(i);
		} else if (in == 11) {
     7c8:	e0bfdf17 	ldw	r2,-132(fp)
     7cc:	108002d8 	cmpnei	r2,r2,11
     7d0:	10000d1e 	bne	r2,zero,808 <main+0x21c>
			selected = 0;
     7d4:	e03fde15 	stw	zero,-136(fp)
			//apaga todos os leds
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     7d8:	00c007c4 	movi	r3,31
     7dc:	00942404 	movi	r2,20624
     7e0:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_options[i], 9);
     7e4:	e43fe704 	addi	r16,fp,-100
     7e8:	01400244 	movi	r5,9
     7ec:	e13fdd17 	ldw	r4,-140(fp)
     7f0:	000089c0 	call	89c <__mulsi3>
     7f4:	8085883a 	add	r2,r16,r2
     7f8:	01400244 	movi	r5,9
     7fc:	1009883a 	mov	r4,r2
     800:	00000f00 	call	f0 <write_text>
     804:	00000e06 	br	840 <main+0x254>
		} else if (in == 12 ) {
     808:	e0bfdf17 	ldw	r2,-132(fp)
     80c:	10800318 	cmpnei	r2,r2,12
     810:	10000b1e 	bne	r2,zero,840 <main+0x254>
			//init_esp();
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     814:	00c007c4 	movi	r3,31
     818:	00942404 	movi	r2,20624
     81c:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_options[i], 9);
     820:	e43fe704 	addi	r16,fp,-100
     824:	01400244 	movi	r5,9
     828:	e13fdd17 	ldw	r4,-140(fp)
     82c:	000089c0 	call	89c <__mulsi3>
     830:	8085883a 	add	r2,r16,r2
     834:	01400244 	movi	r5,9
     838:	1009883a 	mov	r4,r2
     83c:	00000f00 	call	f0 <write_text>
		}

		if (i > 4) {
     840:	e0bfdd17 	ldw	r2,-140(fp)
     844:	10800150 	cmplti	r2,r2,5
     848:	1000011e 	bne	r2,zero,850 <main+0x264>
			i = 0;
     84c:	e03fdd15 	stw	zero,-140(fp)
		}

		if (i < 0) {
     850:	e0bfdd17 	ldw	r2,-140(fp)
     854:	1000020e 	bge	r2,zero,860 <main+0x274>
			i = 4;
     858:	00800104 	movi	r2,4
     85c:	e0bfdd15 	stw	r2,-140(fp)
		}

		if (previous_i != i) {
     860:	e0ffe017 	ldw	r3,-128(fp)
     864:	e0bfdd17 	ldw	r2,-140(fp)
     868:	18800826 	beq	r3,r2,88c <main+0x2a0>
			write_text(lcd_options[i], 9);
     86c:	e43fe704 	addi	r16,fp,-100
     870:	01400244 	movi	r5,9
     874:	e13fdd17 	ldw	r4,-140(fp)
     878:	000089c0 	call	89c <__mulsi3>
     87c:	8085883a 	add	r2,r16,r2
     880:	01400244 	movi	r5,9
     884:	1009883a 	mov	r4,r2
     888:	00000f00 	call	f0 <write_text>
		}

		usleep(100000);
     88c:	010000b4 	movhi	r4,2
     890:	2121a804 	addi	r4,r4,-31072
     894:	0000d8c0 	call	d8c <usleep>
	}
     898:	003f8906 	br	6c0 <_gp+0xffff6658>

0000089c <__mulsi3>:
     89c:	0005883a 	mov	r2,zero
     8a0:	20000726 	beq	r4,zero,8c0 <__mulsi3+0x24>
     8a4:	20c0004c 	andi	r3,r4,1
     8a8:	2008d07a 	srli	r4,r4,1
     8ac:	18000126 	beq	r3,zero,8b4 <__mulsi3+0x18>
     8b0:	1145883a 	add	r2,r2,r5
     8b4:	294b883a 	add	r5,r5,r5
     8b8:	203ffa1e 	bne	r4,zero,8a4 <_gp+0xffff683c>
     8bc:	f800283a 	ret
     8c0:	f800283a 	ret

000008c4 <__itoa>:
     8c4:	30bfff84 	addi	r2,r6,-2
     8c8:	00c00884 	movi	r3,34
     8cc:	1880032e 	bgeu	r3,r2,8dc <__itoa+0x18>
     8d0:	28000005 	stb	zero,0(r5)
     8d4:	0005883a 	mov	r2,zero
     8d8:	f800283a 	ret
     8dc:	defffe04 	addi	sp,sp,-8
     8e0:	dfc00115 	stw	ra,4(sp)
     8e4:	dc000015 	stw	r16,0(sp)
     8e8:	00800284 	movi	r2,10
     8ec:	3080061e 	bne	r6,r2,908 <__itoa+0x44>
     8f0:	2000050e 	bge	r4,zero,908 <__itoa+0x44>
     8f4:	00800b44 	movi	r2,45
     8f8:	28800005 	stb	r2,0(r5)
     8fc:	0109c83a 	sub	r4,zero,r4
     900:	00800044 	movi	r2,1
     904:	00000106 	br	90c <__itoa+0x48>
     908:	0005883a 	mov	r2,zero
     90c:	2821883a 	mov	r16,r5
     910:	288b883a 	add	r5,r5,r2
     914:	00009580 	call	958 <__utoa>
     918:	8005883a 	mov	r2,r16
     91c:	dfc00117 	ldw	ra,4(sp)
     920:	dc000017 	ldw	r16,0(sp)
     924:	dec00204 	addi	sp,sp,8
     928:	f800283a 	ret

0000092c <itoa>:
     92c:	00008c41 	jmpi	8c4 <__itoa>

00000930 <memcpy>:
     930:	2005883a 	mov	r2,r4
     934:	2007883a 	mov	r3,r4
     938:	218d883a 	add	r6,r4,r6
     93c:	19800526 	beq	r3,r6,954 <memcpy+0x24>
     940:	29000003 	ldbu	r4,0(r5)
     944:	18c00044 	addi	r3,r3,1
     948:	29400044 	addi	r5,r5,1
     94c:	193fffc5 	stb	r4,-1(r3)
     950:	003ffa06 	br	93c <_gp+0xffff68d4>
     954:	f800283a 	ret

00000958 <__utoa>:
     958:	deffef04 	addi	sp,sp,-68
     95c:	dc000a15 	stw	r16,40(sp)
     960:	2821883a 	mov	r16,r5
     964:	01400034 	movhi	r5,0
     968:	dd400f15 	stw	r21,60(sp)
     96c:	dcc00d15 	stw	r19,52(sp)
     970:	302b883a 	mov	r21,r6
     974:	2027883a 	mov	r19,r4
     978:	01800944 	movi	r6,37
     97c:	29475d04 	addi	r5,r5,7540
     980:	d809883a 	mov	r4,sp
     984:	dfc01015 	stw	ra,64(sp)
     988:	dd000e15 	stw	r20,56(sp)
     98c:	dc800c15 	stw	r18,48(sp)
     990:	dc400b15 	stw	r17,44(sp)
     994:	00009300 	call	930 <memcpy>
     998:	a8bfff84 	addi	r2,r21,-2
     99c:	00c00884 	movi	r3,34
     9a0:	1880032e 	bgeu	r3,r2,9b0 <__utoa+0x58>
     9a4:	80000005 	stb	zero,0(r16)
     9a8:	0005883a 	mov	r2,zero
     9ac:	00002006 	br	a30 <__utoa+0xd8>
     9b0:	8029883a 	mov	r20,r16
     9b4:	0023883a 	mov	r17,zero
     9b8:	9809883a 	mov	r4,r19
     9bc:	a80b883a 	mov	r5,r21
     9c0:	0000bb40 	call	bb4 <__umodsi3>
     9c4:	d885883a 	add	r2,sp,r2
     9c8:	10800003 	ldbu	r2,0(r2)
     9cc:	9809883a 	mov	r4,r19
     9d0:	a80b883a 	mov	r5,r21
     9d4:	a0800005 	stb	r2,0(r20)
     9d8:	0000b500 	call	b50 <__udivsi3>
     9dc:	8c800044 	addi	r18,r17,1
     9e0:	1027883a 	mov	r19,r2
     9e4:	a5000044 	addi	r20,r20,1
     9e8:	10000226 	beq	r2,zero,9f4 <__utoa+0x9c>
     9ec:	9023883a 	mov	r17,r18
     9f0:	003ff106 	br	9b8 <_gp+0xffff6950>
     9f4:	84a5883a 	add	r18,r16,r18
     9f8:	90000005 	stb	zero,0(r18)
     9fc:	8445883a 	add	r2,r16,r17
     a00:	8007883a 	mov	r3,r16
     a04:	1409c83a 	sub	r4,r2,r16
     a08:	1c0bc83a 	sub	r5,r3,r16
     a0c:	2900070e 	bge	r5,r4,a2c <__utoa+0xd4>
     a10:	11400003 	ldbu	r5,0(r2)
     a14:	19000003 	ldbu	r4,0(r3)
     a18:	10bfffc4 	addi	r2,r2,-1
     a1c:	19400005 	stb	r5,0(r3)
     a20:	11000045 	stb	r4,1(r2)
     a24:	18c00044 	addi	r3,r3,1
     a28:	003ff606 	br	a04 <_gp+0xffff699c>
     a2c:	8005883a 	mov	r2,r16
     a30:	dfc01017 	ldw	ra,64(sp)
     a34:	dd400f17 	ldw	r21,60(sp)
     a38:	dd000e17 	ldw	r20,56(sp)
     a3c:	dcc00d17 	ldw	r19,52(sp)
     a40:	dc800c17 	ldw	r18,48(sp)
     a44:	dc400b17 	ldw	r17,44(sp)
     a48:	dc000a17 	ldw	r16,40(sp)
     a4c:	dec01104 	addi	sp,sp,68
     a50:	f800283a 	ret

00000a54 <utoa>:
     a54:	00009581 	jmpi	958 <__utoa>

00000a58 <__divsi3>:
     a58:	20001b16 	blt	r4,zero,ac8 <__divsi3+0x70>
     a5c:	000f883a 	mov	r7,zero
     a60:	28001616 	blt	r5,zero,abc <__divsi3+0x64>
     a64:	200d883a 	mov	r6,r4
     a68:	29001a2e 	bgeu	r5,r4,ad4 <__divsi3+0x7c>
     a6c:	00800804 	movi	r2,32
     a70:	00c00044 	movi	r3,1
     a74:	00000106 	br	a7c <__divsi3+0x24>
     a78:	10000d26 	beq	r2,zero,ab0 <__divsi3+0x58>
     a7c:	294b883a 	add	r5,r5,r5
     a80:	10bfffc4 	addi	r2,r2,-1
     a84:	18c7883a 	add	r3,r3,r3
     a88:	293ffb36 	bltu	r5,r4,a78 <_gp+0xffff6a10>
     a8c:	0005883a 	mov	r2,zero
     a90:	18000726 	beq	r3,zero,ab0 <__divsi3+0x58>
     a94:	0005883a 	mov	r2,zero
     a98:	31400236 	bltu	r6,r5,aa4 <__divsi3+0x4c>
     a9c:	314dc83a 	sub	r6,r6,r5
     aa0:	10c4b03a 	or	r2,r2,r3
     aa4:	1806d07a 	srli	r3,r3,1
     aa8:	280ad07a 	srli	r5,r5,1
     aac:	183ffa1e 	bne	r3,zero,a98 <_gp+0xffff6a30>
     ab0:	38000126 	beq	r7,zero,ab8 <__divsi3+0x60>
     ab4:	0085c83a 	sub	r2,zero,r2
     ab8:	f800283a 	ret
     abc:	014bc83a 	sub	r5,zero,r5
     ac0:	39c0005c 	xori	r7,r7,1
     ac4:	003fe706 	br	a64 <_gp+0xffff69fc>
     ac8:	0109c83a 	sub	r4,zero,r4
     acc:	01c00044 	movi	r7,1
     ad0:	003fe306 	br	a60 <_gp+0xffff69f8>
     ad4:	00c00044 	movi	r3,1
     ad8:	003fee06 	br	a94 <_gp+0xffff6a2c>

00000adc <__modsi3>:
     adc:	20001716 	blt	r4,zero,b3c <__modsi3+0x60>
     ae0:	000f883a 	mov	r7,zero
     ae4:	2005883a 	mov	r2,r4
     ae8:	28001216 	blt	r5,zero,b34 <__modsi3+0x58>
     aec:	2900162e 	bgeu	r5,r4,b48 <__modsi3+0x6c>
     af0:	01800804 	movi	r6,32
     af4:	00c00044 	movi	r3,1
     af8:	00000106 	br	b00 <__modsi3+0x24>
     afc:	30000a26 	beq	r6,zero,b28 <__modsi3+0x4c>
     b00:	294b883a 	add	r5,r5,r5
     b04:	31bfffc4 	addi	r6,r6,-1
     b08:	18c7883a 	add	r3,r3,r3
     b0c:	293ffb36 	bltu	r5,r4,afc <_gp+0xffff6a94>
     b10:	18000526 	beq	r3,zero,b28 <__modsi3+0x4c>
     b14:	1806d07a 	srli	r3,r3,1
     b18:	11400136 	bltu	r2,r5,b20 <__modsi3+0x44>
     b1c:	1145c83a 	sub	r2,r2,r5
     b20:	280ad07a 	srli	r5,r5,1
     b24:	183ffb1e 	bne	r3,zero,b14 <_gp+0xffff6aac>
     b28:	38000126 	beq	r7,zero,b30 <__modsi3+0x54>
     b2c:	0085c83a 	sub	r2,zero,r2
     b30:	f800283a 	ret
     b34:	014bc83a 	sub	r5,zero,r5
     b38:	003fec06 	br	aec <_gp+0xffff6a84>
     b3c:	0109c83a 	sub	r4,zero,r4
     b40:	01c00044 	movi	r7,1
     b44:	003fe706 	br	ae4 <_gp+0xffff6a7c>
     b48:	00c00044 	movi	r3,1
     b4c:	003ff106 	br	b14 <_gp+0xffff6aac>

00000b50 <__udivsi3>:
     b50:	200d883a 	mov	r6,r4
     b54:	2900152e 	bgeu	r5,r4,bac <__udivsi3+0x5c>
     b58:	28001416 	blt	r5,zero,bac <__udivsi3+0x5c>
     b5c:	00800804 	movi	r2,32
     b60:	00c00044 	movi	r3,1
     b64:	00000206 	br	b70 <__udivsi3+0x20>
     b68:	10000e26 	beq	r2,zero,ba4 <__udivsi3+0x54>
     b6c:	28000516 	blt	r5,zero,b84 <__udivsi3+0x34>
     b70:	294b883a 	add	r5,r5,r5
     b74:	10bfffc4 	addi	r2,r2,-1
     b78:	18c7883a 	add	r3,r3,r3
     b7c:	293ffa36 	bltu	r5,r4,b68 <_gp+0xffff6b00>
     b80:	18000826 	beq	r3,zero,ba4 <__udivsi3+0x54>
     b84:	0005883a 	mov	r2,zero
     b88:	31400236 	bltu	r6,r5,b94 <__udivsi3+0x44>
     b8c:	314dc83a 	sub	r6,r6,r5
     b90:	10c4b03a 	or	r2,r2,r3
     b94:	1806d07a 	srli	r3,r3,1
     b98:	280ad07a 	srli	r5,r5,1
     b9c:	183ffa1e 	bne	r3,zero,b88 <_gp+0xffff6b20>
     ba0:	f800283a 	ret
     ba4:	0005883a 	mov	r2,zero
     ba8:	f800283a 	ret
     bac:	00c00044 	movi	r3,1
     bb0:	003ff406 	br	b84 <_gp+0xffff6b1c>

00000bb4 <__umodsi3>:
     bb4:	2005883a 	mov	r2,r4
     bb8:	2900122e 	bgeu	r5,r4,c04 <__umodsi3+0x50>
     bbc:	28001116 	blt	r5,zero,c04 <__umodsi3+0x50>
     bc0:	01800804 	movi	r6,32
     bc4:	00c00044 	movi	r3,1
     bc8:	00000206 	br	bd4 <__umodsi3+0x20>
     bcc:	30000c26 	beq	r6,zero,c00 <__umodsi3+0x4c>
     bd0:	28000516 	blt	r5,zero,be8 <__umodsi3+0x34>
     bd4:	294b883a 	add	r5,r5,r5
     bd8:	31bfffc4 	addi	r6,r6,-1
     bdc:	18c7883a 	add	r3,r3,r3
     be0:	293ffa36 	bltu	r5,r4,bcc <_gp+0xffff6b64>
     be4:	18000626 	beq	r3,zero,c00 <__umodsi3+0x4c>
     be8:	1806d07a 	srli	r3,r3,1
     bec:	11400136 	bltu	r2,r5,bf4 <__umodsi3+0x40>
     bf0:	1145c83a 	sub	r2,r2,r5
     bf4:	280ad07a 	srli	r5,r5,1
     bf8:	183ffb1e 	bne	r3,zero,be8 <_gp+0xffff6b80>
     bfc:	f800283a 	ret
     c00:	f800283a 	ret
     c04:	00c00044 	movi	r3,1
     c08:	003ff706 	br	be8 <_gp+0xffff6b80>

00000c0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     c0c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     c10:	01800034 	movhi	r6,0
     c14:	01c00034 	movhi	r7,0
     c18:	dfc00015 	stw	ra,0(sp)
     c1c:	31876d04 	addi	r6,r6,7604
     c20:	39c82204 	addi	r7,r7,8328
     c24:	31c01026 	beq	r6,r7,c68 <alt_load+0x5c>
  {
    while( to != end )
     c28:	00800034 	movhi	r2,0
     c2c:	10882204 	addi	r2,r2,8328
     c30:	30800d26 	beq	r6,r2,c68 <alt_load+0x5c>
     c34:	30c00104 	addi	r3,r6,4
     c38:	10c7c83a 	sub	r3,r2,r3
     c3c:	1806d0ba 	srli	r3,r3,2
     c40:	0005883a 	mov	r2,zero
     c44:	18c00044 	addi	r3,r3,1
     c48:	18c7883a 	add	r3,r3,r3
     c4c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     c50:	11c9883a 	add	r4,r2,r7
     c54:	21400017 	ldw	r5,0(r4)
     c58:	1189883a 	add	r4,r2,r6
     c5c:	10800104 	addi	r2,r2,4
     c60:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     c64:	10fffa1e 	bne	r2,r3,c50 <_gp+0xffff6be8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     c68:	01800034 	movhi	r6,0
     c6c:	01c00034 	movhi	r7,0
     c70:	31800804 	addi	r6,r6,32
     c74:	39c00804 	addi	r7,r7,32
     c78:	31c01026 	beq	r6,r7,cbc <alt_load+0xb0>
  {
    while( to != end )
     c7c:	00800034 	movhi	r2,0
     c80:	10800804 	addi	r2,r2,32
     c84:	30800d26 	beq	r6,r2,cbc <alt_load+0xb0>
     c88:	30c00104 	addi	r3,r6,4
     c8c:	10c7c83a 	sub	r3,r2,r3
     c90:	1806d0ba 	srli	r3,r3,2
     c94:	0005883a 	mov	r2,zero
     c98:	18c00044 	addi	r3,r3,1
     c9c:	18c7883a 	add	r3,r3,r3
     ca0:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     ca4:	11c9883a 	add	r4,r2,r7
     ca8:	21400017 	ldw	r5,0(r4)
     cac:	1189883a 	add	r4,r2,r6
     cb0:	10800104 	addi	r2,r2,4
     cb4:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     cb8:	18bffa1e 	bne	r3,r2,ca4 <_gp+0xffff6c3c>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     cbc:	01800034 	movhi	r6,0
     cc0:	01c00034 	movhi	r7,0
     cc4:	3186fd04 	addi	r6,r6,7156
     cc8:	39c6fd04 	addi	r7,r7,7156
     ccc:	31c01026 	beq	r6,r7,d10 <alt_load+0x104>
  {
    while( to != end )
     cd0:	00800034 	movhi	r2,0
     cd4:	10876d04 	addi	r2,r2,7604
     cd8:	30800d26 	beq	r6,r2,d10 <alt_load+0x104>
     cdc:	30c00104 	addi	r3,r6,4
     ce0:	10c7c83a 	sub	r3,r2,r3
     ce4:	1806d0ba 	srli	r3,r3,2
     ce8:	0005883a 	mov	r2,zero
     cec:	18c00044 	addi	r3,r3,1
     cf0:	18c7883a 	add	r3,r3,r3
     cf4:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     cf8:	11c9883a 	add	r4,r2,r7
     cfc:	21400017 	ldw	r5,0(r4)
     d00:	1189883a 	add	r4,r2,r6
     d04:	10800104 	addi	r2,r2,4
     d08:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     d0c:	10fffa1e 	bne	r2,r3,cf8 <_gp+0xffff6c90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     d10:	00010240 	call	1024 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
     d14:	dfc00017 	ldw	ra,0(sp)
     d18:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
     d1c:	00011641 	jmpi	1164 <alt_icache_flush_all>

00000d20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     d20:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     d24:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     d28:	dfc00115 	stw	ra,4(sp)
     d2c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     d30:	0000d900 	call	d90 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     d34:	0000db00 	call	db0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     d38:	01800034 	movhi	r6,0
     d3c:	31876704 	addi	r6,r6,7580
     d40:	300b883a 	mov	r5,r6
     d44:	3009883a 	mov	r4,r6
     d48:	00011f40 	call	11f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     d4c:	000109c0 	call	109c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     d50:	01000034 	movhi	r4,0
     d54:	21044004 	addi	r4,r4,4352
     d58:	00016000 	call	1600 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     d5c:	d1a0bd17 	ldw	r6,-32012(gp)
     d60:	d160be17 	ldw	r5,-32008(gp)
     d64:	d120bf17 	ldw	r4,-32004(gp)
     d68:	00005ec0 	call	5ec <main>
  close(STDOUT_FILENO);
     d6c:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     d70:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     d74:	0000f640 	call	f64 <close>
  exit (result);
     d78:	8009883a 	mov	r4,r16
     d7c:	00016140 	call	1614 <exit>

00000d80 <alt_putstr>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     d80:	d0a00717 	ldw	r2,-32740(gp)
     d84:	11400217 	ldw	r5,8(r2)
     d88:	00016341 	jmpi	1634 <fputs>

00000d8c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
     d8c:	0000edc1 	jmpi	edc <alt_busy_sleep>

00000d90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     d90:	deffff04 	addi	sp,sp,-4
     d94:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
     d98:	000144c0 	call	144c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     d9c:	00800044 	movi	r2,1
     da0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     da4:	dfc00017 	ldw	ra,0(sp)
     da8:	dec00104 	addi	sp,sp,4
     dac:	f800283a 	ret

00000db0 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     db0:	01000034 	movhi	r4,0
     db4:	21076d04 	addi	r4,r4,7604
     db8:	d1600104 	addi	r5,gp,-32764
     dbc:	00010301 	jmpi	1030 <alt_dev_llist_insert>

00000dc0 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
     dc0:	20800017 	ldw	r2,0(r4)
     dc4:	21c00217 	ldw	r7,8(r4)
     dc8:	11000a04 	addi	r4,r2,40
     dcc:	0000de01 	jmpi	de0 <altera_avalon_uart_read>

00000dd0 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
     dd0:	20800017 	ldw	r2,0(r4)
     dd4:	21c00217 	ldw	r7,8(r4)
     dd8:	11000a04 	addi	r4,r2,40
     ddc:	0000e5c1 	jmpi	e5c <altera_avalon_uart_write>

00000de0 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
     de0:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
     de4:	20800017 	ldw	r2,0(r4)
     de8:	10800204 	addi	r2,r2,8
     dec:	10c00037 	ldwio	r3,0(r2)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
     df0:	10000035 	stwio	zero,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
     df4:	1880200c 	andi	r2,r3,128
     df8:	10000c1e 	bne	r2,zero,e2c <altera_avalon_uart_read+0x4c>
      {
        return 1;
      }
    }
  }
  while (block);
     dfc:	383ff926 	beq	r7,zero,de4 <_gp+0xffff6d7c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     e00:	d0a00517 	ldw	r2,-32748(gp)
     e04:	10001026 	beq	r2,zero,e48 <altera_avalon_uart_read+0x68>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
     e08:	deffff04 	addi	sp,sp,-4
     e0c:	dfc00015 	stw	ra,0(sp)
     e10:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
     e14:	00c002c4 	movi	r3,11
     e18:	10c00015 	stw	r3,0(r2)
 
  return 0;
     e1c:	0005883a 	mov	r2,zero
}
     e20:	dfc00017 	ldw	ra,0(sp)
     e24:	dec00104 	addi	sp,sp,4
     e28:	f800283a 	ret

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
     e2c:	20800017 	ldw	r2,0(r4)
     e30:	10800037 	ldwio	r2,0(r2)
     e34:	28800005 	stb	r2,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
     e38:	18c000cc 	andi	r3,r3,3
     e3c:	183fef1e 	bne	r3,zero,dfc <_gp+0xffff6d94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
     e40:	00800044 	movi	r2,1
     e44:	f800283a 	ret
     e48:	d0a0c004 	addi	r2,gp,-32000
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
     e4c:	00c002c4 	movi	r3,11
     e50:	10c00015 	stw	r3,0(r2)
 
  return 0;
     e54:	0005883a 	mov	r2,zero
}
     e58:	f800283a 	ret

00000e5c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
     e5c:	defffd04 	addi	sp,sp,-12
     e60:	dc000115 	stw	r16,4(sp)
     e64:	dfc00215 	stw	ra,8(sp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
     e68:	39d0000c 	andi	r7,r7,16384
  count = len;
     e6c:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
     e70:	20c00017 	ldw	r3,0(r4)
     e74:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
     e78:	1080100c 	andi	r2,r2,64
     e7c:	1000071e 	bne	r2,zero,e9c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
      count--;
    }
  }
  while (block && count);
     e80:	38000b1e 	bne	r7,zero,eb0 <altera_avalon_uart_write+0x54>
     e84:	803ffa1e 	bne	r16,zero,e70 <_gp+0xffff6e08>
  {
    ALT_ERRNO = EWOULDBLOCK;
  }

  return (len - count);
}
     e88:	3405c83a 	sub	r2,r6,r16
     e8c:	dfc00217 	ldw	ra,8(sp)
     e90:	dc000117 	ldw	r16,4(sp)
     e94:	dec00304 	addi	sp,sp,12
     e98:	f800283a 	ret
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
     e9c:	28800007 	ldb	r2,0(r5)
     ea0:	29400044 	addi	r5,r5,1
     ea4:	18800135 	stwio	r2,4(r3)
      count--;
     ea8:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
     eac:	383ff526 	beq	r7,zero,e84 <_gp+0xffff6e1c>

  if (count)
     eb0:	803ff526 	beq	r16,zero,e88 <_gp+0xffff6e20>
     eb4:	d0a00517 	ldw	r2,-32748(gp)
     eb8:	10000626 	beq	r2,zero,ed4 <altera_avalon_uart_write+0x78>
     ebc:	d9800015 	stw	r6,0(sp)
     ec0:	103ee83a 	callr	r2
     ec4:	d9800017 	ldw	r6,0(sp)
  {
    ALT_ERRNO = EWOULDBLOCK;
     ec8:	00c002c4 	movi	r3,11
     ecc:	10c00015 	stw	r3,0(r2)
     ed0:	003fed06 	br	e88 <_gp+0xffff6e20>
     ed4:	d0a0c004 	addi	r2,gp,-32000
     ed8:	003ffb06 	br	ec8 <_gp+0xffff6e60>

00000edc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     edc:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     ee0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     ee4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     ee8:	dc000015 	stw	r16,0(sp)
     eec:	dfc00115 	stw	ra,4(sp)
     ef0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     ef4:	0000b500 	call	b50 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     ef8:	10001426 	beq	r2,zero,f4c <alt_busy_sleep+0x70>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     efc:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     f00:	013999b4 	movhi	r4,58982
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     f04:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     f08:	211999c4 	addi	r4,r4,26215
     f0c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     f10:	297fffc4 	addi	r5,r5,-1
     f14:	283ffe1e 	bne	r5,zero,f10 <_gp+0xffff6ea8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     f18:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     f1c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     f20:	18bffb16 	blt	r3,r2,f10 <_gp+0xffff6ea8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     f24:	01400144 	movi	r5,5
     f28:	8009883a 	mov	r4,r16
     f2c:	000089c0 	call	89c <__mulsi3>
     f30:	10bfffc4 	addi	r2,r2,-1
     f34:	103ffe1e 	bne	r2,zero,f30 <_gp+0xffff6ec8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
     f38:	0005883a 	mov	r2,zero
     f3c:	dfc00117 	ldw	ra,4(sp)
     f40:	dc000017 	ldw	r16,0(sp)
     f44:	dec00204 	addi	sp,sp,8
     f48:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     f4c:	01400144 	movi	r5,5
     f50:	8009883a 	mov	r4,r16
     f54:	000089c0 	call	89c <__mulsi3>
     f58:	10bfffc4 	addi	r2,r2,-1
     f5c:	00bffe16 	blt	zero,r2,f58 <_gp+0xffff6ef0>
     f60:	003ff506 	br	f38 <_gp+0xffff6ed0>

00000f64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     f64:	defffd04 	addi	sp,sp,-12
     f68:	dfc00215 	stw	ra,8(sp)
     f6c:	dc400115 	stw	r17,4(sp)
     f70:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     f74:	20002016 	blt	r4,zero,ff8 <close+0x94>
     f78:	01400304 	movi	r5,12
     f7c:	2021883a 	mov	r16,r4
     f80:	000089c0 	call	89c <__mulsi3>
     f84:	01000034 	movhi	r4,0
     f88:	21077804 	addi	r4,r4,7648
     f8c:	2089883a 	add	r4,r4,r2

  if (fd)
     f90:	20001926 	beq	r4,zero,ff8 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     f94:	20800017 	ldw	r2,0(r4)
     f98:	10800417 	ldw	r2,16(r2)
     f9c:	10000b26 	beq	r2,zero,fcc <close+0x68>
     fa0:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     fa4:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     fa8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     fac:	00013f00 	call	13f0 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     fb0:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
     fb4:	88000916 	blt	r17,zero,fdc <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     fb8:	dfc00217 	ldw	ra,8(sp)
     fbc:	dc400117 	ldw	r17,4(sp)
     fc0:	dc000017 	ldw	r16,0(sp)
     fc4:	dec00304 	addi	sp,sp,12
     fc8:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     fcc:	8009883a 	mov	r4,r16
     fd0:	00013f00 	call	13f0 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     fd4:	0005883a 	mov	r2,zero
     fd8:	003ff706 	br	fb8 <_gp+0xffff6f50>
     fdc:	d0a00517 	ldw	r2,-32748(gp)
     fe0:	10000c26 	beq	r2,zero,1014 <close+0xb0>
     fe4:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
     fe8:	0463c83a 	sub	r17,zero,r17
     fec:	14400015 	stw	r17,0(r2)
      return -1;
     ff0:	00bfffc4 	movi	r2,-1
     ff4:	003ff006 	br	fb8 <_gp+0xffff6f50>
     ff8:	d0a00517 	ldw	r2,-32748(gp)
     ffc:	10000726 	beq	r2,zero,101c <close+0xb8>
    1000:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1004:	00c01444 	movi	r3,81
    1008:	10c00015 	stw	r3,0(r2)
    return -1;
    100c:	00bfffc4 	movi	r2,-1
    1010:	003fe906 	br	fb8 <_gp+0xffff6f50>
    1014:	d0a0c004 	addi	r2,gp,-32000
    1018:	003ff306 	br	fe8 <_gp+0xffff6f80>
    101c:	d0a0c004 	addi	r2,gp,-32000
    1020:	003ff806 	br	1004 <_gp+0xffff6f9c>

00001024 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1024:	f800283a 	ret

00001028 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1028:	3005883a 	mov	r2,r6
    102c:	f800283a 	ret

00001030 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1030:	20000a26 	beq	r4,zero,105c <alt_dev_llist_insert+0x2c>
    1034:	20800217 	ldw	r2,8(r4)
    1038:	10000826 	beq	r2,zero,105c <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    103c:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1040:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    1044:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    1048:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    104c:	28c00017 	ldw	r3,0(r5)
    1050:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    1054:	29000015 	stw	r4,0(r5)
    1058:	f800283a 	ret
    105c:	d0a00517 	ldw	r2,-32748(gp)
    1060:	10000926 	beq	r2,zero,1088 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1064:	deffff04 	addi	sp,sp,-4
    1068:	dfc00015 	stw	ra,0(sp)
    106c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    1070:	00c00584 	movi	r3,22
    1074:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1078:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    107c:	dfc00017 	ldw	ra,0(sp)
    1080:	dec00104 	addi	sp,sp,4
    1084:	f800283a 	ret
    1088:	d0a0c004 	addi	r2,gp,-32000
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    108c:	00c00584 	movi	r3,22
    1090:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1094:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    1098:	f800283a 	ret

0000109c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    109c:	defffc04 	addi	sp,sp,-16
    10a0:	dc800215 	stw	r18,8(sp)
    10a4:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    10a8:	04800034 	movhi	r18,0
    10ac:	04000034 	movhi	r16,0
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    10b0:	dfc00315 	stw	ra,12(sp)
    10b4:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    10b8:	8406fc04 	addi	r16,r16,7152
    10bc:	9486fd04 	addi	r18,r18,7156
    10c0:	84800936 	bltu	r16,r18,10e8 <_do_ctors+0x4c>
    10c4:	84a5c83a 	sub	r18,r16,r18
    10c8:	9024d0ba 	srli	r18,r18,2
    10cc:	0023883a 	mov	r17,zero
    10d0:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    10d4:	80800017 	ldw	r2,0(r16)
    10d8:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    10dc:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    10e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    10e4:	8cbffb1e 	bne	r17,r18,10d4 <_gp+0xffff706c>
        (*ctor) (); 
}
    10e8:	dfc00317 	ldw	ra,12(sp)
    10ec:	dc800217 	ldw	r18,8(sp)
    10f0:	dc400117 	ldw	r17,4(sp)
    10f4:	dc000017 	ldw	r16,0(sp)
    10f8:	dec00404 	addi	sp,sp,16
    10fc:	f800283a 	ret

00001100 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1100:	defffc04 	addi	sp,sp,-16
    1104:	dc800215 	stw	r18,8(sp)
    1108:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    110c:	04800034 	movhi	r18,0
    1110:	04000034 	movhi	r16,0
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1114:	dfc00315 	stw	ra,12(sp)
    1118:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    111c:	8406fc04 	addi	r16,r16,7152
    1120:	9486fd04 	addi	r18,r18,7156
    1124:	84800936 	bltu	r16,r18,114c <_do_dtors+0x4c>
    1128:	84a5c83a 	sub	r18,r16,r18
    112c:	9024d0ba 	srli	r18,r18,2
    1130:	0023883a 	mov	r17,zero
    1134:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    1138:	80800017 	ldw	r2,0(r16)
    113c:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1140:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    1144:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1148:	8cbffb1e 	bne	r17,r18,1138 <_gp+0xffff70d0>
        (*dtor) (); 
}
    114c:	dfc00317 	ldw	ra,12(sp)
    1150:	dc800217 	ldw	r18,8(sp)
    1154:	dc400117 	ldw	r17,4(sp)
    1158:	dc000017 	ldw	r16,0(sp)
    115c:	dec00404 	addi	sp,sp,16
    1160:	f800283a 	ret

00001164 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1164:	f800283a 	ret

00001168 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    1168:	defffd04 	addi	sp,sp,-12
    116c:	2805883a 	mov	r2,r5
    1170:	dc400115 	stw	r17,4(sp)
    1174:	300b883a 	mov	r5,r6
    1178:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
    117c:	01807fc4 	movi	r6,511
    1180:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    1184:	dfc00215 	stw	ra,8(sp)
    1188:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
    118c:	00012680 	call	1268 <open>

  if (old >= 0)
    1190:	10001316 	blt	r2,zero,11e0 <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
    1194:	1009883a 	mov	r4,r2
    1198:	01400304 	movi	r5,12
    119c:	1021883a 	mov	r16,r2
    11a0:	000089c0 	call	89c <__mulsi3>
    11a4:	00c00034 	movhi	r3,0
    11a8:	18c77804 	addi	r3,r3,7648
    11ac:	1885883a 	add	r2,r3,r2
    11b0:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    11b4:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
    11b8:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    11bc:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    11c0:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    11c4:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    11c8:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
    11cc:	dfc00217 	ldw	ra,8(sp)
    11d0:	dc400117 	ldw	r17,4(sp)
    11d4:	dc000017 	ldw	r16,0(sp)
    11d8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    11dc:	00013f01 	jmpi	13f0 <alt_release_fd>
  }
} 
    11e0:	dfc00217 	ldw	ra,8(sp)
    11e4:	dc400117 	ldw	r17,4(sp)
    11e8:	dc000017 	ldw	r16,0(sp)
    11ec:	dec00304 	addi	sp,sp,12
    11f0:	f800283a 	ret

000011f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    11f4:	defffb04 	addi	sp,sp,-20
    11f8:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    11fc:	04000034 	movhi	r16,0
    1200:	84077b04 	addi	r16,r16,7660
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1204:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1208:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    120c:	dcc00315 	stw	r19,12(sp)
    1210:	dc800215 	stw	r18,8(sp)
    1214:	2827883a 	mov	r19,r5
    1218:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    121c:	200b883a 	mov	r5,r4
    1220:	880d883a 	mov	r6,r17
    1224:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1228:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    122c:	00011680 	call	1168 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1230:	813ffd04 	addi	r4,r16,-12
    1234:	980b883a 	mov	r5,r19
    1238:	000d883a 	mov	r6,zero
    123c:	00011680 	call	1168 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1240:	880d883a 	mov	r6,r17
    1244:	900b883a 	mov	r5,r18
    1248:	81000304 	addi	r4,r16,12
}  
    124c:	dfc00417 	ldw	ra,16(sp)
    1250:	dcc00317 	ldw	r19,12(sp)
    1254:	dc800217 	ldw	r18,8(sp)
    1258:	dc400117 	ldw	r17,4(sp)
    125c:	dc000017 	ldw	r16,0(sp)
    1260:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1264:	00011681 	jmpi	1168 <alt_open_fd.constprop.0>

00001268 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1268:	defffa04 	addi	sp,sp,-24
    126c:	dc000015 	stw	r16,0(sp)
    1270:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1274:	d1600104 	addi	r5,gp,-32764
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1278:	dc800215 	stw	r18,8(sp)
    127c:	dc400115 	stw	r17,4(sp)
    1280:	dfc00515 	stw	ra,20(sp)
    1284:	dd000415 	stw	r20,16(sp)
    1288:	dcc00315 	stw	r19,12(sp)
    128c:	2023883a 	mov	r17,r4
    1290:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1294:	00014540 	call	1454 <alt_find_dev>
    1298:	10004a26 	beq	r2,zero,13c4 <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    129c:	1009883a 	mov	r4,r2
    12a0:	1029883a 	mov	r20,r2
    12a4:	00015780 	call	1578 <alt_get_fd>
    12a8:	1027883a 	mov	r19,r2
    12ac:	1000090e 	bge	r2,zero,12d4 <open+0x6c>
    12b0:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    12b4:	9809883a 	mov	r4,r19
    12b8:	00013f00 	call	13f0 <alt_release_fd>
    12bc:	d0a00517 	ldw	r2,-32748(gp)
    12c0:	10004726 	beq	r2,zero,13e0 <open+0x178>
    12c4:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    12c8:	14000015 	stw	r16,0(r2)
    return -1;
    12cc:	00bfffc4 	movi	r2,-1
    12d0:	00003206 	br	139c <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    12d4:	01400304 	movi	r5,12
    12d8:	9809883a 	mov	r4,r19
    12dc:	000089c0 	call	89c <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    12e0:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    12e4:	00c00034 	movhi	r3,0

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    12e8:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    12ec:	18c77804 	addi	r3,r3,7648

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    12f0:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    12f4:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    12f8:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    12fc:	d2600017 	ldw	r9,-32768(gp)
    1300:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1304:	21400215 	stw	r5,8(r4)
    1308:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    130c:	000b883a 	mov	r5,zero
    1310:	00000306 	br	1320 <open+0xb8>
    1314:	18c00304 	addi	r3,r3,12
    1318:	31800304 	addi	r6,r6,12
    131c:	49401636 	bltu	r9,r5,1378 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1320:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1324:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1328:	3a3ffa1e 	bne	r7,r8,1314 <_gp+0xffff72ac>
    132c:	30800017 	ldw	r2,0(r6)
    1330:	103ff80e 	bge	r2,zero,1314 <_gp+0xffff72ac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1334:	20fff726 	beq	r4,r3,1314 <_gp+0xffff72ac>
    1338:	04000344 	movi	r16,13
    133c:	003fdd06 	br	12b4 <_gp+0xffff724c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    1340:	1009883a 	mov	r4,r2
    1344:	00015780 	call	1578 <alt_get_fd>
    1348:	1027883a 	mov	r19,r2
    134c:	103fd816 	blt	r2,zero,12b0 <_gp+0xffff7248>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    1350:	9809883a 	mov	r4,r19
    1354:	01400304 	movi	r5,12
    1358:	000089c0 	call	89c <__mulsi3>
    135c:	01000034 	movhi	r4,0
    1360:	21077804 	addi	r4,r4,7648
    1364:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1368:	00900034 	movhi	r2,16384
    136c:	10bfffc4 	addi	r2,r2,-1
    1370:	8084703a 	and	r2,r16,r2
    1374:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1378:	a0800317 	ldw	r2,12(r20)
    137c:	10000f26 	beq	r2,zero,13bc <open+0x154>
    1380:	900f883a 	mov	r7,r18
    1384:	800d883a 	mov	r6,r16
    1388:	880b883a 	mov	r5,r17
    138c:	103ee83a 	callr	r2
    1390:	1007883a 	mov	r3,r2
    1394:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1398:	18001316 	blt	r3,zero,13e8 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
    139c:	dfc00517 	ldw	ra,20(sp)
    13a0:	dd000417 	ldw	r20,16(sp)
    13a4:	dcc00317 	ldw	r19,12(sp)
    13a8:	dc800217 	ldw	r18,8(sp)
    13ac:	dc400117 	ldw	r17,4(sp)
    13b0:	dc000017 	ldw	r16,0(sp)
    13b4:	dec00604 	addi	sp,sp,24
    13b8:	f800283a 	ret
    13bc:	9805883a 	mov	r2,r19
    13c0:	003ff606 	br	139c <_gp+0xffff7334>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    13c4:	8809883a 	mov	r4,r17
    13c8:	00014cc0 	call	14cc <alt_find_file>
    13cc:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    13d0:	103fdb1e 	bne	r2,zero,1340 <_gp+0xffff72d8>
    13d4:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    13d8:	04ffffc4 	movi	r19,-1
    13dc:	003fb506 	br	12b4 <_gp+0xffff724c>
    13e0:	d0a0c004 	addi	r2,gp,-32000
    13e4:	003fb806 	br	12c8 <_gp+0xffff7260>
    13e8:	00e1c83a 	sub	r16,zero,r3
    13ec:	003fb106 	br	12b4 <_gp+0xffff724c>

000013f0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    13f0:	00c00084 	movi	r3,2
    13f4:	1900140e 	bge	r3,r4,1448 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    13f8:	defffd04 	addi	sp,sp,-12
    13fc:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    1400:	01400304 	movi	r5,12
    1404:	04400034 	movhi	r17,0
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1408:	dfc00215 	stw	ra,8(sp)
    140c:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    1410:	8c477804 	addi	r17,r17,7648
    1414:	2021883a 	mov	r16,r4
    1418:	000089c0 	call	89c <__mulsi3>
    141c:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
    1420:	01400304 	movi	r5,12
    1424:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    1428:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    142c:	000089c0 	call	89c <__mulsi3>
    1430:	8885883a 	add	r2,r17,r2
    1434:	10000015 	stw	zero,0(r2)
  }
}
    1438:	dfc00217 	ldw	ra,8(sp)
    143c:	dc400117 	ldw	r17,4(sp)
    1440:	dc000017 	ldw	r16,0(sp)
    1444:	dec00304 	addi	sp,sp,12
    1448:	f800283a 	ret

0000144c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    144c:	000170fa 	wrctl	ienable,zero
    1450:	f800283a 	ret

00001454 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1454:	defffb04 	addi	sp,sp,-20
    1458:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    145c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1460:	dc400115 	stw	r17,4(sp)
    1464:	2823883a 	mov	r17,r5
    1468:	dcc00315 	stw	r19,12(sp)
    146c:	dfc00415 	stw	ra,16(sp)
    1470:	dc800215 	stw	r18,8(sp)
    1474:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    1478:	00017740 	call	1774 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    147c:	8c000b26 	beq	r17,r16,14ac <alt_find_dev+0x58>
    1480:	14800044 	addi	r18,r2,1
    1484:	00000206 	br	1490 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1488:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    148c:	8c000726 	beq	r17,r16,14ac <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1490:	81000217 	ldw	r4,8(r16)
    1494:	900d883a 	mov	r6,r18
    1498:	980b883a 	mov	r5,r19
    149c:	00017440 	call	1744 <memcmp>
    14a0:	103ff91e 	bne	r2,zero,1488 <_gp+0xffff7420>
    14a4:	8005883a 	mov	r2,r16
    14a8:	00000106 	br	14b0 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    14ac:	0005883a 	mov	r2,zero
}
    14b0:	dfc00417 	ldw	ra,16(sp)
    14b4:	dcc00317 	ldw	r19,12(sp)
    14b8:	dc800217 	ldw	r18,8(sp)
    14bc:	dc400117 	ldw	r17,4(sp)
    14c0:	dc000017 	ldw	r16,0(sp)
    14c4:	dec00504 	addi	sp,sp,20
    14c8:	f800283a 	ret

000014cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    14cc:	defffa04 	addi	sp,sp,-24
    14d0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    14d4:	d4200317 	ldw	r16,-32756(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    14d8:	dd000415 	stw	r20,16(sp)
    14dc:	dfc00515 	stw	ra,20(sp)
    14e0:	dcc00315 	stw	r19,12(sp)
    14e4:	dc800215 	stw	r18,8(sp)
    14e8:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    14ec:	d5200304 	addi	r20,gp,-32756
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    14f0:	85001626 	beq	r16,r20,154c <alt_find_file+0x80>
    14f4:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    14f8:	04c00bc4 	movi	r19,47
    14fc:	00000806 	br	1520 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1500:	9185883a 	add	r2,r18,r6
    1504:	10800007 	ldb	r2,0(r2)
    1508:	14c00126 	beq	r2,r19,1510 <alt_find_file+0x44>
    150c:	1000021e 	bne	r2,zero,1518 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    1510:	00017440 	call	1744 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1514:	10001626 	beq	r2,zero,1570 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1518:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    151c:	85000b26 	beq	r16,r20,154c <alt_find_file+0x80>
  {
    len = strlen(next->name);
    1520:	84400217 	ldw	r17,8(r16)
    1524:	8809883a 	mov	r4,r17
    1528:	00017740 	call	1774 <strlen>
    152c:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    1530:	8885883a 	add	r2,r17,r2
    1534:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    1538:	900b883a 	mov	r5,r18
    153c:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    1540:	14ffef1e 	bne	r2,r19,1500 <_gp+0xffff7498>
    {
      len -= 1;
    1544:	31bfffc4 	addi	r6,r6,-1
    1548:	003fed06 	br	1500 <_gp+0xffff7498>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    154c:	0005883a 	mov	r2,zero
}
    1550:	dfc00517 	ldw	ra,20(sp)
    1554:	dd000417 	ldw	r20,16(sp)
    1558:	dcc00317 	ldw	r19,12(sp)
    155c:	dc800217 	ldw	r18,8(sp)
    1560:	dc400117 	ldw	r17,4(sp)
    1564:	dc000017 	ldw	r16,0(sp)
    1568:	dec00604 	addi	sp,sp,24
    156c:	f800283a 	ret
    1570:	8005883a 	mov	r2,r16
    1574:	003ff606 	br	1550 <_gp+0xffff74e8>

00001578 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1578:	defffc04 	addi	sp,sp,-16
    157c:	dc400115 	stw	r17,4(sp)
    1580:	04400034 	movhi	r17,0
    1584:	8c477804 	addi	r17,r17,7648
    1588:	dc000015 	stw	r16,0(sp)
    158c:	dfc00315 	stw	ra,12(sp)
    1590:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1594:	0021883a 	mov	r16,zero
    1598:	8805883a 	mov	r2,r17
    159c:	01400804 	movi	r5,32
    15a0:	00000206 	br	15ac <alt_get_fd+0x34>
    15a4:	84000044 	addi	r16,r16,1
    15a8:	81401326 	beq	r16,r5,15f8 <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
    15ac:	10c00017 	ldw	r3,0(r2)
    15b0:	10800304 	addi	r2,r2,12
    15b4:	183ffb1e 	bne	r3,zero,15a4 <_gp+0xffff753c>
    15b8:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
    15bc:	01400304 	movi	r5,12
    15c0:	8009883a 	mov	r4,r16
    15c4:	000089c0 	call	89c <__mulsi3>
    15c8:	8885883a 	add	r2,r17,r2
    15cc:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    15d0:	d0a00017 	ldw	r2,-32768(gp)
    15d4:	1400010e 	bge	r2,r16,15dc <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    15d8:	d4200015 	stw	r16,-32768(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    15dc:	8005883a 	mov	r2,r16
    15e0:	dfc00317 	ldw	ra,12(sp)
    15e4:	dc800217 	ldw	r18,8(sp)
    15e8:	dc400117 	ldw	r17,4(sp)
    15ec:	dc000017 	ldw	r16,0(sp)
    15f0:	dec00404 	addi	sp,sp,16
    15f4:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    15f8:	043ffa04 	movi	r16,-24
    15fc:	003ff706 	br	15dc <_gp+0xffff7574>

00001600 <atexit>:
    1600:	200b883a 	mov	r5,r4
    1604:	000f883a 	mov	r7,zero
    1608:	000d883a 	mov	r6,zero
    160c:	0009883a 	mov	r4,zero
    1610:	00017e81 	jmpi	17e8 <__register_exitproc>

00001614 <exit>:
    1614:	defffe04 	addi	sp,sp,-8
    1618:	000b883a 	mov	r5,zero
    161c:	dc000015 	stw	r16,0(sp)
    1620:	dfc00115 	stw	ra,4(sp)
    1624:	2021883a 	mov	r16,r4
    1628:	00019400 	call	1940 <__call_exitprocs>
    162c:	8009883a 	mov	r4,r16
    1630:	0001ad00 	call	1ad0 <_exit>

00001634 <fputs>:
    1634:	defffd04 	addi	sp,sp,-12
    1638:	dfc00215 	stw	ra,8(sp)
    163c:	dc000115 	stw	r16,4(sp)
    1640:	d9400015 	stw	r5,0(sp)
    1644:	2021883a 	mov	r16,r4
    1648:	00017740 	call	1774 <strlen>
    164c:	100f883a 	mov	r7,r2
    1650:	00800034 	movhi	r2,0
    1654:	d9400017 	ldw	r5,0(sp)
    1658:	10882104 	addi	r2,r2,8324
    165c:	11000017 	ldw	r4,0(r2)
    1660:	00c00034 	movhi	r3,0
    1664:	18c5a304 	addi	r3,r3,5772
    1668:	28c00115 	stw	r3,4(r5)
    166c:	800d883a 	mov	r6,r16
    1670:	000168c0 	call	168c <__sfvwrite_small_dev>
    1674:	10bfffe0 	cmpeqi	r2,r2,-1
    1678:	0085c83a 	sub	r2,zero,r2
    167c:	dfc00217 	ldw	ra,8(sp)
    1680:	dc000117 	ldw	r16,4(sp)
    1684:	dec00304 	addi	sp,sp,12
    1688:	f800283a 	ret

0000168c <__sfvwrite_small_dev>:
    168c:	2880000b 	ldhu	r2,0(r5)
    1690:	1080020c 	andi	r2,r2,8
    1694:	10002126 	beq	r2,zero,171c <__sfvwrite_small_dev+0x90>
    1698:	2880008f 	ldh	r2,2(r5)
    169c:	defffa04 	addi	sp,sp,-24
    16a0:	dc000015 	stw	r16,0(sp)
    16a4:	dfc00515 	stw	ra,20(sp)
    16a8:	dd000415 	stw	r20,16(sp)
    16ac:	dcc00315 	stw	r19,12(sp)
    16b0:	dc800215 	stw	r18,8(sp)
    16b4:	dc400115 	stw	r17,4(sp)
    16b8:	2821883a 	mov	r16,r5
    16bc:	10001216 	blt	r2,zero,1708 <__sfvwrite_small_dev+0x7c>
    16c0:	2027883a 	mov	r19,r4
    16c4:	3025883a 	mov	r18,r6
    16c8:	3823883a 	mov	r17,r7
    16cc:	05010004 	movi	r20,1024
    16d0:	04400b0e 	bge	zero,r17,1700 <__sfvwrite_small_dev+0x74>
    16d4:	880f883a 	mov	r7,r17
    16d8:	a440010e 	bge	r20,r17,16e0 <__sfvwrite_small_dev+0x54>
    16dc:	01c10004 	movi	r7,1024
    16e0:	8140008f 	ldh	r5,2(r16)
    16e4:	900d883a 	mov	r6,r18
    16e8:	9809883a 	mov	r4,r19
    16ec:	00017900 	call	1790 <_write_r>
    16f0:	0080050e 	bge	zero,r2,1708 <__sfvwrite_small_dev+0x7c>
    16f4:	88a3c83a 	sub	r17,r17,r2
    16f8:	90a5883a 	add	r18,r18,r2
    16fc:	003ff406 	br	16d0 <_gp+0xffff7668>
    1700:	0005883a 	mov	r2,zero
    1704:	00000706 	br	1724 <__sfvwrite_small_dev+0x98>
    1708:	8080000b 	ldhu	r2,0(r16)
    170c:	10801014 	ori	r2,r2,64
    1710:	8080000d 	sth	r2,0(r16)
    1714:	00bfffc4 	movi	r2,-1
    1718:	00000206 	br	1724 <__sfvwrite_small_dev+0x98>
    171c:	00bfffc4 	movi	r2,-1
    1720:	f800283a 	ret
    1724:	dfc00517 	ldw	ra,20(sp)
    1728:	dd000417 	ldw	r20,16(sp)
    172c:	dcc00317 	ldw	r19,12(sp)
    1730:	dc800217 	ldw	r18,8(sp)
    1734:	dc400117 	ldw	r17,4(sp)
    1738:	dc000017 	ldw	r16,0(sp)
    173c:	dec00604 	addi	sp,sp,24
    1740:	f800283a 	ret

00001744 <memcmp>:
    1744:	218d883a 	add	r6,r4,r6
    1748:	21800826 	beq	r4,r6,176c <memcmp+0x28>
    174c:	20800003 	ldbu	r2,0(r4)
    1750:	28c00003 	ldbu	r3,0(r5)
    1754:	10c00226 	beq	r2,r3,1760 <memcmp+0x1c>
    1758:	10c5c83a 	sub	r2,r2,r3
    175c:	f800283a 	ret
    1760:	21000044 	addi	r4,r4,1
    1764:	29400044 	addi	r5,r5,1
    1768:	003ff706 	br	1748 <_gp+0xffff76e0>
    176c:	0005883a 	mov	r2,zero
    1770:	f800283a 	ret

00001774 <strlen>:
    1774:	2005883a 	mov	r2,r4
    1778:	10c00007 	ldb	r3,0(r2)
    177c:	18000226 	beq	r3,zero,1788 <strlen+0x14>
    1780:	10800044 	addi	r2,r2,1
    1784:	003ffc06 	br	1778 <_gp+0xffff7710>
    1788:	1105c83a 	sub	r2,r2,r4
    178c:	f800283a 	ret

00001790 <_write_r>:
    1790:	defffd04 	addi	sp,sp,-12
    1794:	dc000015 	stw	r16,0(sp)
    1798:	04000034 	movhi	r16,0
    179c:	dc400115 	stw	r17,4(sp)
    17a0:	8408da04 	addi	r16,r16,9064
    17a4:	2023883a 	mov	r17,r4
    17a8:	2809883a 	mov	r4,r5
    17ac:	300b883a 	mov	r5,r6
    17b0:	380d883a 	mov	r6,r7
    17b4:	dfc00215 	stw	ra,8(sp)
    17b8:	80000015 	stw	zero,0(r16)
    17bc:	0001ae40 	call	1ae4 <write>
    17c0:	00ffffc4 	movi	r3,-1
    17c4:	10c0031e 	bne	r2,r3,17d4 <_write_r+0x44>
    17c8:	80c00017 	ldw	r3,0(r16)
    17cc:	18000126 	beq	r3,zero,17d4 <_write_r+0x44>
    17d0:	88c00015 	stw	r3,0(r17)
    17d4:	dfc00217 	ldw	ra,8(sp)
    17d8:	dc400117 	ldw	r17,4(sp)
    17dc:	dc000017 	ldw	r16,0(sp)
    17e0:	dec00304 	addi	sp,sp,12
    17e4:	f800283a 	ret

000017e8 <__register_exitproc>:
    17e8:	00800034 	movhi	r2,0
    17ec:	10882004 	addi	r2,r2,8320
    17f0:	10c00017 	ldw	r3,0(r2)
    17f4:	defff904 	addi	sp,sp,-28
    17f8:	dc000015 	stw	r16,0(sp)
    17fc:	1c000c17 	ldw	r16,48(r3)
    1800:	dd400515 	stw	r21,20(sp)
    1804:	dd000415 	stw	r20,16(sp)
    1808:	dcc00315 	stw	r19,12(sp)
    180c:	dc800215 	stw	r18,8(sp)
    1810:	dc400115 	stw	r17,4(sp)
    1814:	dfc00615 	stw	ra,24(sp)
    1818:	202b883a 	mov	r21,r4
    181c:	2823883a 	mov	r17,r5
    1820:	3027883a 	mov	r19,r6
    1824:	3825883a 	mov	r18,r7
    1828:	1029883a 	mov	r20,r2
    182c:	8000021e 	bne	r16,zero,1838 <__register_exitproc+0x50>
    1830:	1c000d04 	addi	r16,r3,52
    1834:	1c000c15 	stw	r16,48(r3)
    1838:	80800117 	ldw	r2,4(r16)
    183c:	00c007c4 	movi	r3,31
    1840:	1880110e 	bge	r3,r2,1888 <__register_exitproc+0xa0>
    1844:	00800034 	movhi	r2,0
    1848:	10800004 	addi	r2,r2,0
    184c:	1000021e 	bne	r2,zero,1858 <__register_exitproc+0x70>
    1850:	00bfffc4 	movi	r2,-1
    1854:	00003106 	br	191c <__register_exitproc+0x134>
    1858:	01002304 	movi	r4,140
    185c:	00000000 	call	0 <__alt_mem_memory>
    1860:	1021883a 	mov	r16,r2
    1864:	103ffa26 	beq	r2,zero,1850 <_gp+0xffff77e8>
    1868:	10000115 	stw	zero,4(r2)
    186c:	a0800017 	ldw	r2,0(r20)
    1870:	10c00c17 	ldw	r3,48(r2)
    1874:	80c00015 	stw	r3,0(r16)
    1878:	14000c15 	stw	r16,48(r2)
    187c:	80002215 	stw	zero,136(r16)
    1880:	a8001d26 	beq	r21,zero,18f8 <__register_exitproc+0x110>
    1884:	00000606 	br	18a0 <__register_exitproc+0xb8>
    1888:	a8001b26 	beq	r21,zero,18f8 <__register_exitproc+0x110>
    188c:	80802217 	ldw	r2,136(r16)
    1890:	1000091e 	bne	r2,zero,18b8 <__register_exitproc+0xd0>
    1894:	00800034 	movhi	r2,0
    1898:	10800004 	addi	r2,r2,0
    189c:	103fec26 	beq	r2,zero,1850 <_gp+0xffff77e8>
    18a0:	01004204 	movi	r4,264
    18a4:	00000000 	call	0 <__alt_mem_memory>
    18a8:	103fe926 	beq	r2,zero,1850 <_gp+0xffff77e8>
    18ac:	10004015 	stw	zero,256(r2)
    18b0:	10004115 	stw	zero,260(r2)
    18b4:	80802215 	stw	r2,136(r16)
    18b8:	81400117 	ldw	r5,4(r16)
    18bc:	01000044 	movi	r4,1
    18c0:	2947883a 	add	r3,r5,r5
    18c4:	18c7883a 	add	r3,r3,r3
    18c8:	10c7883a 	add	r3,r2,r3
    18cc:	1cc00015 	stw	r19,0(r3)
    18d0:	2148983a 	sll	r4,r4,r5
    18d4:	11404017 	ldw	r5,256(r2)
    18d8:	290ab03a 	or	r5,r5,r4
    18dc:	11404015 	stw	r5,256(r2)
    18e0:	1c802015 	stw	r18,128(r3)
    18e4:	00c00084 	movi	r3,2
    18e8:	a8c0031e 	bne	r21,r3,18f8 <__register_exitproc+0x110>
    18ec:	10c04117 	ldw	r3,260(r2)
    18f0:	1908b03a 	or	r4,r3,r4
    18f4:	11004115 	stw	r4,260(r2)
    18f8:	80800117 	ldw	r2,4(r16)
    18fc:	10c00044 	addi	r3,r2,1
    1900:	10800084 	addi	r2,r2,2
    1904:	1085883a 	add	r2,r2,r2
    1908:	1085883a 	add	r2,r2,r2
    190c:	80c00115 	stw	r3,4(r16)
    1910:	80a1883a 	add	r16,r16,r2
    1914:	84400015 	stw	r17,0(r16)
    1918:	0005883a 	mov	r2,zero
    191c:	dfc00617 	ldw	ra,24(sp)
    1920:	dd400517 	ldw	r21,20(sp)
    1924:	dd000417 	ldw	r20,16(sp)
    1928:	dcc00317 	ldw	r19,12(sp)
    192c:	dc800217 	ldw	r18,8(sp)
    1930:	dc400117 	ldw	r17,4(sp)
    1934:	dc000017 	ldw	r16,0(sp)
    1938:	dec00704 	addi	sp,sp,28
    193c:	f800283a 	ret

00001940 <__call_exitprocs>:
    1940:	defff504 	addi	sp,sp,-44
    1944:	dd000515 	stw	r20,20(sp)
    1948:	05000034 	movhi	r20,0
    194c:	dc800315 	stw	r18,12(sp)
    1950:	dfc00a15 	stw	ra,40(sp)
    1954:	df000915 	stw	fp,36(sp)
    1958:	ddc00815 	stw	r23,32(sp)
    195c:	dd800715 	stw	r22,28(sp)
    1960:	dd400615 	stw	r21,24(sp)
    1964:	dcc00415 	stw	r19,16(sp)
    1968:	dc400215 	stw	r17,8(sp)
    196c:	dc000115 	stw	r16,4(sp)
    1970:	d9000015 	stw	r4,0(sp)
    1974:	2825883a 	mov	r18,r5
    1978:	a5082004 	addi	r20,r20,8320
    197c:	a4400017 	ldw	r17,0(r20)
    1980:	8cc00c17 	ldw	r19,48(r17)
    1984:	8c400c04 	addi	r17,r17,48
    1988:	98004526 	beq	r19,zero,1aa0 <__call_exitprocs+0x160>
    198c:	9c000117 	ldw	r16,4(r19)
    1990:	00900034 	movhi	r2,16384
    1994:	10bfffc4 	addi	r2,r2,-1
    1998:	9d402217 	ldw	r21,136(r19)
    199c:	85bfffc4 	addi	r22,r16,-1
    19a0:	80a1883a 	add	r16,r16,r2
    19a4:	8421883a 	add	r16,r16,r16
    19a8:	8421883a 	add	r16,r16,r16
    19ac:	ac2f883a 	add	r23,r21,r16
    19b0:	84000204 	addi	r16,r16,8
    19b4:	9c21883a 	add	r16,r19,r16
    19b8:	b0002716 	blt	r22,zero,1a58 <__call_exitprocs+0x118>
    19bc:	90000726 	beq	r18,zero,19dc <__call_exitprocs+0x9c>
    19c0:	a800041e 	bne	r21,zero,19d4 <__call_exitprocs+0x94>
    19c4:	b5bfffc4 	addi	r22,r22,-1
    19c8:	bdffff04 	addi	r23,r23,-4
    19cc:	843fff04 	addi	r16,r16,-4
    19d0:	003ff906 	br	19b8 <_gp+0xffff7950>
    19d4:	b9002017 	ldw	r4,128(r23)
    19d8:	913ffa1e 	bne	r18,r4,19c4 <_gp+0xffff795c>
    19dc:	99000117 	ldw	r4,4(r19)
    19e0:	82000017 	ldw	r8,0(r16)
    19e4:	213fffc4 	addi	r4,r4,-1
    19e8:	b100021e 	bne	r22,r4,19f4 <__call_exitprocs+0xb4>
    19ec:	9d800115 	stw	r22,4(r19)
    19f0:	00000106 	br	19f8 <__call_exitprocs+0xb8>
    19f4:	80000015 	stw	zero,0(r16)
    19f8:	403ff226 	beq	r8,zero,19c4 <_gp+0xffff795c>
    19fc:	9f000117 	ldw	fp,4(r19)
    1a00:	a8000526 	beq	r21,zero,1a18 <__call_exitprocs+0xd8>
    1a04:	00800044 	movi	r2,1
    1a08:	1592983a 	sll	r9,r2,r22
    1a0c:	a9404017 	ldw	r5,256(r21)
    1a10:	494a703a 	and	r5,r9,r5
    1a14:	2800021e 	bne	r5,zero,1a20 <__call_exitprocs+0xe0>
    1a18:	403ee83a 	callr	r8
    1a1c:	00000906 	br	1a44 <__call_exitprocs+0x104>
    1a20:	a9004117 	ldw	r4,260(r21)
    1a24:	4908703a 	and	r4,r9,r4
    1a28:	2000041e 	bne	r4,zero,1a3c <__call_exitprocs+0xfc>
    1a2c:	b9400017 	ldw	r5,0(r23)
    1a30:	d9000017 	ldw	r4,0(sp)
    1a34:	403ee83a 	callr	r8
    1a38:	00000206 	br	1a44 <__call_exitprocs+0x104>
    1a3c:	b9000017 	ldw	r4,0(r23)
    1a40:	403ee83a 	callr	r8
    1a44:	99000117 	ldw	r4,4(r19)
    1a48:	e13fcc1e 	bne	fp,r4,197c <_gp+0xffff7914>
    1a4c:	89000017 	ldw	r4,0(r17)
    1a50:	993fdc26 	beq	r19,r4,19c4 <_gp+0xffff795c>
    1a54:	003fc906 	br	197c <_gp+0xffff7914>
    1a58:	00800034 	movhi	r2,0
    1a5c:	10800004 	addi	r2,r2,0
    1a60:	10000f26 	beq	r2,zero,1aa0 <__call_exitprocs+0x160>
    1a64:	99400117 	ldw	r5,4(r19)
    1a68:	99000017 	ldw	r4,0(r19)
    1a6c:	2800091e 	bne	r5,zero,1a94 <__call_exitprocs+0x154>
    1a70:	20000826 	beq	r4,zero,1a94 <__call_exitprocs+0x154>
    1a74:	89000015 	stw	r4,0(r17)
    1a78:	a8000226 	beq	r21,zero,1a84 <__call_exitprocs+0x144>
    1a7c:	a809883a 	mov	r4,r21
    1a80:	00000000 	call	0 <__alt_mem_memory>
    1a84:	9809883a 	mov	r4,r19
    1a88:	00000000 	call	0 <__alt_mem_memory>
    1a8c:	8cc00017 	ldw	r19,0(r17)
    1a90:	003fbd06 	br	1988 <_gp+0xffff7920>
    1a94:	9823883a 	mov	r17,r19
    1a98:	2027883a 	mov	r19,r4
    1a9c:	003fba06 	br	1988 <_gp+0xffff7920>
    1aa0:	dfc00a17 	ldw	ra,40(sp)
    1aa4:	df000917 	ldw	fp,36(sp)
    1aa8:	ddc00817 	ldw	r23,32(sp)
    1aac:	dd800717 	ldw	r22,28(sp)
    1ab0:	dd400617 	ldw	r21,24(sp)
    1ab4:	dd000517 	ldw	r20,20(sp)
    1ab8:	dcc00417 	ldw	r19,16(sp)
    1abc:	dc800317 	ldw	r18,12(sp)
    1ac0:	dc400217 	ldw	r17,8(sp)
    1ac4:	dc000117 	ldw	r16,4(sp)
    1ac8:	dec00b04 	addi	sp,sp,44
    1acc:	f800283a 	ret

00001ad0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1ad0:	20000226 	beq	r4,zero,1adc <_exit+0xc>
    ALT_SIM_FAIL();
    1ad4:	002af070 	cmpltui	zero,zero,43969
    1ad8:	003fff06 	br	1ad8 <_gp+0xffff7a70>
  } else {
    ALT_SIM_PASS();
    1adc:	002af0b0 	cmpltui	zero,zero,43970
    1ae0:	003ffd06 	br	1ad8 <_gp+0xffff7a70>

00001ae4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1ae4:	defffa04 	addi	sp,sp,-24
    1ae8:	dfc00515 	stw	ra,20(sp)
    1aec:	dd000415 	stw	r20,16(sp)
    1af0:	dcc00315 	stw	r19,12(sp)
    1af4:	dc800215 	stw	r18,8(sp)
    1af8:	dc400115 	stw	r17,4(sp)
    1afc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1b00:	20003116 	blt	r4,zero,1bc8 <write+0xe4>
    1b04:	2827883a 	mov	r19,r5
    1b08:	04000034 	movhi	r16,0
    1b0c:	01400304 	movi	r5,12
    1b10:	2025883a 	mov	r18,r4
    1b14:	3029883a 	mov	r20,r6
    1b18:	84077804 	addi	r16,r16,7648
    1b1c:	000089c0 	call	89c <__mulsi3>
    1b20:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    1b24:	88002826 	beq	r17,zero,1bc8 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1b28:	88800217 	ldw	r2,8(r17)
    1b2c:	108000cc 	andi	r2,r2,3
    1b30:	10001526 	beq	r2,zero,1b88 <write+0xa4>
    1b34:	01400304 	movi	r5,12
    1b38:	9009883a 	mov	r4,r18
    1b3c:	000089c0 	call	89c <__mulsi3>
    1b40:	8085883a 	add	r2,r16,r2
    1b44:	10800017 	ldw	r2,0(r2)
    1b48:	10800617 	ldw	r2,24(r2)
    1b4c:	10000e26 	beq	r2,zero,1b88 <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1b50:	a00d883a 	mov	r6,r20
    1b54:	980b883a 	mov	r5,r19
    1b58:	8809883a 	mov	r4,r17
    1b5c:	103ee83a 	callr	r2
    1b60:	1021883a 	mov	r16,r2
    1b64:	10001116 	blt	r2,zero,1bac <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    1b68:	dfc00517 	ldw	ra,20(sp)
    1b6c:	dd000417 	ldw	r20,16(sp)
    1b70:	dcc00317 	ldw	r19,12(sp)
    1b74:	dc800217 	ldw	r18,8(sp)
    1b78:	dc400117 	ldw	r17,4(sp)
    1b7c:	dc000017 	ldw	r16,0(sp)
    1b80:	dec00604 	addi	sp,sp,24
    1b84:	f800283a 	ret
    1b88:	d0a00517 	ldw	r2,-32748(gp)
    1b8c:	10000526 	beq	r2,zero,1ba4 <write+0xc0>
    1b90:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    1b94:	00c00344 	movi	r3,13
    1b98:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    1b9c:	00bfffc4 	movi	r2,-1
    1ba0:	003ff106 	br	1b68 <_gp+0xffff7b00>
    1ba4:	d0a0c004 	addi	r2,gp,-32000
    1ba8:	003ffa06 	br	1b94 <_gp+0xffff7b2c>
    1bac:	d0a00517 	ldw	r2,-32748(gp)
    1bb0:	10000c26 	beq	r2,zero,1be4 <write+0x100>
    1bb4:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    1bb8:	0421c83a 	sub	r16,zero,r16
    1bbc:	14000015 	stw	r16,0(r2)
        return -1;
    1bc0:	00bfffc4 	movi	r2,-1
    1bc4:	003fe806 	br	1b68 <_gp+0xffff7b00>
    1bc8:	d0a00517 	ldw	r2,-32748(gp)
    1bcc:	10000726 	beq	r2,zero,1bec <write+0x108>
    1bd0:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    1bd4:	00c01444 	movi	r3,81
    1bd8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    1bdc:	00bfffc4 	movi	r2,-1
    1be0:	003fe106 	br	1b68 <_gp+0xffff7b00>
    1be4:	d0a0c004 	addi	r2,gp,-32000
    1be8:	003ff306 	br	1bb8 <_gp+0xffff7b50>
    1bec:	d0a0c004 	addi	r2,gp,-32000
    1bf0:	003ff806 	br	1bd4 <_gp+0xffff7b6c>
