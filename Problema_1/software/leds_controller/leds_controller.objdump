
leds_controller.elf:     file format elf32-littlenios2
leds_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags r-x
    LOAD off    0x00002a8c vaddr 0x00001a8c paddr 0x00001d60 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003034 vaddr 0x00002034 paddr 0x00002034 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00002d60  2**0
                  CONTENTS
  2 .text         00001948  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  00001968  00001968  00002968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00001a8c  00001d60  00002a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00002034  00002034  00003034  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00002044  00002044  00002d60  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000578  00000000  00000000  00002d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000827f  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bc4  00000000  00000000  0000b57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002f57  00000000  00000000  0000e143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000920  00000000  00000000  0001109c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016ce  00000000  00000000  000119bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b59  00000000  00000000  0001308a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d8  00000000  00000000  00014c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000165f5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000165f8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000165fd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000165fe  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000165ff  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00016603  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00016607  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0001660b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  0001660f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005730d  00000000  00000000  00016628  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00001968 l    d  .rodata	00000000 .rodata
00001a8c l    d  .rwdata	00000000 .rwdata
00002034 l    d  .bss	00000000 .bss
00002044 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../leds_controller_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001a8c l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000b3c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000c7c l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001c60 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
00000828 g     F .text	00000060 alt_main
00001d60 g       *ABS*	00000000 __flash_rwdata_start
00000894 g     F .text	0000000c alt_putstr
00000f60 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002040 g     O .bss	00000004 errno
00002038 g     O .bss	00000004 alt_argv
00009d40 g       *ABS*	00000000 _gp
000008a0 g     F .text	00000004 usleep
00001ab8 g     O .rwdata	00000180 alt_fd_list
00000f68 g     F .text	00000078 alt_find_dev
000006ec g     F .text	00000028 memcpy
00000d08 g     F .text	00000074 alt_io_redirect
00001968 g       *ABS*	00000000 __DTOR_END__
00001788 g     F .text	00000064 .hidden __udivsi3
00001d40 g     O .rwdata	00000004 alt_max_fd
00001d58 g     O .rwdata	00000004 _global_impure_ptr
00002044 g       *ABS*	00000000 __bss_end
0000005c g     F .text	00000048 enable
000000f0 g     F .text	00000090 write_text
00001c38 g     O .rwdata	00000028 alt_dev_null
00000b38 g     F .text	00000004 alt_dcache_flush_all
00001d60 g       *ABS*	00000000 __ram_rwdata_end
00001d44 g     O .rwdata	00000008 alt_dev_list
00001858 g     F .text	00000110 write
000012dc g     F .text	00000058 _putc_r
00001a8c g       *ABS*	00000000 __ram_rodata_end
00000338 g     F .text	00000150 init_esp
000017ec g     F .text	00000058 .hidden __umodsi3
00002044 g       *ABS*	00000000 end
00000970 g     F .text	00000080 altera_avalon_uart_write
00001968 g       *ABS*	00000000 __CTOR_LIST__
00004000 g       *ABS*	00000000 __alt_stack_pointer
000008e4 g     F .text	00000010 altera_avalon_uart_write_fd
00001500 g     F .text	00000190 __call_exitprocs
00000020 g     F .text	0000003c _start
000008c4 g     F .text	00000010 alt_sys_init
000013a8 g     F .text	00000158 __register_exitproc
000006c4 g     F .text	00000028 .hidden __mulsi3
00001a8c g       *ABS*	00000000 __ram_rwdata_start
00001968 g       *ABS*	00000000 __ram_rodata_start
00000284 g     F .text	0000007c sendATCommand
0000108c g     F .text	00000088 alt_get_fd
000009f0 g     F .text	00000088 alt_busy_sleep
000000a4 g     F .text	0000004c clear_display
00001258 g     F .text	00000030 memcmp
00002044 g       *ABS*	00000000 __alt_stack_base
00000fe0 g     F .text	000000ac alt_find_file
00000b44 g     F .text	0000006c alt_dev_llist_insert
000011a0 g     F .text	000000b8 __sfvwrite_small_dev
00002034 g       *ABS*	00000000 __bss_start
00000488 g     F .text	0000023c main
00002034 g     O .bss	00000004 alt_envp
00001d54 g     O .rwdata	00000004 alt_errno
00001288 g     F .text	00000054 putc
00001690 g     F .text	00000084 .hidden __divsi3
00001968 g       *ABS*	00000000 __CTOR_END__
00001968 g       *ABS*	00000000 __flash_rodata_start
00001968 g       *ABS*	00000000 __DTOR_LIST__
000008a4 g     F .text	00000020 alt_irq_init
00000f04 g     F .text	0000005c alt_release_fd
00001114 g     F .text	00000014 atexit
00001350 g     F .text	00000058 _write_r
00001d5c g     O .rwdata	00000004 _impure_ptr
0000203c g     O .bss	00000004 alt_argc
00000c14 g     F .text	00000064 _do_dtors
00001d4c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001d60 g       *ABS*	00000000 _edata
000008d4 g     F .text	00000010 altera_avalon_uart_read_fd
00002044 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000300 g     F .text	00000038 uart_ok
00000000 g       *ABS*	00000000 __alt_mem_memory
00001128 g     F .text	00000020 exit
00001714 g     F .text	00000074 .hidden __modsi3
00000180 g     F .text	00000104 init_lcd
00004000 g       *ABS*	00000000 __alt_data_end
00001844 g     F .text	00000014 _exit
00001334 g     F .text	0000001c strlen
00000d7c g     F .text	00000188 open
00000888 g     F .text	0000000c alt_putchar
00000c78 g     F .text	00000004 alt_icache_flush_all
00001148 g     F .text	00000058 fputs
000008f4 g     F .text	0000007c altera_avalon_uart_read
00000bb0 g     F .text	00000064 _do_ctors
00000a78 g     F .text	000000c0 close
00000714 g     F .text	00000114 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a75014 	ori	gp,gp,40256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10880d14 	ori	r2,r2,8244

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18c81114 	ori	r3,r3,8260

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff6304>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	00007140 	call	714 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00008280 	call	828 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff6318>

0000005c <enable>:
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "sys/alt_stdio.h";
#include "altera_avalon_uart_regs.h"

void enable() {
      5c:	defffe04 	addi	sp,sp,-8
      60:	dfc00115 	stw	ra,4(sp)
      64:	df000015 	stw	fp,0(sp)
      68:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
      6c:	00c00044 	movi	r3,1
      70:	00943404 	movi	r2,20688
      74:	10c00035 	stwio	r3,0(r2)
	usleep(200);
      78:	01003204 	movi	r4,200
      7c:	00008a00 	call	8a0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
      80:	0007883a 	mov	r3,zero
      84:	00943404 	movi	r2,20688
      88:	10c00035 	stwio	r3,0(r2)
}
      8c:	0001883a 	nop
      90:	e037883a 	mov	sp,fp
      94:	dfc00117 	ldw	ra,4(sp)
      98:	df000017 	ldw	fp,0(sp)
      9c:	dec00204 	addi	sp,sp,8
      a0:	f800283a 	ret

000000a4 <clear_display>:

void clear_display() {
      a4:	defffe04 	addi	sp,sp,-8
      a8:	dfc00115 	stw	ra,4(sp)
      ac:	df000015 	stw	fp,0(sp)
      b0:	d839883a 	mov	fp,sp
	// clear display - 00000001
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
      b4:	0007883a 	mov	r3,zero
      b8:	00942c04 	movi	r2,20656
      bc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x1);
      c0:	00c00044 	movi	r3,1
      c4:	00942804 	movi	r2,20640
      c8:	10c00035 	stwio	r3,0(r2)
	enable();
      cc:	000005c0 	call	5c <enable>
	usleep(3000);
      d0:	0102ee04 	movi	r4,3000
      d4:	00008a00 	call	8a0 <usleep>
}
      d8:	0001883a 	nop
      dc:	e037883a 	mov	sp,fp
      e0:	dfc00117 	ldw	ra,4(sp)
      e4:	df000017 	ldw	fp,0(sp)
      e8:	dec00204 	addi	sp,sp,8
      ec:	f800283a 	ret

000000f0 <write_text>:

void write_text(char* text, int size) {
      f0:	defffb04 	addi	sp,sp,-20
      f4:	dfc00415 	stw	ra,16(sp)
      f8:	df000315 	stw	fp,12(sp)
      fc:	df000304 	addi	fp,sp,12
     100:	e13ffe15 	stw	r4,-8(fp)
     104:	e17fff15 	stw	r5,-4(fp)
	clear_display();
     108:	00000a40 	call	a4 <clear_display>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
     10c:	00c00044 	movi	r3,1
     110:	00942c04 	movi	r2,20656
     114:	10c00035 	stwio	r3,0(r2)

	int i;
	for (i = 0; i < size; i++) {
     118:	e03ffd15 	stw	zero,-12(fp)
     11c:	00000f06 	br	15c <write_text+0x6c>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
     120:	e0bffd17 	ldw	r2,-12(fp)
     124:	e0fffe17 	ldw	r3,-8(fp)
     128:	1885883a 	add	r2,r3,r2
     12c:	10800003 	ldbu	r2,0(r2)
     130:	10c03fcc 	andi	r3,r2,255
     134:	18c0201c 	xori	r3,r3,128
     138:	18ffe004 	addi	r3,r3,-128
     13c:	00942804 	movi	r2,20640
     140:	10c00035 	stwio	r3,0(r2)
		enable();
     144:	000005c0 	call	5c <enable>
		usleep(100);
     148:	01001904 	movi	r4,100
     14c:	00008a00 	call	8a0 <usleep>
void write_text(char* text, int size) {
	clear_display();
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);

	int i;
	for (i = 0; i < size; i++) {
     150:	e0bffd17 	ldw	r2,-12(fp)
     154:	10800044 	addi	r2,r2,1
     158:	e0bffd15 	stw	r2,-12(fp)
     15c:	e0fffd17 	ldw	r3,-12(fp)
     160:	e0bfff17 	ldw	r2,-4(fp)
     164:	18bfee16 	blt	r3,r2,120 <_gp+0xffff63e0>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
		enable();
		usleep(100);
	}
}
     168:	0001883a 	nop
     16c:	e037883a 	mov	sp,fp
     170:	dfc00117 	ldw	ra,4(sp)
     174:	df000017 	ldw	fp,0(sp)
     178:	dec00204 	addi	sp,sp,8
     17c:	f800283a 	ret

00000180 <init_lcd>:

void init_lcd() {
     180:	defffe04 	addi	sp,sp,-8
     184:	dfc00115 	stw	ra,4(sp)
     188:	df000015 	stw	fp,0(sp)
     18c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
     190:	0007883a 	mov	r3,zero
     194:	00942c04 	movi	r2,20656
     198:	10c00035 	stwio	r3,0(r2)

	// function set 3x - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     19c:	00c00c04 	movi	r3,48
     1a0:	00942804 	movi	r2,20640
     1a4:	10c00035 	stwio	r3,0(r2)
	enable();
     1a8:	000005c0 	call	5c <enable>
	usleep(4100);
     1ac:	01040104 	movi	r4,4100
     1b0:	00008a00 	call	8a0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     1b4:	00c00c04 	movi	r3,48
     1b8:	00942804 	movi	r2,20640
     1bc:	10c00035 	stwio	r3,0(r2)
	enable();
     1c0:	000005c0 	call	5c <enable>
	usleep(100);
     1c4:	01001904 	movi	r4,100
     1c8:	00008a00 	call	8a0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
     1cc:	00c00c04 	movi	r3,48
     1d0:	00942804 	movi	r2,20640
     1d4:	10c00035 	stwio	r3,0(r2)
	enable();
     1d8:	000005c0 	call	5c <enable>
	usleep(100);
     1dc:	01001904 	movi	r4,100
     1e0:	00008a00 	call	8a0 <usleep>

	// real function set - 00111000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x38);
     1e4:	00c00e04 	movi	r3,56
     1e8:	00942804 	movi	r2,20640
     1ec:	10c00035 	stwio	r3,0(r2)
	enable();
     1f0:	000005c0 	call	5c <enable>
	usleep(100);
     1f4:	01001904 	movi	r4,100
     1f8:	00008a00 	call	8a0 <usleep>

	// display on/off - 00001000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x8);
     1fc:	00c00204 	movi	r3,8
     200:	00942804 	movi	r2,20640
     204:	10c00035 	stwio	r3,0(r2)
	enable();
     208:	000005c0 	call	5c <enable>
	usleep(100);
     20c:	01001904 	movi	r4,100
     210:	00008a00 	call	8a0 <usleep>

	clear_display();
     214:	00000a40 	call	a4 <clear_display>

	// entry mode - 00000110
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x6);
     218:	00c00184 	movi	r3,6
     21c:	00942804 	movi	r2,20640
     220:	10c00035 	stwio	r3,0(r2)
	enable();
     224:	000005c0 	call	5c <enable>
	usleep(100);
     228:	01001904 	movi	r4,100
     22c:	00008a00 	call	8a0 <usleep>

	// display on/off - 00001110 - cursor appears and doesn't blinks
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0xE);
     230:	00c00384 	movi	r3,14
     234:	00942804 	movi	r2,20640
     238:	10c00035 	stwio	r3,0(r2)
	enable();
     23c:	000005c0 	call	5c <enable>
	usleep(100);
     240:	01001904 	movi	r4,100
     244:	00008a00 	call	8a0 <usleep>

	// send some data to test - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
     248:	00c00044 	movi	r3,1
     24c:	00942c04 	movi	r2,20656
     250:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, '0');
     254:	00c00c04 	movi	r3,48
     258:	00942804 	movi	r2,20640
     25c:	10c00035 	stwio	r3,0(r2)
	enable();
     260:	000005c0 	call	5c <enable>
	usleep(100);
     264:	01001904 	movi	r4,100
     268:	00008a00 	call	8a0 <usleep>
}
     26c:	0001883a 	nop
     270:	e037883a 	mov	sp,fp
     274:	dfc00117 	ldw	ra,4(sp)
     278:	df000017 	ldw	fp,0(sp)
     27c:	dec00204 	addi	sp,sp,8
     280:	f800283a 	ret

00000284 <sendATCommand>:

void sendATCommand(char* command, int size) {
     284:	defffc04 	addi	sp,sp,-16
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13ffe15 	stw	r4,-8(fp)
     294:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
     298:	e03ffd15 	stw	zero,-12(fp)
	while (i < size) {
     29c:	00001006 	br	2e0 <sendATCommand+0x5c>
		if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
     2a0:	00940204 	movi	r2,20488
     2a4:	10800037 	ldwio	r2,0(r2)
     2a8:	1080100c 	andi	r2,r2,64
     2ac:	10000c26 	beq	r2,zero,2e0 <sendATCommand+0x5c>
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, command[i]);
     2b0:	e0bffd17 	ldw	r2,-12(fp)
     2b4:	e0fffe17 	ldw	r3,-8(fp)
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10c03fcc 	andi	r3,r2,255
     2c4:	18c0201c 	xori	r3,r3,128
     2c8:	18ffe004 	addi	r3,r3,-128
     2cc:	00940104 	movi	r2,20484
     2d0:	10c00035 	stwio	r3,0(r2)
			i++;
     2d4:	e0bffd17 	ldw	r2,-12(fp)
     2d8:	10800044 	addi	r2,r2,1
     2dc:	e0bffd15 	stw	r2,-12(fp)
	usleep(100);
}

void sendATCommand(char* command, int size) {
	int i = 0;
	while (i < size) {
     2e0:	e0fffd17 	ldw	r3,-12(fp)
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	18bfed16 	blt	r3,r2,2a0 <_gp+0xffff6560>
		if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, command[i]);
			i++;
		}
	}
}
     2ec:	0001883a 	nop
     2f0:	e037883a 	mov	sp,fp
     2f4:	df000017 	ldw	fp,0(sp)
     2f8:	dec00104 	addi	sp,sp,4
     2fc:	f800283a 	ret

00000300 <uart_ok>:

unsigned int uart_ok() {
     300:	defffe04 	addi	sp,sp,-8
     304:	df000115 	stw	fp,4(sp)
     308:	df000104 	addi	fp,sp,4
	char a;

	while (1) {
		a = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
     30c:	00940004 	movi	r2,20480
     310:	10800037 	ldwio	r2,0(r2)
     314:	e0bfff05 	stb	r2,-4(fp)
		if (a == 'K') {
     318:	e0bfff07 	ldb	r2,-4(fp)
     31c:	108012d8 	cmpnei	r2,r2,75
     320:	103ffa1e 	bne	r2,zero,30c <_gp+0xffff65cc>
			return 1;
     324:	00800044 	movi	r2,1
		}
	}
}
     328:	e037883a 	mov	sp,fp
     32c:	df000017 	ldw	fp,0(sp)
     330:	dec00104 	addi	sp,sp,4
     334:	f800283a 	ret

00000338 <init_esp>:

void init_esp() {
     338:	defffe04 	addi	sp,sp,-8
     33c:	dfc00115 	stw	ra,4(sp)
     340:	df000015 	stw	fp,0(sp)
     344:	d839883a 	mov	fp,sp
	write_text("WAITING...", 10);
     348:	01400284 	movi	r5,10
     34c:	01000034 	movhi	r4,0
     350:	21065a04 	addi	r4,r4,6504
     354:	00000f00 	call	f0 <write_text>

	while (1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) == 7) {
     358:	00942004 	movi	r2,20608
     35c:	10800037 	ldwio	r2,0(r2)
     360:	108001d8 	cmpnei	r2,r2,7
     364:	10000426 	beq	r2,zero,378 <init_esp+0x40>
			break;
		}
		usleep(100000);
     368:	010000b4 	movhi	r4,2
     36c:	2121a804 	addi	r4,r4,-31072
     370:	00008a00 	call	8a0 <usleep>
	}
     374:	003ff806 	br	358 <_gp+0xffff6618>
void init_esp() {
	write_text("WAITING...", 10);

	while (1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) == 7) {
			break;
     378:	0001883a 	nop
		}
		usleep(100000);
	}

	alt_putstr("AT+CWMODE_CUR=3\r\n");
     37c:	01000034 	movhi	r4,0
     380:	21065d04 	addi	r4,r4,6516
     384:	00008940 	call	894 <alt_putstr>
	uart_ok();
     388:	00003000 	call	300 <uart_ok>

	write_text("WIFI...", 7);
     38c:	014001c4 	movi	r5,7
     390:	01000034 	movhi	r4,0
     394:	21066204 	addi	r4,r4,6536
     398:	00000f00 	call	f0 <write_text>
	alt_putstr("AT+CWJAP_CUR=\"WLessLEDS\",\"HelloWorldMP31\"\r\n");
     39c:	01000034 	movhi	r4,0
     3a0:	21066404 	addi	r4,r4,6544
     3a4:	00008940 	call	894 <alt_putstr>
	uart_ok();
     3a8:	00003000 	call	300 <uart_ok>

	write_text("BROKER...", 9);
     3ac:	01400244 	movi	r5,9
     3b0:	01000034 	movhi	r4,0
     3b4:	21066f04 	addi	r4,r4,6588
     3b8:	00000f00 	call	f0 <write_text>
	alt_putstr("AT+CIPSTART=\"TCP\",\"192.168.1.102\",1883,7200\r\n");
     3bc:	01000034 	movhi	r4,0
     3c0:	21067204 	addi	r4,r4,6600
     3c4:	00008940 	call	894 <alt_putstr>
	uart_ok();
     3c8:	00003000 	call	300 <uart_ok>


	alt_putstr("AT+CIPSEND=14\r\n");
     3cc:	01000034 	movhi	r4,0
     3d0:	21067e04 	addi	r4,r4,6648
     3d4:	00008940 	call	894 <alt_putstr>
	uart_ok();
     3d8:	00003000 	call	300 <uart_ok>
	alt_putchar(0x10);
     3dc:	01000404 	movi	r4,16
     3e0:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x0D);
     3e4:	01000344 	movi	r4,13
     3e8:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x00);
     3ec:	0009883a 	mov	r4,zero
     3f0:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x04);
     3f4:	01000104 	movi	r4,4
     3f8:	00008880 	call	888 <alt_putchar>
	//MQTT
	alt_putchar(0x4D);
     3fc:	01001344 	movi	r4,77
     400:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x51);
     404:	01001444 	movi	r4,81
     408:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x54);
     40c:	01001504 	movi	r4,84
     410:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x54);
     414:	01001504 	movi	r4,84
     418:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x04);
     41c:	01000104 	movi	r4,4
     420:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x02);
     424:	01000084 	movi	r4,2
     428:	00008880 	call	888 <alt_putchar>
	alt_putchar(0xFF00);
     42c:	013fc014 	movui	r4,65280
     430:	00008880 	call	888 <alt_putchar>
	//es
	alt_putchar(0x65);
     434:	01001944 	movi	r4,101
     438:	00008880 	call	888 <alt_putchar>
	alt_putchar(0x73);
     43c:	01001cc4 	movi	r4,115
     440:	00008880 	call	888 <alt_putchar>
	alt_putstr("\r\n");
     444:	01000034 	movhi	r4,0
     448:	21068204 	addi	r4,r4,6664
     44c:	00008940 	call	894 <alt_putstr>
	uart_ok();
     450:	00003000 	call	300 <uart_ok>

	write_text("CONNECTED BROKER", 16);
     454:	01400404 	movi	r5,16
     458:	01000034 	movhi	r4,0
     45c:	21068304 	addi	r4,r4,6668
     460:	00000f00 	call	f0 <write_text>
	usleep(2000000);
     464:	010007f4 	movhi	r4,31
     468:	21212004 	addi	r4,r4,-31616
     46c:	00008a00 	call	8a0 <usleep>
}
     470:	0001883a 	nop
     474:	e037883a 	mov	sp,fp
     478:	dfc00117 	ldw	ra,4(sp)
     47c:	df000017 	ldw	fp,0(sp)
     480:	dec00204 	addi	sp,sp,8
     484:	f800283a 	ret

00000488 <main>:

int main() {
     488:	deffde04 	addi	sp,sp,-136
     48c:	dfc02115 	stw	ra,132(sp)
     490:	df002015 	stw	fp,128(sp)
     494:	dc001f15 	stw	r16,124(sp)
     498:	df002004 	addi	fp,sp,128
	int outputs[] = {15, 23, 27, 29, 30};
     49c:	008003c4 	movi	r2,15
     4a0:	e0bfe415 	stw	r2,-112(fp)
     4a4:	008005c4 	movi	r2,23
     4a8:	e0bfe515 	stw	r2,-108(fp)
     4ac:	008006c4 	movi	r2,27
     4b0:	e0bfe615 	stw	r2,-104(fp)
     4b4:	00800744 	movi	r2,29
     4b8:	e0bfe715 	stw	r2,-100(fp)
     4bc:	00800784 	movi	r2,30
     4c0:	e0bfe815 	stw	r2,-96(fp)

	char lcd_options[][9] = {
     4c4:	00800034 	movhi	r2,0
     4c8:	10868744 	addi	r2,r2,6685
     4cc:	e0ffe904 	addi	r3,fp,-92
     4d0:	1009883a 	mov	r4,r2
     4d4:	00800b44 	movi	r2,45
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	1809883a 	mov	r4,r3
     4e4:	00006ec0 	call	6ec <memcpy>
			"3 - LED C",
			"4 - LED D",
			"5 - LED E"
	};

	char lcd_option_selected[][8] = {
     4e8:	00800034 	movhi	r2,0
     4ec:	10869284 	addi	r2,r2,6730
     4f0:	e0fff444 	addi	r3,fp,-47
     4f4:	1009883a 	mov	r4,r2
     4f8:	00800a04 	movi	r2,40
     4fc:	100d883a 	mov	r6,r2
     500:	200b883a 	mov	r5,r4
     504:	1809883a 	mov	r4,r3
     508:	00006ec0 	call	6ec <memcpy>
			"LED C ON",
			"LED D ON",
			"LED E ON",
	};

	int i = 0;
     50c:	e03fe015 	stw	zero,-128(fp)
	int previous_i;
	int selected = 0;
     510:	e03fe115 	stw	zero,-124(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     514:	00c007c4 	movi	r3,31
     518:	00942404 	movi	r2,20624
     51c:	10c00035 	stwio	r3,0(r2)
	init_lcd();
     520:	00001800 	call	180 <init_lcd>
	init_esp();
     524:	00003380 	call	338 <init_esp>

	write_text(lcd_options[0], 9);
     528:	e0bfe904 	addi	r2,fp,-92
     52c:	01400244 	movi	r5,9
     530:	1009883a 	mov	r4,r2
     534:	00000f00 	call	f0 <write_text>

	while(1) {
		int in = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
     538:	00942004 	movi	r2,20608
     53c:	10800037 	ldwio	r2,0(r2)
     540:	e0bfe215 	stw	r2,-120(fp)

		previous_i = i;
     544:	e0bfe017 	ldw	r2,-128(fp)
     548:	e0bfe315 	stw	r2,-116(fp)

		if (in == 13 && !selected) {
     54c:	e0bfe217 	ldw	r2,-120(fp)
     550:	10800358 	cmpnei	r2,r2,13
     554:	1000061e 	bne	r2,zero,570 <main+0xe8>
     558:	e0bfe117 	ldw	r2,-124(fp)
     55c:	1000041e 	bne	r2,zero,570 <main+0xe8>
			i++;
     560:	e0bfe017 	ldw	r2,-128(fp)
     564:	10800044 	addi	r2,r2,1
     568:	e0bfe015 	stw	r2,-128(fp)
     56c:	00003e06 	br	668 <main+0x1e0>
		} else if (in == 14 && !selected) {
     570:	e0bfe217 	ldw	r2,-120(fp)
     574:	10800398 	cmpnei	r2,r2,14
     578:	1000061e 	bne	r2,zero,594 <main+0x10c>
     57c:	e0bfe117 	ldw	r2,-124(fp)
     580:	1000041e 	bne	r2,zero,594 <main+0x10c>
			i--;
     584:	e0bfe017 	ldw	r2,-128(fp)
     588:	10bfffc4 	addi	r2,r2,-1
     58c:	e0bfe015 	stw	r2,-128(fp)
     590:	00003506 	br	668 <main+0x1e0>
		} else if (in == 7) {
     594:	e0bfe217 	ldw	r2,-120(fp)
     598:	108001d8 	cmpnei	r2,r2,7
     59c:	1000131e 	bne	r2,zero,5ec <main+0x164>
			// seleciona
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, outputs[i]);
     5a0:	e0bfe017 	ldw	r2,-128(fp)
     5a4:	1085883a 	add	r2,r2,r2
     5a8:	1085883a 	add	r2,r2,r2
     5ac:	e0ffe004 	addi	r3,fp,-128
     5b0:	1885883a 	add	r2,r3,r2
     5b4:	10800404 	addi	r2,r2,16
     5b8:	10c00017 	ldw	r3,0(r2)
     5bc:	00942404 	movi	r2,20624
     5c0:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_option_selected[i], 8);
     5c4:	e0fff444 	addi	r3,fp,-47
     5c8:	e0bfe017 	ldw	r2,-128(fp)
     5cc:	100490fa 	slli	r2,r2,3
     5d0:	1885883a 	add	r2,r3,r2
     5d4:	01400204 	movi	r5,8
     5d8:	1009883a 	mov	r4,r2
     5dc:	00000f00 	call	f0 <write_text>
			selected = 1;
     5e0:	00800044 	movi	r2,1
     5e4:	e0bfe115 	stw	r2,-124(fp)
     5e8:	00001f06 	br	668 <main+0x1e0>
		} else if (in == 11) {
     5ec:	e0bfe217 	ldw	r2,-120(fp)
     5f0:	108002d8 	cmpnei	r2,r2,11
     5f4:	10000d1e 	bne	r2,zero,62c <main+0x1a4>
			selected = 0;
     5f8:	e03fe115 	stw	zero,-124(fp)
			//apaga todos os leds
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     5fc:	00c007c4 	movi	r3,31
     600:	00942404 	movi	r2,20624
     604:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_options[i], 9);
     608:	e43fe904 	addi	r16,fp,-92
     60c:	01400244 	movi	r5,9
     610:	e13fe017 	ldw	r4,-128(fp)
     614:	00006c40 	call	6c4 <__mulsi3>
     618:	8085883a 	add	r2,r16,r2
     61c:	01400244 	movi	r5,9
     620:	1009883a 	mov	r4,r2
     624:	00000f00 	call	f0 <write_text>
     628:	00000f06 	br	668 <main+0x1e0>
		} else if (in == 12 ) {
     62c:	e0bfe217 	ldw	r2,-120(fp)
     630:	10800318 	cmpnei	r2,r2,12
     634:	10000c1e 	bne	r2,zero,668 <main+0x1e0>
			init_esp();
     638:	00003380 	call	338 <init_esp>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 31);
     63c:	00c007c4 	movi	r3,31
     640:	00942404 	movi	r2,20624
     644:	10c00035 	stwio	r3,0(r2)
			write_text(lcd_options[i], 9);
     648:	e43fe904 	addi	r16,fp,-92
     64c:	01400244 	movi	r5,9
     650:	e13fe017 	ldw	r4,-128(fp)
     654:	00006c40 	call	6c4 <__mulsi3>
     658:	8085883a 	add	r2,r16,r2
     65c:	01400244 	movi	r5,9
     660:	1009883a 	mov	r4,r2
     664:	00000f00 	call	f0 <write_text>
		}

		if (i > 4) {
     668:	e0bfe017 	ldw	r2,-128(fp)
     66c:	10800150 	cmplti	r2,r2,5
     670:	1000011e 	bne	r2,zero,678 <main+0x1f0>
			i = 0;
     674:	e03fe015 	stw	zero,-128(fp)
		}

		if (i < 0) {
     678:	e0bfe017 	ldw	r2,-128(fp)
     67c:	1000020e 	bge	r2,zero,688 <main+0x200>
			i = 4;
     680:	00800104 	movi	r2,4
     684:	e0bfe015 	stw	r2,-128(fp)
		}

		if (previous_i != i) {
     688:	e0ffe317 	ldw	r3,-116(fp)
     68c:	e0bfe017 	ldw	r2,-128(fp)
     690:	18800826 	beq	r3,r2,6b4 <main+0x22c>
			write_text(lcd_options[i], 9);
     694:	e43fe904 	addi	r16,fp,-92
     698:	01400244 	movi	r5,9
     69c:	e13fe017 	ldw	r4,-128(fp)
     6a0:	00006c40 	call	6c4 <__mulsi3>
     6a4:	8085883a 	add	r2,r16,r2
     6a8:	01400244 	movi	r5,9
     6ac:	1009883a 	mov	r4,r2
     6b0:	00000f00 	call	f0 <write_text>
		}

		usleep(100000);
     6b4:	010000b4 	movhi	r4,2
     6b8:	2121a804 	addi	r4,r4,-31072
     6bc:	00008a00 	call	8a0 <usleep>
	}
     6c0:	003f9d06 	br	538 <_gp+0xffff67f8>

000006c4 <__mulsi3>:
     6c4:	0005883a 	mov	r2,zero
     6c8:	20000726 	beq	r4,zero,6e8 <__mulsi3+0x24>
     6cc:	20c0004c 	andi	r3,r4,1
     6d0:	2008d07a 	srli	r4,r4,1
     6d4:	18000126 	beq	r3,zero,6dc <__mulsi3+0x18>
     6d8:	1145883a 	add	r2,r2,r5
     6dc:	294b883a 	add	r5,r5,r5
     6e0:	203ffa1e 	bne	r4,zero,6cc <_gp+0xffff698c>
     6e4:	f800283a 	ret
     6e8:	f800283a 	ret

000006ec <memcpy>:
     6ec:	2005883a 	mov	r2,r4
     6f0:	2007883a 	mov	r3,r4
     6f4:	218d883a 	add	r6,r4,r6
     6f8:	19800526 	beq	r3,r6,710 <memcpy+0x24>
     6fc:	29000003 	ldbu	r4,0(r5)
     700:	18c00044 	addi	r3,r3,1
     704:	29400044 	addi	r5,r5,1
     708:	193fffc5 	stb	r4,-1(r3)
     70c:	003ffa06 	br	6f8 <_gp+0xffff69b8>
     710:	f800283a 	ret

00000714 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     714:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     718:	01800034 	movhi	r6,0
     71c:	01c00034 	movhi	r7,0
     720:	dfc00015 	stw	ra,0(sp)
     724:	3186a304 	addi	r6,r6,6796
     728:	39c75804 	addi	r7,r7,7520
     72c:	31c01026 	beq	r6,r7,770 <alt_load+0x5c>
  {
    while( to != end )
     730:	00800034 	movhi	r2,0
     734:	10875804 	addi	r2,r2,7520
     738:	30800d26 	beq	r6,r2,770 <alt_load+0x5c>
     73c:	30c00104 	addi	r3,r6,4
     740:	10c7c83a 	sub	r3,r2,r3
     744:	1806d0ba 	srli	r3,r3,2
     748:	0005883a 	mov	r2,zero
     74c:	18c00044 	addi	r3,r3,1
     750:	18c7883a 	add	r3,r3,r3
     754:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     758:	11c9883a 	add	r4,r2,r7
     75c:	21400017 	ldw	r5,0(r4)
     760:	1189883a 	add	r4,r2,r6
     764:	10800104 	addi	r2,r2,4
     768:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     76c:	10fffa1e 	bne	r2,r3,758 <_gp+0xffff6a18>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     770:	01800034 	movhi	r6,0
     774:	01c00034 	movhi	r7,0
     778:	31800804 	addi	r6,r6,32
     77c:	39c00804 	addi	r7,r7,32
     780:	31c01026 	beq	r6,r7,7c4 <alt_load+0xb0>
  {
    while( to != end )
     784:	00800034 	movhi	r2,0
     788:	10800804 	addi	r2,r2,32
     78c:	30800d26 	beq	r6,r2,7c4 <alt_load+0xb0>
     790:	30c00104 	addi	r3,r6,4
     794:	10c7c83a 	sub	r3,r2,r3
     798:	1806d0ba 	srli	r3,r3,2
     79c:	0005883a 	mov	r2,zero
     7a0:	18c00044 	addi	r3,r3,1
     7a4:	18c7883a 	add	r3,r3,r3
     7a8:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     7ac:	11c9883a 	add	r4,r2,r7
     7b0:	21400017 	ldw	r5,0(r4)
     7b4:	1189883a 	add	r4,r2,r6
     7b8:	10800104 	addi	r2,r2,4
     7bc:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     7c0:	18bffa1e 	bne	r3,r2,7ac <_gp+0xffff6a6c>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     7c4:	01800034 	movhi	r6,0
     7c8:	01c00034 	movhi	r7,0
     7cc:	31865a04 	addi	r6,r6,6504
     7d0:	39c65a04 	addi	r7,r7,6504
     7d4:	31c01026 	beq	r6,r7,818 <alt_load+0x104>
  {
    while( to != end )
     7d8:	00800034 	movhi	r2,0
     7dc:	1086a304 	addi	r2,r2,6796
     7e0:	30800d26 	beq	r6,r2,818 <alt_load+0x104>
     7e4:	30c00104 	addi	r3,r6,4
     7e8:	10c7c83a 	sub	r3,r2,r3
     7ec:	1806d0ba 	srli	r3,r3,2
     7f0:	0005883a 	mov	r2,zero
     7f4:	18c00044 	addi	r3,r3,1
     7f8:	18c7883a 	add	r3,r3,r3
     7fc:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     800:	11c9883a 	add	r4,r2,r7
     804:	21400017 	ldw	r5,0(r4)
     808:	1189883a 	add	r4,r2,r6
     80c:	10800104 	addi	r2,r2,4
     810:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     814:	10fffa1e 	bne	r2,r3,800 <_gp+0xffff6ac0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     818:	0000b380 	call	b38 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
     81c:	dfc00017 	ldw	ra,0(sp)
     820:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
     824:	0000c781 	jmpi	c78 <alt_icache_flush_all>

00000828 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     828:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     82c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     830:	dfc00115 	stw	ra,4(sp)
     834:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     838:	00008a40 	call	8a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     83c:	00008c40 	call	8c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     840:	01800034 	movhi	r6,0
     844:	31869d04 	addi	r6,r6,6772
     848:	300b883a 	mov	r5,r6
     84c:	3009883a 	mov	r4,r6
     850:	0000d080 	call	d08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     854:	0000bb00 	call	bb0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     858:	01000034 	movhi	r4,0
     85c:	21030504 	addi	r4,r4,3092
     860:	00011140 	call	1114 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     864:	d1a0bd17 	ldw	r6,-32012(gp)
     868:	d160be17 	ldw	r5,-32008(gp)
     86c:	d120bf17 	ldw	r4,-32004(gp)
     870:	00004880 	call	488 <main>
  close(STDOUT_FILENO);
     874:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     878:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     87c:	0000a780 	call	a78 <close>
  exit (result);
     880:	8009883a 	mov	r4,r16
     884:	00011280 	call	1128 <exit>

00000888 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     888:	d0a00717 	ldw	r2,-32740(gp)
     88c:	11400217 	ldw	r5,8(r2)
     890:	00012881 	jmpi	1288 <putc>

00000894 <alt_putstr>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     894:	d0a00717 	ldw	r2,-32740(gp)
     898:	11400217 	ldw	r5,8(r2)
     89c:	00011481 	jmpi	1148 <fputs>

000008a0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
     8a0:	00009f01 	jmpi	9f0 <alt_busy_sleep>

000008a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     8a4:	deffff04 	addi	sp,sp,-4
     8a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
     8ac:	0000f600 	call	f60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     8b0:	00800044 	movi	r2,1
     8b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     8b8:	dfc00017 	ldw	ra,0(sp)
     8bc:	dec00104 	addi	sp,sp,4
     8c0:	f800283a 	ret

000008c4 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     8c4:	01000034 	movhi	r4,0
     8c8:	2106a304 	addi	r4,r4,6796
     8cc:	d1600104 	addi	r5,gp,-32764
     8d0:	0000b441 	jmpi	b44 <alt_dev_llist_insert>

000008d4 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
     8d4:	20800017 	ldw	r2,0(r4)
     8d8:	21c00217 	ldw	r7,8(r4)
     8dc:	11000a04 	addi	r4,r2,40
     8e0:	00008f41 	jmpi	8f4 <altera_avalon_uart_read>

000008e4 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
     8e4:	20800017 	ldw	r2,0(r4)
     8e8:	21c00217 	ldw	r7,8(r4)
     8ec:	11000a04 	addi	r4,r2,40
     8f0:	00009701 	jmpi	970 <altera_avalon_uart_write>

000008f4 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
     8f4:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
     8f8:	20800017 	ldw	r2,0(r4)
     8fc:	10800204 	addi	r2,r2,8
     900:	10c00037 	ldwio	r3,0(r2)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
     904:	10000035 	stwio	zero,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
     908:	1880200c 	andi	r2,r3,128
     90c:	10000c1e 	bne	r2,zero,940 <altera_avalon_uart_read+0x4c>
      {
        return 1;
      }
    }
  }
  while (block);
     910:	383ff926 	beq	r7,zero,8f8 <_gp+0xffff6bb8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     914:	d0a00517 	ldw	r2,-32748(gp)
     918:	10001026 	beq	r2,zero,95c <altera_avalon_uart_read+0x68>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
     91c:	deffff04 	addi	sp,sp,-4
     920:	dfc00015 	stw	ra,0(sp)
     924:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
     928:	00c002c4 	movi	r3,11
     92c:	10c00015 	stw	r3,0(r2)
 
  return 0;
     930:	0005883a 	mov	r2,zero
}
     934:	dfc00017 	ldw	ra,0(sp)
     938:	dec00104 	addi	sp,sp,4
     93c:	f800283a 	ret

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
     940:	20800017 	ldw	r2,0(r4)
     944:	10800037 	ldwio	r2,0(r2)
     948:	28800005 	stb	r2,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
     94c:	18c000cc 	andi	r3,r3,3
     950:	183fef1e 	bne	r3,zero,910 <_gp+0xffff6bd0>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
     954:	00800044 	movi	r2,1
     958:	f800283a 	ret
     95c:	d0a0c004 	addi	r2,gp,-32000
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
     960:	00c002c4 	movi	r3,11
     964:	10c00015 	stw	r3,0(r2)
 
  return 0;
     968:	0005883a 	mov	r2,zero
}
     96c:	f800283a 	ret

00000970 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
     970:	defffd04 	addi	sp,sp,-12
     974:	dc000115 	stw	r16,4(sp)
     978:	dfc00215 	stw	ra,8(sp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
     97c:	39d0000c 	andi	r7,r7,16384
  count = len;
     980:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
     984:	20c00017 	ldw	r3,0(r4)
     988:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
     98c:	1080100c 	andi	r2,r2,64
     990:	1000071e 	bne	r2,zero,9b0 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
      count--;
    }
  }
  while (block && count);
     994:	38000b1e 	bne	r7,zero,9c4 <altera_avalon_uart_write+0x54>
     998:	803ffa1e 	bne	r16,zero,984 <_gp+0xffff6c44>
  {
    ALT_ERRNO = EWOULDBLOCK;
  }

  return (len - count);
}
     99c:	3405c83a 	sub	r2,r6,r16
     9a0:	dfc00217 	ldw	ra,8(sp)
     9a4:	dc000117 	ldw	r16,4(sp)
     9a8:	dec00304 	addi	sp,sp,12
     9ac:	f800283a 	ret
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
     9b0:	28800007 	ldb	r2,0(r5)
     9b4:	29400044 	addi	r5,r5,1
     9b8:	18800135 	stwio	r2,4(r3)
      count--;
     9bc:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
     9c0:	383ff526 	beq	r7,zero,998 <_gp+0xffff6c58>

  if (count)
     9c4:	803ff526 	beq	r16,zero,99c <_gp+0xffff6c5c>
     9c8:	d0a00517 	ldw	r2,-32748(gp)
     9cc:	10000626 	beq	r2,zero,9e8 <altera_avalon_uart_write+0x78>
     9d0:	d9800015 	stw	r6,0(sp)
     9d4:	103ee83a 	callr	r2
     9d8:	d9800017 	ldw	r6,0(sp)
  {
    ALT_ERRNO = EWOULDBLOCK;
     9dc:	00c002c4 	movi	r3,11
     9e0:	10c00015 	stw	r3,0(r2)
     9e4:	003fed06 	br	99c <_gp+0xffff6c5c>
     9e8:	d0a0c004 	addi	r2,gp,-32000
     9ec:	003ffb06 	br	9dc <_gp+0xffff6c9c>

000009f0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     9f0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     9f4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     9f8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     9fc:	dc000015 	stw	r16,0(sp)
     a00:	dfc00115 	stw	ra,4(sp)
     a04:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     a08:	00017880 	call	1788 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     a0c:	10001426 	beq	r2,zero,a60 <alt_busy_sleep+0x70>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     a10:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     a14:	013999b4 	movhi	r4,58982
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     a18:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     a1c:	211999c4 	addi	r4,r4,26215
     a20:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     a24:	297fffc4 	addi	r5,r5,-1
     a28:	283ffe1e 	bne	r5,zero,a24 <_gp+0xffff6ce4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     a2c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     a30:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     a34:	18bffb16 	blt	r3,r2,a24 <_gp+0xffff6ce4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a38:	01400144 	movi	r5,5
     a3c:	8009883a 	mov	r4,r16
     a40:	00006c40 	call	6c4 <__mulsi3>
     a44:	10bfffc4 	addi	r2,r2,-1
     a48:	103ffe1e 	bne	r2,zero,a44 <_gp+0xffff6d04>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
     a4c:	0005883a 	mov	r2,zero
     a50:	dfc00117 	ldw	ra,4(sp)
     a54:	dc000017 	ldw	r16,0(sp)
     a58:	dec00204 	addi	sp,sp,8
     a5c:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a60:	01400144 	movi	r5,5
     a64:	8009883a 	mov	r4,r16
     a68:	00006c40 	call	6c4 <__mulsi3>
     a6c:	10bfffc4 	addi	r2,r2,-1
     a70:	00bffe16 	blt	zero,r2,a6c <_gp+0xffff6d2c>
     a74:	003ff506 	br	a4c <_gp+0xffff6d0c>

00000a78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     a78:	defffd04 	addi	sp,sp,-12
     a7c:	dfc00215 	stw	ra,8(sp)
     a80:	dc400115 	stw	r17,4(sp)
     a84:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     a88:	20002016 	blt	r4,zero,b0c <close+0x94>
     a8c:	01400304 	movi	r5,12
     a90:	2021883a 	mov	r16,r4
     a94:	00006c40 	call	6c4 <__mulsi3>
     a98:	01000034 	movhi	r4,0
     a9c:	2106ae04 	addi	r4,r4,6840
     aa0:	2089883a 	add	r4,r4,r2

  if (fd)
     aa4:	20001926 	beq	r4,zero,b0c <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     aa8:	20800017 	ldw	r2,0(r4)
     aac:	10800417 	ldw	r2,16(r2)
     ab0:	10000b26 	beq	r2,zero,ae0 <close+0x68>
     ab4:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     ab8:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     abc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     ac0:	0000f040 	call	f04 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     ac4:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
     ac8:	88000916 	blt	r17,zero,af0 <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     acc:	dfc00217 	ldw	ra,8(sp)
     ad0:	dc400117 	ldw	r17,4(sp)
     ad4:	dc000017 	ldw	r16,0(sp)
     ad8:	dec00304 	addi	sp,sp,12
     adc:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     ae0:	8009883a 	mov	r4,r16
     ae4:	0000f040 	call	f04 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     ae8:	0005883a 	mov	r2,zero
     aec:	003ff706 	br	acc <_gp+0xffff6d8c>
     af0:	d0a00517 	ldw	r2,-32748(gp)
     af4:	10000c26 	beq	r2,zero,b28 <close+0xb0>
     af8:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
     afc:	0463c83a 	sub	r17,zero,r17
     b00:	14400015 	stw	r17,0(r2)
      return -1;
     b04:	00bfffc4 	movi	r2,-1
     b08:	003ff006 	br	acc <_gp+0xffff6d8c>
     b0c:	d0a00517 	ldw	r2,-32748(gp)
     b10:	10000726 	beq	r2,zero,b30 <close+0xb8>
     b14:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
     b18:	00c01444 	movi	r3,81
     b1c:	10c00015 	stw	r3,0(r2)
    return -1;
     b20:	00bfffc4 	movi	r2,-1
     b24:	003fe906 	br	acc <_gp+0xffff6d8c>
     b28:	d0a0c004 	addi	r2,gp,-32000
     b2c:	003ff306 	br	afc <_gp+0xffff6dbc>
     b30:	d0a0c004 	addi	r2,gp,-32000
     b34:	003ff806 	br	b18 <_gp+0xffff6dd8>

00000b38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     b38:	f800283a 	ret

00000b3c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
     b3c:	3005883a 	mov	r2,r6
     b40:	f800283a 	ret

00000b44 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     b44:	20000a26 	beq	r4,zero,b70 <alt_dev_llist_insert+0x2c>
     b48:	20800217 	ldw	r2,8(r4)
     b4c:	10000826 	beq	r2,zero,b70 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
     b50:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     b54:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
     b58:	0005883a 	mov	r2,zero
  entry->next     = list->next;
     b5c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
     b60:	28c00017 	ldw	r3,0(r5)
     b64:	19000115 	stw	r4,4(r3)
  list->next           = entry;
     b68:	29000015 	stw	r4,0(r5)
     b6c:	f800283a 	ret
     b70:	d0a00517 	ldw	r2,-32748(gp)
     b74:	10000926 	beq	r2,zero,b9c <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     b78:	deffff04 	addi	sp,sp,-4
     b7c:	dfc00015 	stw	ra,0(sp)
     b80:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
     b84:	00c00584 	movi	r3,22
     b88:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     b8c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     b90:	dfc00017 	ldw	ra,0(sp)
     b94:	dec00104 	addi	sp,sp,4
     b98:	f800283a 	ret
     b9c:	d0a0c004 	addi	r2,gp,-32000
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
     ba0:	00c00584 	movi	r3,22
     ba4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     ba8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     bac:	f800283a 	ret

00000bb0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     bb0:	defffc04 	addi	sp,sp,-16
     bb4:	dc800215 	stw	r18,8(sp)
     bb8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     bbc:	04800034 	movhi	r18,0
     bc0:	04000034 	movhi	r16,0
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     bc4:	dfc00315 	stw	ra,12(sp)
     bc8:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     bcc:	84065904 	addi	r16,r16,6500
     bd0:	94865a04 	addi	r18,r18,6504
     bd4:	84800936 	bltu	r16,r18,bfc <_do_ctors+0x4c>
     bd8:	84a5c83a 	sub	r18,r16,r18
     bdc:	9024d0ba 	srli	r18,r18,2
     be0:	0023883a 	mov	r17,zero
     be4:	94800044 	addi	r18,r18,1
        (*ctor) (); 
     be8:	80800017 	ldw	r2,0(r16)
     bec:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     bf0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
     bf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     bf8:	8cbffb1e 	bne	r17,r18,be8 <_gp+0xffff6ea8>
        (*ctor) (); 
}
     bfc:	dfc00317 	ldw	ra,12(sp)
     c00:	dc800217 	ldw	r18,8(sp)
     c04:	dc400117 	ldw	r17,4(sp)
     c08:	dc000017 	ldw	r16,0(sp)
     c0c:	dec00404 	addi	sp,sp,16
     c10:	f800283a 	ret

00000c14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     c14:	defffc04 	addi	sp,sp,-16
     c18:	dc800215 	stw	r18,8(sp)
     c1c:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     c20:	04800034 	movhi	r18,0
     c24:	04000034 	movhi	r16,0
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     c28:	dfc00315 	stw	ra,12(sp)
     c2c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     c30:	84065904 	addi	r16,r16,6500
     c34:	94865a04 	addi	r18,r18,6504
     c38:	84800936 	bltu	r16,r18,c60 <_do_dtors+0x4c>
     c3c:	84a5c83a 	sub	r18,r16,r18
     c40:	9024d0ba 	srli	r18,r18,2
     c44:	0023883a 	mov	r17,zero
     c48:	94800044 	addi	r18,r18,1
        (*dtor) (); 
     c4c:	80800017 	ldw	r2,0(r16)
     c50:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     c54:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
     c58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     c5c:	8cbffb1e 	bne	r17,r18,c4c <_gp+0xffff6f0c>
        (*dtor) (); 
}
     c60:	dfc00317 	ldw	ra,12(sp)
     c64:	dc800217 	ldw	r18,8(sp)
     c68:	dc400117 	ldw	r17,4(sp)
     c6c:	dc000017 	ldw	r16,0(sp)
     c70:	dec00404 	addi	sp,sp,16
     c74:	f800283a 	ret

00000c78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     c78:	f800283a 	ret

00000c7c <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
     c7c:	defffd04 	addi	sp,sp,-12
     c80:	2805883a 	mov	r2,r5
     c84:	dc400115 	stw	r17,4(sp)
     c88:	300b883a 	mov	r5,r6
     c8c:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
     c90:	01807fc4 	movi	r6,511
     c94:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
     c98:	dfc00215 	stw	ra,8(sp)
     c9c:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
     ca0:	0000d7c0 	call	d7c <open>

  if (old >= 0)
     ca4:	10001316 	blt	r2,zero,cf4 <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
     ca8:	1009883a 	mov	r4,r2
     cac:	01400304 	movi	r5,12
     cb0:	1021883a 	mov	r16,r2
     cb4:	00006c40 	call	6c4 <__mulsi3>
     cb8:	00c00034 	movhi	r3,0
     cbc:	18c6ae04 	addi	r3,r3,6840
     cc0:	1885883a 	add	r2,r3,r2
     cc4:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
     cc8:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
     ccc:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
     cd0:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
     cd4:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
     cd8:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
     cdc:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
     ce0:	dfc00217 	ldw	ra,8(sp)
     ce4:	dc400117 	ldw	r17,4(sp)
     ce8:	dc000017 	ldw	r16,0(sp)
     cec:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
     cf0:	0000f041 	jmpi	f04 <alt_release_fd>
  }
} 
     cf4:	dfc00217 	ldw	ra,8(sp)
     cf8:	dc400117 	ldw	r17,4(sp)
     cfc:	dc000017 	ldw	r16,0(sp)
     d00:	dec00304 	addi	sp,sp,12
     d04:	f800283a 	ret

00000d08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     d08:	defffb04 	addi	sp,sp,-20
     d0c:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     d10:	04000034 	movhi	r16,0
     d14:	8406b104 	addi	r16,r16,6852
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     d18:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     d1c:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     d20:	dcc00315 	stw	r19,12(sp)
     d24:	dc800215 	stw	r18,8(sp)
     d28:	2827883a 	mov	r19,r5
     d2c:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     d30:	200b883a 	mov	r5,r4
     d34:	880d883a 	mov	r6,r17
     d38:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     d3c:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     d40:	0000c7c0 	call	c7c <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
     d44:	813ffd04 	addi	r4,r16,-12
     d48:	980b883a 	mov	r5,r19
     d4c:	000d883a 	mov	r6,zero
     d50:	0000c7c0 	call	c7c <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     d54:	880d883a 	mov	r6,r17
     d58:	900b883a 	mov	r5,r18
     d5c:	81000304 	addi	r4,r16,12
}  
     d60:	dfc00417 	ldw	ra,16(sp)
     d64:	dcc00317 	ldw	r19,12(sp)
     d68:	dc800217 	ldw	r18,8(sp)
     d6c:	dc400117 	ldw	r17,4(sp)
     d70:	dc000017 	ldw	r16,0(sp)
     d74:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     d78:	0000c7c1 	jmpi	c7c <alt_open_fd.constprop.0>

00000d7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     d7c:	defffa04 	addi	sp,sp,-24
     d80:	dc000015 	stw	r16,0(sp)
     d84:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     d88:	d1600104 	addi	r5,gp,-32764
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     d8c:	dc800215 	stw	r18,8(sp)
     d90:	dc400115 	stw	r17,4(sp)
     d94:	dfc00515 	stw	ra,20(sp)
     d98:	dd000415 	stw	r20,16(sp)
     d9c:	dcc00315 	stw	r19,12(sp)
     da0:	2023883a 	mov	r17,r4
     da4:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     da8:	0000f680 	call	f68 <alt_find_dev>
     dac:	10004a26 	beq	r2,zero,ed8 <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
     db0:	1009883a 	mov	r4,r2
     db4:	1029883a 	mov	r20,r2
     db8:	000108c0 	call	108c <alt_get_fd>
     dbc:	1027883a 	mov	r19,r2
     dc0:	1000090e 	bge	r2,zero,de8 <open+0x6c>
     dc4:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
     dc8:	9809883a 	mov	r4,r19
     dcc:	0000f040 	call	f04 <alt_release_fd>
     dd0:	d0a00517 	ldw	r2,-32748(gp)
     dd4:	10004726 	beq	r2,zero,ef4 <open+0x178>
     dd8:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
     ddc:	14000015 	stw	r16,0(r2)
    return -1;
     de0:	00bfffc4 	movi	r2,-1
     de4:	00003206 	br	eb0 <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     de8:	01400304 	movi	r5,12
     dec:	9809883a 	mov	r4,r19
     df0:	00006c40 	call	6c4 <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     df4:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     df8:	00c00034 	movhi	r3,0

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     dfc:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     e00:	18c6ae04 	addi	r3,r3,6840

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     e04:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     e08:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     e0c:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     e10:	d2600017 	ldw	r9,-32768(gp)
     e14:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     e18:	21400215 	stw	r5,8(r4)
     e1c:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     e20:	000b883a 	mov	r5,zero
     e24:	00000306 	br	e34 <open+0xb8>
     e28:	18c00304 	addi	r3,r3,12
     e2c:	31800304 	addi	r6,r6,12
     e30:	49401636 	bltu	r9,r5,e8c <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     e34:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     e38:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     e3c:	3a3ffa1e 	bne	r7,r8,e28 <_gp+0xffff70e8>
     e40:	30800017 	ldw	r2,0(r6)
     e44:	103ff80e 	bge	r2,zero,e28 <_gp+0xffff70e8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
     e48:	20fff726 	beq	r4,r3,e28 <_gp+0xffff70e8>
     e4c:	04000344 	movi	r16,13
     e50:	003fdd06 	br	dc8 <_gp+0xffff7088>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
     e54:	1009883a 	mov	r4,r2
     e58:	000108c0 	call	108c <alt_get_fd>
     e5c:	1027883a 	mov	r19,r2
     e60:	103fd816 	blt	r2,zero,dc4 <_gp+0xffff7084>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     e64:	9809883a 	mov	r4,r19
     e68:	01400304 	movi	r5,12
     e6c:	00006c40 	call	6c4 <__mulsi3>
     e70:	01000034 	movhi	r4,0
     e74:	2106ae04 	addi	r4,r4,6840
     e78:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
     e7c:	00900034 	movhi	r2,16384
     e80:	10bfffc4 	addi	r2,r2,-1
     e84:	8084703a 	and	r2,r16,r2
     e88:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
     e8c:	a0800317 	ldw	r2,12(r20)
     e90:	10000f26 	beq	r2,zero,ed0 <open+0x154>
     e94:	900f883a 	mov	r7,r18
     e98:	800d883a 	mov	r6,r16
     e9c:	880b883a 	mov	r5,r17
     ea0:	103ee83a 	callr	r2
     ea4:	1007883a 	mov	r3,r2
     ea8:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
     eac:	18001316 	blt	r3,zero,efc <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
     eb0:	dfc00517 	ldw	ra,20(sp)
     eb4:	dd000417 	ldw	r20,16(sp)
     eb8:	dcc00317 	ldw	r19,12(sp)
     ebc:	dc800217 	ldw	r18,8(sp)
     ec0:	dc400117 	ldw	r17,4(sp)
     ec4:	dc000017 	ldw	r16,0(sp)
     ec8:	dec00604 	addi	sp,sp,24
     ecc:	f800283a 	ret
     ed0:	9805883a 	mov	r2,r19
     ed4:	003ff606 	br	eb0 <_gp+0xffff7170>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
     ed8:	8809883a 	mov	r4,r17
     edc:	0000fe00 	call	fe0 <alt_find_file>
     ee0:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
     ee4:	103fdb1e 	bne	r2,zero,e54 <_gp+0xffff7114>
     ee8:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
     eec:	04ffffc4 	movi	r19,-1
     ef0:	003fb506 	br	dc8 <_gp+0xffff7088>
     ef4:	d0a0c004 	addi	r2,gp,-32000
     ef8:	003fb806 	br	ddc <_gp+0xffff709c>
     efc:	00e1c83a 	sub	r16,zero,r3
     f00:	003fb106 	br	dc8 <_gp+0xffff7088>

00000f04 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
     f04:	00c00084 	movi	r3,2
     f08:	1900140e 	bge	r3,r4,f5c <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     f0c:	defffd04 	addi	sp,sp,-12
     f10:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     f14:	01400304 	movi	r5,12
     f18:	04400034 	movhi	r17,0
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     f1c:	dfc00215 	stw	ra,8(sp)
     f20:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     f24:	8c46ae04 	addi	r17,r17,6840
     f28:	2021883a 	mov	r16,r4
     f2c:	00006c40 	call	6c4 <__mulsi3>
     f30:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
     f34:	01400304 	movi	r5,12
     f38:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     f3c:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
     f40:	00006c40 	call	6c4 <__mulsi3>
     f44:	8885883a 	add	r2,r17,r2
     f48:	10000015 	stw	zero,0(r2)
  }
}
     f4c:	dfc00217 	ldw	ra,8(sp)
     f50:	dc400117 	ldw	r17,4(sp)
     f54:	dc000017 	ldw	r16,0(sp)
     f58:	dec00304 	addi	sp,sp,12
     f5c:	f800283a 	ret

00000f60 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
     f60:	000170fa 	wrctl	ienable,zero
     f64:	f800283a 	ret

00000f68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     f68:	defffb04 	addi	sp,sp,-20
     f6c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
     f70:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     f74:	dc400115 	stw	r17,4(sp)
     f78:	2823883a 	mov	r17,r5
     f7c:	dcc00315 	stw	r19,12(sp)
     f80:	dfc00415 	stw	ra,16(sp)
     f84:	dc800215 	stw	r18,8(sp)
     f88:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
     f8c:	00013340 	call	1334 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     f90:	8c000b26 	beq	r17,r16,fc0 <alt_find_dev+0x58>
     f94:	14800044 	addi	r18,r2,1
     f98:	00000206 	br	fa4 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     f9c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     fa0:	8c000726 	beq	r17,r16,fc0 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     fa4:	81000217 	ldw	r4,8(r16)
     fa8:	900d883a 	mov	r6,r18
     fac:	980b883a 	mov	r5,r19
     fb0:	00012580 	call	1258 <memcmp>
     fb4:	103ff91e 	bne	r2,zero,f9c <_gp+0xffff725c>
     fb8:	8005883a 	mov	r2,r16
     fbc:	00000106 	br	fc4 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
     fc0:	0005883a 	mov	r2,zero
}
     fc4:	dfc00417 	ldw	ra,16(sp)
     fc8:	dcc00317 	ldw	r19,12(sp)
     fcc:	dc800217 	ldw	r18,8(sp)
     fd0:	dc400117 	ldw	r17,4(sp)
     fd4:	dc000017 	ldw	r16,0(sp)
     fd8:	dec00504 	addi	sp,sp,20
     fdc:	f800283a 	ret

00000fe0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     fe0:	defffa04 	addi	sp,sp,-24
     fe4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
     fe8:	d4200317 	ldw	r16,-32756(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     fec:	dd000415 	stw	r20,16(sp)
     ff0:	dfc00515 	stw	ra,20(sp)
     ff4:	dcc00315 	stw	r19,12(sp)
     ff8:	dc800215 	stw	r18,8(sp)
     ffc:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1000:	d5200304 	addi	r20,gp,-32756
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1004:	85001626 	beq	r16,r20,1060 <alt_find_file+0x80>
    1008:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    100c:	04c00bc4 	movi	r19,47
    1010:	00000806 	br	1034 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1014:	9185883a 	add	r2,r18,r6
    1018:	10800007 	ldb	r2,0(r2)
    101c:	14c00126 	beq	r2,r19,1024 <alt_find_file+0x44>
    1020:	1000021e 	bne	r2,zero,102c <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    1024:	00012580 	call	1258 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1028:	10001626 	beq	r2,zero,1084 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    102c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1030:	85000b26 	beq	r16,r20,1060 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    1034:	84400217 	ldw	r17,8(r16)
    1038:	8809883a 	mov	r4,r17
    103c:	00013340 	call	1334 <strlen>
    1040:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    1044:	8885883a 	add	r2,r17,r2
    1048:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    104c:	900b883a 	mov	r5,r18
    1050:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    1054:	14ffef1e 	bne	r2,r19,1014 <_gp+0xffff72d4>
    {
      len -= 1;
    1058:	31bfffc4 	addi	r6,r6,-1
    105c:	003fed06 	br	1014 <_gp+0xffff72d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    1060:	0005883a 	mov	r2,zero
}
    1064:	dfc00517 	ldw	ra,20(sp)
    1068:	dd000417 	ldw	r20,16(sp)
    106c:	dcc00317 	ldw	r19,12(sp)
    1070:	dc800217 	ldw	r18,8(sp)
    1074:	dc400117 	ldw	r17,4(sp)
    1078:	dc000017 	ldw	r16,0(sp)
    107c:	dec00604 	addi	sp,sp,24
    1080:	f800283a 	ret
    1084:	8005883a 	mov	r2,r16
    1088:	003ff606 	br	1064 <_gp+0xffff7324>

0000108c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    108c:	defffc04 	addi	sp,sp,-16
    1090:	dc400115 	stw	r17,4(sp)
    1094:	04400034 	movhi	r17,0
    1098:	8c46ae04 	addi	r17,r17,6840
    109c:	dc000015 	stw	r16,0(sp)
    10a0:	dfc00315 	stw	ra,12(sp)
    10a4:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    10a8:	0021883a 	mov	r16,zero
    10ac:	8805883a 	mov	r2,r17
    10b0:	01400804 	movi	r5,32
    10b4:	00000206 	br	10c0 <alt_get_fd+0x34>
    10b8:	84000044 	addi	r16,r16,1
    10bc:	81401326 	beq	r16,r5,110c <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
    10c0:	10c00017 	ldw	r3,0(r2)
    10c4:	10800304 	addi	r2,r2,12
    10c8:	183ffb1e 	bne	r3,zero,10b8 <_gp+0xffff7378>
    10cc:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
    10d0:	01400304 	movi	r5,12
    10d4:	8009883a 	mov	r4,r16
    10d8:	00006c40 	call	6c4 <__mulsi3>
    10dc:	8885883a 	add	r2,r17,r2
    10e0:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    10e4:	d0a00017 	ldw	r2,-32768(gp)
    10e8:	1400010e 	bge	r2,r16,10f0 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    10ec:	d4200015 	stw	r16,-32768(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    10f0:	8005883a 	mov	r2,r16
    10f4:	dfc00317 	ldw	ra,12(sp)
    10f8:	dc800217 	ldw	r18,8(sp)
    10fc:	dc400117 	ldw	r17,4(sp)
    1100:	dc000017 	ldw	r16,0(sp)
    1104:	dec00404 	addi	sp,sp,16
    1108:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    110c:	043ffa04 	movi	r16,-24
    1110:	003ff706 	br	10f0 <_gp+0xffff73b0>

00001114 <atexit>:
    1114:	200b883a 	mov	r5,r4
    1118:	000f883a 	mov	r7,zero
    111c:	000d883a 	mov	r6,zero
    1120:	0009883a 	mov	r4,zero
    1124:	00013a81 	jmpi	13a8 <__register_exitproc>

00001128 <exit>:
    1128:	defffe04 	addi	sp,sp,-8
    112c:	000b883a 	mov	r5,zero
    1130:	dc000015 	stw	r16,0(sp)
    1134:	dfc00115 	stw	ra,4(sp)
    1138:	2021883a 	mov	r16,r4
    113c:	00015000 	call	1500 <__call_exitprocs>
    1140:	8009883a 	mov	r4,r16
    1144:	00018440 	call	1844 <_exit>

00001148 <fputs>:
    1148:	defffd04 	addi	sp,sp,-12
    114c:	dfc00215 	stw	ra,8(sp)
    1150:	dc000115 	stw	r16,4(sp)
    1154:	d9400015 	stw	r5,0(sp)
    1158:	2021883a 	mov	r16,r4
    115c:	00013340 	call	1334 <strlen>
    1160:	100f883a 	mov	r7,r2
    1164:	00800034 	movhi	r2,0
    1168:	d9400017 	ldw	r5,0(sp)
    116c:	10875704 	addi	r2,r2,7516
    1170:	11000017 	ldw	r4,0(r2)
    1174:	00c00034 	movhi	r3,0
    1178:	18c46804 	addi	r3,r3,4512
    117c:	28c00115 	stw	r3,4(r5)
    1180:	800d883a 	mov	r6,r16
    1184:	00011a00 	call	11a0 <__sfvwrite_small_dev>
    1188:	10bfffe0 	cmpeqi	r2,r2,-1
    118c:	0085c83a 	sub	r2,zero,r2
    1190:	dfc00217 	ldw	ra,8(sp)
    1194:	dc000117 	ldw	r16,4(sp)
    1198:	dec00304 	addi	sp,sp,12
    119c:	f800283a 	ret

000011a0 <__sfvwrite_small_dev>:
    11a0:	2880000b 	ldhu	r2,0(r5)
    11a4:	1080020c 	andi	r2,r2,8
    11a8:	10002126 	beq	r2,zero,1230 <__sfvwrite_small_dev+0x90>
    11ac:	2880008f 	ldh	r2,2(r5)
    11b0:	defffa04 	addi	sp,sp,-24
    11b4:	dc000015 	stw	r16,0(sp)
    11b8:	dfc00515 	stw	ra,20(sp)
    11bc:	dd000415 	stw	r20,16(sp)
    11c0:	dcc00315 	stw	r19,12(sp)
    11c4:	dc800215 	stw	r18,8(sp)
    11c8:	dc400115 	stw	r17,4(sp)
    11cc:	2821883a 	mov	r16,r5
    11d0:	10001216 	blt	r2,zero,121c <__sfvwrite_small_dev+0x7c>
    11d4:	2027883a 	mov	r19,r4
    11d8:	3025883a 	mov	r18,r6
    11dc:	3823883a 	mov	r17,r7
    11e0:	05010004 	movi	r20,1024
    11e4:	04400b0e 	bge	zero,r17,1214 <__sfvwrite_small_dev+0x74>
    11e8:	880f883a 	mov	r7,r17
    11ec:	a440010e 	bge	r20,r17,11f4 <__sfvwrite_small_dev+0x54>
    11f0:	01c10004 	movi	r7,1024
    11f4:	8140008f 	ldh	r5,2(r16)
    11f8:	900d883a 	mov	r6,r18
    11fc:	9809883a 	mov	r4,r19
    1200:	00013500 	call	1350 <_write_r>
    1204:	0080050e 	bge	zero,r2,121c <__sfvwrite_small_dev+0x7c>
    1208:	88a3c83a 	sub	r17,r17,r2
    120c:	90a5883a 	add	r18,r18,r2
    1210:	003ff406 	br	11e4 <_gp+0xffff74a4>
    1214:	0005883a 	mov	r2,zero
    1218:	00000706 	br	1238 <__sfvwrite_small_dev+0x98>
    121c:	8080000b 	ldhu	r2,0(r16)
    1220:	10801014 	ori	r2,r2,64
    1224:	8080000d 	sth	r2,0(r16)
    1228:	00bfffc4 	movi	r2,-1
    122c:	00000206 	br	1238 <__sfvwrite_small_dev+0x98>
    1230:	00bfffc4 	movi	r2,-1
    1234:	f800283a 	ret
    1238:	dfc00517 	ldw	ra,20(sp)
    123c:	dd000417 	ldw	r20,16(sp)
    1240:	dcc00317 	ldw	r19,12(sp)
    1244:	dc800217 	ldw	r18,8(sp)
    1248:	dc400117 	ldw	r17,4(sp)
    124c:	dc000017 	ldw	r16,0(sp)
    1250:	dec00604 	addi	sp,sp,24
    1254:	f800283a 	ret

00001258 <memcmp>:
    1258:	218d883a 	add	r6,r4,r6
    125c:	21800826 	beq	r4,r6,1280 <memcmp+0x28>
    1260:	20800003 	ldbu	r2,0(r4)
    1264:	28c00003 	ldbu	r3,0(r5)
    1268:	10c00226 	beq	r2,r3,1274 <memcmp+0x1c>
    126c:	10c5c83a 	sub	r2,r2,r3
    1270:	f800283a 	ret
    1274:	21000044 	addi	r4,r4,1
    1278:	29400044 	addi	r5,r5,1
    127c:	003ff706 	br	125c <_gp+0xffff751c>
    1280:	0005883a 	mov	r2,zero
    1284:	f800283a 	ret

00001288 <putc>:
    1288:	defffd04 	addi	sp,sp,-12
    128c:	00800034 	movhi	r2,0
    1290:	dc000115 	stw	r16,4(sp)
    1294:	dfc00215 	stw	ra,8(sp)
    1298:	10846804 	addi	r2,r2,4512
    129c:	28800115 	stw	r2,4(r5)
    12a0:	00800034 	movhi	r2,0
    12a4:	10875704 	addi	r2,r2,7516
    12a8:	d9000005 	stb	r4,0(sp)
    12ac:	2021883a 	mov	r16,r4
    12b0:	11000017 	ldw	r4,0(r2)
    12b4:	01c00044 	movi	r7,1
    12b8:	d80d883a 	mov	r6,sp
    12bc:	00011a00 	call	11a0 <__sfvwrite_small_dev>
    12c0:	00ffffc4 	movi	r3,-1
    12c4:	10c00126 	beq	r2,r3,12cc <putc+0x44>
    12c8:	8005883a 	mov	r2,r16
    12cc:	dfc00217 	ldw	ra,8(sp)
    12d0:	dc000117 	ldw	r16,4(sp)
    12d4:	dec00304 	addi	sp,sp,12
    12d8:	f800283a 	ret

000012dc <_putc_r>:
    12dc:	defffd04 	addi	sp,sp,-12
    12e0:	00800034 	movhi	r2,0
    12e4:	dc000115 	stw	r16,4(sp)
    12e8:	dfc00215 	stw	ra,8(sp)
    12ec:	10846804 	addi	r2,r2,4512
    12f0:	30800115 	stw	r2,4(r6)
    12f4:	00800034 	movhi	r2,0
    12f8:	10875704 	addi	r2,r2,7516
    12fc:	11000017 	ldw	r4,0(r2)
    1300:	2821883a 	mov	r16,r5
    1304:	01c00044 	movi	r7,1
    1308:	300b883a 	mov	r5,r6
    130c:	d80d883a 	mov	r6,sp
    1310:	dc000005 	stb	r16,0(sp)
    1314:	00011a00 	call	11a0 <__sfvwrite_small_dev>
    1318:	00ffffc4 	movi	r3,-1
    131c:	10c00126 	beq	r2,r3,1324 <_putc_r+0x48>
    1320:	8005883a 	mov	r2,r16
    1324:	dfc00217 	ldw	ra,8(sp)
    1328:	dc000117 	ldw	r16,4(sp)
    132c:	dec00304 	addi	sp,sp,12
    1330:	f800283a 	ret

00001334 <strlen>:
    1334:	2005883a 	mov	r2,r4
    1338:	10c00007 	ldb	r3,0(r2)
    133c:	18000226 	beq	r3,zero,1348 <strlen+0x14>
    1340:	10800044 	addi	r2,r2,1
    1344:	003ffc06 	br	1338 <_gp+0xffff75f8>
    1348:	1105c83a 	sub	r2,r2,r4
    134c:	f800283a 	ret

00001350 <_write_r>:
    1350:	defffd04 	addi	sp,sp,-12
    1354:	dc000015 	stw	r16,0(sp)
    1358:	04000034 	movhi	r16,0
    135c:	dc400115 	stw	r17,4(sp)
    1360:	84081004 	addi	r16,r16,8256
    1364:	2023883a 	mov	r17,r4
    1368:	2809883a 	mov	r4,r5
    136c:	300b883a 	mov	r5,r6
    1370:	380d883a 	mov	r6,r7
    1374:	dfc00215 	stw	ra,8(sp)
    1378:	80000015 	stw	zero,0(r16)
    137c:	00018580 	call	1858 <write>
    1380:	00ffffc4 	movi	r3,-1
    1384:	10c0031e 	bne	r2,r3,1394 <_write_r+0x44>
    1388:	80c00017 	ldw	r3,0(r16)
    138c:	18000126 	beq	r3,zero,1394 <_write_r+0x44>
    1390:	88c00015 	stw	r3,0(r17)
    1394:	dfc00217 	ldw	ra,8(sp)
    1398:	dc400117 	ldw	r17,4(sp)
    139c:	dc000017 	ldw	r16,0(sp)
    13a0:	dec00304 	addi	sp,sp,12
    13a4:	f800283a 	ret

000013a8 <__register_exitproc>:
    13a8:	00800034 	movhi	r2,0
    13ac:	10875604 	addi	r2,r2,7512
    13b0:	10c00017 	ldw	r3,0(r2)
    13b4:	defff904 	addi	sp,sp,-28
    13b8:	dc000015 	stw	r16,0(sp)
    13bc:	1c000c17 	ldw	r16,48(r3)
    13c0:	dd400515 	stw	r21,20(sp)
    13c4:	dd000415 	stw	r20,16(sp)
    13c8:	dcc00315 	stw	r19,12(sp)
    13cc:	dc800215 	stw	r18,8(sp)
    13d0:	dc400115 	stw	r17,4(sp)
    13d4:	dfc00615 	stw	ra,24(sp)
    13d8:	202b883a 	mov	r21,r4
    13dc:	2823883a 	mov	r17,r5
    13e0:	3027883a 	mov	r19,r6
    13e4:	3825883a 	mov	r18,r7
    13e8:	1029883a 	mov	r20,r2
    13ec:	8000021e 	bne	r16,zero,13f8 <__register_exitproc+0x50>
    13f0:	1c000d04 	addi	r16,r3,52
    13f4:	1c000c15 	stw	r16,48(r3)
    13f8:	80800117 	ldw	r2,4(r16)
    13fc:	00c007c4 	movi	r3,31
    1400:	1880110e 	bge	r3,r2,1448 <__register_exitproc+0xa0>
    1404:	00800034 	movhi	r2,0
    1408:	10800004 	addi	r2,r2,0
    140c:	1000021e 	bne	r2,zero,1418 <__register_exitproc+0x70>
    1410:	00bfffc4 	movi	r2,-1
    1414:	00003106 	br	14dc <__register_exitproc+0x134>
    1418:	01002304 	movi	r4,140
    141c:	00000000 	call	0 <__reset>
    1420:	1021883a 	mov	r16,r2
    1424:	103ffa26 	beq	r2,zero,1410 <_gp+0xffff76d0>
    1428:	10000115 	stw	zero,4(r2)
    142c:	a0800017 	ldw	r2,0(r20)
    1430:	10c00c17 	ldw	r3,48(r2)
    1434:	80c00015 	stw	r3,0(r16)
    1438:	14000c15 	stw	r16,48(r2)
    143c:	80002215 	stw	zero,136(r16)
    1440:	a8001d26 	beq	r21,zero,14b8 <__register_exitproc+0x110>
    1444:	00000606 	br	1460 <__register_exitproc+0xb8>
    1448:	a8001b26 	beq	r21,zero,14b8 <__register_exitproc+0x110>
    144c:	80802217 	ldw	r2,136(r16)
    1450:	1000091e 	bne	r2,zero,1478 <__register_exitproc+0xd0>
    1454:	00800034 	movhi	r2,0
    1458:	10800004 	addi	r2,r2,0
    145c:	103fec26 	beq	r2,zero,1410 <_gp+0xffff76d0>
    1460:	01004204 	movi	r4,264
    1464:	00000000 	call	0 <__reset>
    1468:	103fe926 	beq	r2,zero,1410 <_gp+0xffff76d0>
    146c:	10004015 	stw	zero,256(r2)
    1470:	10004115 	stw	zero,260(r2)
    1474:	80802215 	stw	r2,136(r16)
    1478:	81400117 	ldw	r5,4(r16)
    147c:	01000044 	movi	r4,1
    1480:	2947883a 	add	r3,r5,r5
    1484:	18c7883a 	add	r3,r3,r3
    1488:	10c7883a 	add	r3,r2,r3
    148c:	1cc00015 	stw	r19,0(r3)
    1490:	2148983a 	sll	r4,r4,r5
    1494:	11404017 	ldw	r5,256(r2)
    1498:	290ab03a 	or	r5,r5,r4
    149c:	11404015 	stw	r5,256(r2)
    14a0:	1c802015 	stw	r18,128(r3)
    14a4:	00c00084 	movi	r3,2
    14a8:	a8c0031e 	bne	r21,r3,14b8 <__register_exitproc+0x110>
    14ac:	10c04117 	ldw	r3,260(r2)
    14b0:	1908b03a 	or	r4,r3,r4
    14b4:	11004115 	stw	r4,260(r2)
    14b8:	80800117 	ldw	r2,4(r16)
    14bc:	10c00044 	addi	r3,r2,1
    14c0:	10800084 	addi	r2,r2,2
    14c4:	1085883a 	add	r2,r2,r2
    14c8:	1085883a 	add	r2,r2,r2
    14cc:	80c00115 	stw	r3,4(r16)
    14d0:	80a1883a 	add	r16,r16,r2
    14d4:	84400015 	stw	r17,0(r16)
    14d8:	0005883a 	mov	r2,zero
    14dc:	dfc00617 	ldw	ra,24(sp)
    14e0:	dd400517 	ldw	r21,20(sp)
    14e4:	dd000417 	ldw	r20,16(sp)
    14e8:	dcc00317 	ldw	r19,12(sp)
    14ec:	dc800217 	ldw	r18,8(sp)
    14f0:	dc400117 	ldw	r17,4(sp)
    14f4:	dc000017 	ldw	r16,0(sp)
    14f8:	dec00704 	addi	sp,sp,28
    14fc:	f800283a 	ret

00001500 <__call_exitprocs>:
    1500:	defff504 	addi	sp,sp,-44
    1504:	dd000515 	stw	r20,20(sp)
    1508:	05000034 	movhi	r20,0
    150c:	dc800315 	stw	r18,12(sp)
    1510:	dfc00a15 	stw	ra,40(sp)
    1514:	df000915 	stw	fp,36(sp)
    1518:	ddc00815 	stw	r23,32(sp)
    151c:	dd800715 	stw	r22,28(sp)
    1520:	dd400615 	stw	r21,24(sp)
    1524:	dcc00415 	stw	r19,16(sp)
    1528:	dc400215 	stw	r17,8(sp)
    152c:	dc000115 	stw	r16,4(sp)
    1530:	d9000015 	stw	r4,0(sp)
    1534:	2825883a 	mov	r18,r5
    1538:	a5075604 	addi	r20,r20,7512
    153c:	a4400017 	ldw	r17,0(r20)
    1540:	8cc00c17 	ldw	r19,48(r17)
    1544:	8c400c04 	addi	r17,r17,48
    1548:	98004526 	beq	r19,zero,1660 <__call_exitprocs+0x160>
    154c:	9c000117 	ldw	r16,4(r19)
    1550:	00900034 	movhi	r2,16384
    1554:	10bfffc4 	addi	r2,r2,-1
    1558:	9d402217 	ldw	r21,136(r19)
    155c:	85bfffc4 	addi	r22,r16,-1
    1560:	80a1883a 	add	r16,r16,r2
    1564:	8421883a 	add	r16,r16,r16
    1568:	8421883a 	add	r16,r16,r16
    156c:	ac2f883a 	add	r23,r21,r16
    1570:	84000204 	addi	r16,r16,8
    1574:	9c21883a 	add	r16,r19,r16
    1578:	b0002716 	blt	r22,zero,1618 <__call_exitprocs+0x118>
    157c:	90000726 	beq	r18,zero,159c <__call_exitprocs+0x9c>
    1580:	a800041e 	bne	r21,zero,1594 <__call_exitprocs+0x94>
    1584:	b5bfffc4 	addi	r22,r22,-1
    1588:	bdffff04 	addi	r23,r23,-4
    158c:	843fff04 	addi	r16,r16,-4
    1590:	003ff906 	br	1578 <_gp+0xffff7838>
    1594:	b9002017 	ldw	r4,128(r23)
    1598:	913ffa1e 	bne	r18,r4,1584 <_gp+0xffff7844>
    159c:	99000117 	ldw	r4,4(r19)
    15a0:	82000017 	ldw	r8,0(r16)
    15a4:	213fffc4 	addi	r4,r4,-1
    15a8:	b100021e 	bne	r22,r4,15b4 <__call_exitprocs+0xb4>
    15ac:	9d800115 	stw	r22,4(r19)
    15b0:	00000106 	br	15b8 <__call_exitprocs+0xb8>
    15b4:	80000015 	stw	zero,0(r16)
    15b8:	403ff226 	beq	r8,zero,1584 <_gp+0xffff7844>
    15bc:	9f000117 	ldw	fp,4(r19)
    15c0:	a8000526 	beq	r21,zero,15d8 <__call_exitprocs+0xd8>
    15c4:	00800044 	movi	r2,1
    15c8:	1592983a 	sll	r9,r2,r22
    15cc:	a9404017 	ldw	r5,256(r21)
    15d0:	494a703a 	and	r5,r9,r5
    15d4:	2800021e 	bne	r5,zero,15e0 <__call_exitprocs+0xe0>
    15d8:	403ee83a 	callr	r8
    15dc:	00000906 	br	1604 <__call_exitprocs+0x104>
    15e0:	a9004117 	ldw	r4,260(r21)
    15e4:	4908703a 	and	r4,r9,r4
    15e8:	2000041e 	bne	r4,zero,15fc <__call_exitprocs+0xfc>
    15ec:	b9400017 	ldw	r5,0(r23)
    15f0:	d9000017 	ldw	r4,0(sp)
    15f4:	403ee83a 	callr	r8
    15f8:	00000206 	br	1604 <__call_exitprocs+0x104>
    15fc:	b9000017 	ldw	r4,0(r23)
    1600:	403ee83a 	callr	r8
    1604:	99000117 	ldw	r4,4(r19)
    1608:	e13fcc1e 	bne	fp,r4,153c <_gp+0xffff77fc>
    160c:	89000017 	ldw	r4,0(r17)
    1610:	993fdc26 	beq	r19,r4,1584 <_gp+0xffff7844>
    1614:	003fc906 	br	153c <_gp+0xffff77fc>
    1618:	00800034 	movhi	r2,0
    161c:	10800004 	addi	r2,r2,0
    1620:	10000f26 	beq	r2,zero,1660 <__call_exitprocs+0x160>
    1624:	99400117 	ldw	r5,4(r19)
    1628:	99000017 	ldw	r4,0(r19)
    162c:	2800091e 	bne	r5,zero,1654 <__call_exitprocs+0x154>
    1630:	20000826 	beq	r4,zero,1654 <__call_exitprocs+0x154>
    1634:	89000015 	stw	r4,0(r17)
    1638:	a8000226 	beq	r21,zero,1644 <__call_exitprocs+0x144>
    163c:	a809883a 	mov	r4,r21
    1640:	00000000 	call	0 <__reset>
    1644:	9809883a 	mov	r4,r19
    1648:	00000000 	call	0 <__reset>
    164c:	8cc00017 	ldw	r19,0(r17)
    1650:	003fbd06 	br	1548 <_gp+0xffff7808>
    1654:	9823883a 	mov	r17,r19
    1658:	2027883a 	mov	r19,r4
    165c:	003fba06 	br	1548 <_gp+0xffff7808>
    1660:	dfc00a17 	ldw	ra,40(sp)
    1664:	df000917 	ldw	fp,36(sp)
    1668:	ddc00817 	ldw	r23,32(sp)
    166c:	dd800717 	ldw	r22,28(sp)
    1670:	dd400617 	ldw	r21,24(sp)
    1674:	dd000517 	ldw	r20,20(sp)
    1678:	dcc00417 	ldw	r19,16(sp)
    167c:	dc800317 	ldw	r18,12(sp)
    1680:	dc400217 	ldw	r17,8(sp)
    1684:	dc000117 	ldw	r16,4(sp)
    1688:	dec00b04 	addi	sp,sp,44
    168c:	f800283a 	ret

00001690 <__divsi3>:
    1690:	20001b16 	blt	r4,zero,1700 <__divsi3+0x70>
    1694:	000f883a 	mov	r7,zero
    1698:	28001616 	blt	r5,zero,16f4 <__divsi3+0x64>
    169c:	200d883a 	mov	r6,r4
    16a0:	29001a2e 	bgeu	r5,r4,170c <__divsi3+0x7c>
    16a4:	00800804 	movi	r2,32
    16a8:	00c00044 	movi	r3,1
    16ac:	00000106 	br	16b4 <__divsi3+0x24>
    16b0:	10000d26 	beq	r2,zero,16e8 <__divsi3+0x58>
    16b4:	294b883a 	add	r5,r5,r5
    16b8:	10bfffc4 	addi	r2,r2,-1
    16bc:	18c7883a 	add	r3,r3,r3
    16c0:	293ffb36 	bltu	r5,r4,16b0 <_gp+0xffff7970>
    16c4:	0005883a 	mov	r2,zero
    16c8:	18000726 	beq	r3,zero,16e8 <__divsi3+0x58>
    16cc:	0005883a 	mov	r2,zero
    16d0:	31400236 	bltu	r6,r5,16dc <__divsi3+0x4c>
    16d4:	314dc83a 	sub	r6,r6,r5
    16d8:	10c4b03a 	or	r2,r2,r3
    16dc:	1806d07a 	srli	r3,r3,1
    16e0:	280ad07a 	srli	r5,r5,1
    16e4:	183ffa1e 	bne	r3,zero,16d0 <_gp+0xffff7990>
    16e8:	38000126 	beq	r7,zero,16f0 <__divsi3+0x60>
    16ec:	0085c83a 	sub	r2,zero,r2
    16f0:	f800283a 	ret
    16f4:	014bc83a 	sub	r5,zero,r5
    16f8:	39c0005c 	xori	r7,r7,1
    16fc:	003fe706 	br	169c <_gp+0xffff795c>
    1700:	0109c83a 	sub	r4,zero,r4
    1704:	01c00044 	movi	r7,1
    1708:	003fe306 	br	1698 <_gp+0xffff7958>
    170c:	00c00044 	movi	r3,1
    1710:	003fee06 	br	16cc <_gp+0xffff798c>

00001714 <__modsi3>:
    1714:	20001716 	blt	r4,zero,1774 <__modsi3+0x60>
    1718:	000f883a 	mov	r7,zero
    171c:	2005883a 	mov	r2,r4
    1720:	28001216 	blt	r5,zero,176c <__modsi3+0x58>
    1724:	2900162e 	bgeu	r5,r4,1780 <__modsi3+0x6c>
    1728:	01800804 	movi	r6,32
    172c:	00c00044 	movi	r3,1
    1730:	00000106 	br	1738 <__modsi3+0x24>
    1734:	30000a26 	beq	r6,zero,1760 <__modsi3+0x4c>
    1738:	294b883a 	add	r5,r5,r5
    173c:	31bfffc4 	addi	r6,r6,-1
    1740:	18c7883a 	add	r3,r3,r3
    1744:	293ffb36 	bltu	r5,r4,1734 <_gp+0xffff79f4>
    1748:	18000526 	beq	r3,zero,1760 <__modsi3+0x4c>
    174c:	1806d07a 	srli	r3,r3,1
    1750:	11400136 	bltu	r2,r5,1758 <__modsi3+0x44>
    1754:	1145c83a 	sub	r2,r2,r5
    1758:	280ad07a 	srli	r5,r5,1
    175c:	183ffb1e 	bne	r3,zero,174c <_gp+0xffff7a0c>
    1760:	38000126 	beq	r7,zero,1768 <__modsi3+0x54>
    1764:	0085c83a 	sub	r2,zero,r2
    1768:	f800283a 	ret
    176c:	014bc83a 	sub	r5,zero,r5
    1770:	003fec06 	br	1724 <_gp+0xffff79e4>
    1774:	0109c83a 	sub	r4,zero,r4
    1778:	01c00044 	movi	r7,1
    177c:	003fe706 	br	171c <_gp+0xffff79dc>
    1780:	00c00044 	movi	r3,1
    1784:	003ff106 	br	174c <_gp+0xffff7a0c>

00001788 <__udivsi3>:
    1788:	200d883a 	mov	r6,r4
    178c:	2900152e 	bgeu	r5,r4,17e4 <__udivsi3+0x5c>
    1790:	28001416 	blt	r5,zero,17e4 <__udivsi3+0x5c>
    1794:	00800804 	movi	r2,32
    1798:	00c00044 	movi	r3,1
    179c:	00000206 	br	17a8 <__udivsi3+0x20>
    17a0:	10000e26 	beq	r2,zero,17dc <__udivsi3+0x54>
    17a4:	28000516 	blt	r5,zero,17bc <__udivsi3+0x34>
    17a8:	294b883a 	add	r5,r5,r5
    17ac:	10bfffc4 	addi	r2,r2,-1
    17b0:	18c7883a 	add	r3,r3,r3
    17b4:	293ffa36 	bltu	r5,r4,17a0 <_gp+0xffff7a60>
    17b8:	18000826 	beq	r3,zero,17dc <__udivsi3+0x54>
    17bc:	0005883a 	mov	r2,zero
    17c0:	31400236 	bltu	r6,r5,17cc <__udivsi3+0x44>
    17c4:	314dc83a 	sub	r6,r6,r5
    17c8:	10c4b03a 	or	r2,r2,r3
    17cc:	1806d07a 	srli	r3,r3,1
    17d0:	280ad07a 	srli	r5,r5,1
    17d4:	183ffa1e 	bne	r3,zero,17c0 <_gp+0xffff7a80>
    17d8:	f800283a 	ret
    17dc:	0005883a 	mov	r2,zero
    17e0:	f800283a 	ret
    17e4:	00c00044 	movi	r3,1
    17e8:	003ff406 	br	17bc <_gp+0xffff7a7c>

000017ec <__umodsi3>:
    17ec:	2005883a 	mov	r2,r4
    17f0:	2900122e 	bgeu	r5,r4,183c <__umodsi3+0x50>
    17f4:	28001116 	blt	r5,zero,183c <__umodsi3+0x50>
    17f8:	01800804 	movi	r6,32
    17fc:	00c00044 	movi	r3,1
    1800:	00000206 	br	180c <__umodsi3+0x20>
    1804:	30000c26 	beq	r6,zero,1838 <__umodsi3+0x4c>
    1808:	28000516 	blt	r5,zero,1820 <__umodsi3+0x34>
    180c:	294b883a 	add	r5,r5,r5
    1810:	31bfffc4 	addi	r6,r6,-1
    1814:	18c7883a 	add	r3,r3,r3
    1818:	293ffa36 	bltu	r5,r4,1804 <_gp+0xffff7ac4>
    181c:	18000626 	beq	r3,zero,1838 <__umodsi3+0x4c>
    1820:	1806d07a 	srli	r3,r3,1
    1824:	11400136 	bltu	r2,r5,182c <__umodsi3+0x40>
    1828:	1145c83a 	sub	r2,r2,r5
    182c:	280ad07a 	srli	r5,r5,1
    1830:	183ffb1e 	bne	r3,zero,1820 <_gp+0xffff7ae0>
    1834:	f800283a 	ret
    1838:	f800283a 	ret
    183c:	00c00044 	movi	r3,1
    1840:	003ff706 	br	1820 <_gp+0xffff7ae0>

00001844 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1844:	20000226 	beq	r4,zero,1850 <_exit+0xc>
    ALT_SIM_FAIL();
    1848:	002af070 	cmpltui	zero,zero,43969
    184c:	003fff06 	br	184c <_gp+0xffff7b0c>
  } else {
    ALT_SIM_PASS();
    1850:	002af0b0 	cmpltui	zero,zero,43970
    1854:	003ffd06 	br	184c <_gp+0xffff7b0c>

00001858 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1858:	defffa04 	addi	sp,sp,-24
    185c:	dfc00515 	stw	ra,20(sp)
    1860:	dd000415 	stw	r20,16(sp)
    1864:	dcc00315 	stw	r19,12(sp)
    1868:	dc800215 	stw	r18,8(sp)
    186c:	dc400115 	stw	r17,4(sp)
    1870:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1874:	20003116 	blt	r4,zero,193c <write+0xe4>
    1878:	2827883a 	mov	r19,r5
    187c:	04000034 	movhi	r16,0
    1880:	01400304 	movi	r5,12
    1884:	2025883a 	mov	r18,r4
    1888:	3029883a 	mov	r20,r6
    188c:	8406ae04 	addi	r16,r16,6840
    1890:	00006c40 	call	6c4 <__mulsi3>
    1894:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    1898:	88002826 	beq	r17,zero,193c <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    189c:	88800217 	ldw	r2,8(r17)
    18a0:	108000cc 	andi	r2,r2,3
    18a4:	10001526 	beq	r2,zero,18fc <write+0xa4>
    18a8:	01400304 	movi	r5,12
    18ac:	9009883a 	mov	r4,r18
    18b0:	00006c40 	call	6c4 <__mulsi3>
    18b4:	8085883a 	add	r2,r16,r2
    18b8:	10800017 	ldw	r2,0(r2)
    18bc:	10800617 	ldw	r2,24(r2)
    18c0:	10000e26 	beq	r2,zero,18fc <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    18c4:	a00d883a 	mov	r6,r20
    18c8:	980b883a 	mov	r5,r19
    18cc:	8809883a 	mov	r4,r17
    18d0:	103ee83a 	callr	r2
    18d4:	1021883a 	mov	r16,r2
    18d8:	10001116 	blt	r2,zero,1920 <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    18dc:	dfc00517 	ldw	ra,20(sp)
    18e0:	dd000417 	ldw	r20,16(sp)
    18e4:	dcc00317 	ldw	r19,12(sp)
    18e8:	dc800217 	ldw	r18,8(sp)
    18ec:	dc400117 	ldw	r17,4(sp)
    18f0:	dc000017 	ldw	r16,0(sp)
    18f4:	dec00604 	addi	sp,sp,24
    18f8:	f800283a 	ret
    18fc:	d0a00517 	ldw	r2,-32748(gp)
    1900:	10000526 	beq	r2,zero,1918 <write+0xc0>
    1904:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    1908:	00c00344 	movi	r3,13
    190c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    1910:	00bfffc4 	movi	r2,-1
    1914:	003ff106 	br	18dc <_gp+0xffff7b9c>
    1918:	d0a0c004 	addi	r2,gp,-32000
    191c:	003ffa06 	br	1908 <_gp+0xffff7bc8>
    1920:	d0a00517 	ldw	r2,-32748(gp)
    1924:	10000c26 	beq	r2,zero,1958 <write+0x100>
    1928:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    192c:	0421c83a 	sub	r16,zero,r16
    1930:	14000015 	stw	r16,0(r2)
        return -1;
    1934:	00bfffc4 	movi	r2,-1
    1938:	003fe806 	br	18dc <_gp+0xffff7b9c>
    193c:	d0a00517 	ldw	r2,-32748(gp)
    1940:	10000726 	beq	r2,zero,1960 <write+0x108>
    1944:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    1948:	00c01444 	movi	r3,81
    194c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    1950:	00bfffc4 	movi	r2,-1
    1954:	003fe106 	br	18dc <_gp+0xffff7b9c>
    1958:	d0a0c004 	addi	r2,gp,-32000
    195c:	003ff306 	br	192c <_gp+0xffff7bec>
    1960:	d0a0c004 	addi	r2,gp,-32000
    1964:	003ff806 	br	1948 <_gp+0xffff7c08>
