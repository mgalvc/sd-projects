
leds_controller.elf:     file format elf32-littlenios2
leds_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000011bc memsz 0x000011bc flags r-x
    LOAD off    0x000021dc vaddr 0x000011dc paddr 0x000014b0 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002784 vaddr 0x00001784 paddr 0x00001784 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000024b0  2**0
                  CONTENTS
  2 .text         00001174  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00001194  00001194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  000011dc  000014b0  000021dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00001784  00001784  00002784  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00001794  00001794  000024b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000490  00000000  00000000  000024d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005206  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fc5  00000000  00000000  00007b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000227b  00000000  00000000  00009b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000700  00000000  00000000  0000bdb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000013b6  00000000  00000000  0000c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015cd  00000000  00000000  0000d866  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000ee34  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f8  00000000  00000000  0000ee78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000105ad  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000105b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000105b6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000105b7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000105bb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000105bf  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  000105c3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  000105c7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00047c09  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00001194 l    d  .rodata	00000000 .rodata
000011dc l    d  .rwdata	00000000 .rwdata
00001784 l    d  .bss	00000000 .bss
00001794 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../leds_controller_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000011dc l     O .rwdata	0000002c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000664 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000007a4 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000013b0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000003bc g     F .text	00000060 alt_main
000014b0 g       *ABS*	00000000 __flash_rwdata_start
00000a88 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001790 g     O .bss	00000004 errno
00001788 g     O .bss	00000004 alt_argv
00009490 g       *ABS*	00000000 _gp
0000041c g     F .text	00000004 usleep
00001208 g     O .rwdata	00000180 alt_fd_list
00000a90 g     F .text	00000078 alt_find_dev
00000280 g     F .text	00000028 memcpy
00000830 g     F .text	00000074 alt_io_redirect
00001194 g       *ABS*	00000000 __DTOR_END__
00000470 g     F .text	00000074 altera_avalon_jtag_uart_read
0000109c g     F .text	00000064 .hidden __udivsi3
00001490 g     O .rwdata	00000004 alt_max_fd
000014a8 g     O .rwdata	00000004 _global_impure_ptr
00001794 g       *ABS*	00000000 __bss_end
0000005c g     F .text	00000048 enable
000000e4 g     F .text	00000024 write_text
00001388 g     O .rwdata	00000028 alt_dev_null
00000660 g     F .text	00000004 alt_dcache_flush_all
000014b0 g       *ABS*	00000000 __ram_rwdata_end
00001494 g     O .rwdata	00000008 alt_dev_list
000011dc g       *ABS*	00000000 __ram_rodata_end
00001100 g     F .text	00000058 .hidden __umodsi3
00001794 g       *ABS*	00000000 end
00001194 g       *ABS*	00000000 __CTOR_LIST__
00002000 g       *ABS*	00000000 __alt_stack_pointer
000004e4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000e14 g     F .text	00000190 __call_exitprocs
00000020 g     F .text	0000003c _start
00000440 g     F .text	00000010 alt_sys_init
00000cbc g     F .text	00000158 __register_exitproc
00001158 g     F .text	00000028 .hidden __mulsi3
000011dc g       *ABS*	00000000 __ram_rwdata_start
00001194 g       *ABS*	00000000 __ram_rodata_start
00000450 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00000bb4 g     F .text	00000088 alt_get_fd
00000518 g     F .text	00000088 alt_busy_sleep
000000a4 g     F .text	00000040 clear_display
00000c70 g     F .text	00000030 memcmp
00001794 g       *ABS*	00000000 __alt_stack_base
00000b08 g     F .text	000000ac alt_find_file
0000066c g     F .text	0000006c alt_dev_llist_insert
00001784 g       *ABS*	00000000 __bss_start
00000200 g     F .text	00000080 main
00001784 g     O .bss	00000004 alt_envp
00000460 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
000014a4 g     O .rwdata	00000004 alt_errno
00000fa4 g     F .text	00000084 .hidden __divsi3
00001194 g       *ABS*	00000000 __CTOR_END__
00001194 g       *ABS*	00000000 __flash_rodata_start
00001194 g       *ABS*	00000000 __DTOR_LIST__
00000420 g     F .text	00000020 alt_irq_init
00000a2c g     F .text	0000005c alt_release_fd
00000c3c g     F .text	00000014 atexit
000014ac g     O .rwdata	00000004 _impure_ptr
0000178c g     O .bss	00000004 alt_argc
0000073c g     F .text	00000064 _do_dtors
0000149c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000014b0 g       *ABS*	00000000 _edata
00001794 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000000 g       *ABS*	00000000 __alt_mem_memory
00000c50 g     F .text	00000020 exit
00001028 g     F .text	00000074 .hidden __modsi3
00000108 g     F .text	000000f8 init_lcd
00002000 g       *ABS*	00000000 __alt_data_end
00001180 g     F .text	00000014 _exit
00000ca0 g     F .text	0000001c strlen
000008a4 g     F .text	00000188 open
000007a0 g     F .text	00000004 alt_icache_flush_all
000006d8 g     F .text	00000064 _do_ctors
000005a0 g     F .text	000000c0 close
000002a8 g     F .text	00000114 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a52414 	ori	gp,gp,38032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	1085e114 	ori	r2,r2,6020

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18c5e514 	ori	r3,r3,6036

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff6bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	00002a80 	call	2a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00003bc0 	call	3bc <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff6bc8>

0000005c <enable>:
#include "altera_avalon_pio_regs.h"
//#include "io.h"
#include "system.h"
#include "sys/alt_stdio.h"

void enable() {
      5c:	defffe04 	addi	sp,sp,-8
      60:	dfc00115 	stw	ra,4(sp)
      64:	df000015 	stw	fp,0(sp)
      68:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
      6c:	00c00044 	movi	r3,1
      70:	008c0004 	movi	r2,12288
      74:	10c00035 	stwio	r3,0(r2)
	usleep(200);
      78:	01003204 	movi	r4,200
      7c:	000041c0 	call	41c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
      80:	0007883a 	mov	r3,zero
      84:	008c0004 	movi	r2,12288
      88:	10c00035 	stwio	r3,0(r2)
}
      8c:	0001883a 	nop
      90:	e037883a 	mov	sp,fp
      94:	dfc00117 	ldw	ra,4(sp)
      98:	df000017 	ldw	fp,0(sp)
      9c:	dec00204 	addi	sp,sp,8
      a0:	f800283a 	ret

000000a4 <clear_display>:

void clear_display() {
      a4:	defffe04 	addi	sp,sp,-8
      a8:	dfc00115 	stw	ra,4(sp)
      ac:	df000015 	stw	fp,0(sp)
      b0:	d839883a 	mov	fp,sp
	// clear display - 00000001
	ALT_CI_LCD_DRIVER(0x1, 0);
      b4:	00800044 	movi	r2,1
      b8:	0007883a 	mov	r3,zero
      bc:	10c5c032 	custom	0,r2,r2,r3
	enable();
      c0:	000005c0 	call	5c <enable>
	usleep(3000);
      c4:	0102ee04 	movi	r4,3000
      c8:	000041c0 	call	41c <usleep>

	//IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
	//IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x1);
	//enable();
	//usleep(3000);
}
      cc:	0001883a 	nop
      d0:	e037883a 	mov	sp,fp
      d4:	dfc00117 	ldw	ra,4(sp)
      d8:	df000017 	ldw	fp,0(sp)
      dc:	dec00204 	addi	sp,sp,8
      e0:	f800283a 	ret

000000e4 <write_text>:

void write_text(char* text) {
      e4:	defffe04 	addi	sp,sp,-8
      e8:	df000115 	stw	fp,4(sp)
      ec:	df000104 	addi	fp,sp,4
      f0:	e13fff15 	stw	r4,-4(fp)
	//for (i = 0; i < 9; i++) {
		//IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
		//enable();
		//usleep(100);
	//}
}
      f4:	0001883a 	nop
      f8:	e037883a 	mov	sp,fp
      fc:	df000017 	ldw	fp,0(sp)
     100:	dec00104 	addi	sp,sp,4
     104:	f800283a 	ret

00000108 <init_lcd>:

void init_lcd() {
     108:	defffe04 	addi	sp,sp,-8
     10c:	dfc00115 	stw	ra,4(sp)
     110:	df000015 	stw	fp,0(sp)
     114:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0);
     118:	0007883a 	mov	r3,zero
     11c:	008c0404 	movi	r2,12304
     120:	10c00035 	stwio	r3,0(r2)

	// function set 3x - 00110000
	ALT_CI_LCD_DRIVER(0x30, 0);
     124:	00800c04 	movi	r2,48
     128:	0007883a 	mov	r3,zero
     12c:	10c5c032 	custom	0,r2,r2,r3
	enable();
     130:	000005c0 	call	5c <enable>
	usleep(4100);
     134:	01040104 	movi	r4,4100
     138:	000041c0 	call	41c <usleep>
	ALT_CI_LCD_DRIVER(0x30, 0);
     13c:	00800c04 	movi	r2,48
     140:	0007883a 	mov	r3,zero
     144:	10c5c032 	custom	0,r2,r2,r3
	enable();
     148:	000005c0 	call	5c <enable>
	usleep(100);
     14c:	01001904 	movi	r4,100
     150:	000041c0 	call	41c <usleep>
	ALT_CI_LCD_DRIVER(0x30, 0);
     154:	00800c04 	movi	r2,48
     158:	0007883a 	mov	r3,zero
     15c:	10c5c032 	custom	0,r2,r2,r3
	enable();
     160:	000005c0 	call	5c <enable>
	usleep(100);
     164:	01001904 	movi	r4,100
     168:	000041c0 	call	41c <usleep>

	// real function set - 00111000
	ALT_CI_LCD_DRIVER(0x38, 0);
     16c:	00800e04 	movi	r2,56
     170:	0007883a 	mov	r3,zero
     174:	10c5c032 	custom	0,r2,r2,r3
	enable();
     178:	000005c0 	call	5c <enable>
	usleep(100);
     17c:	01001904 	movi	r4,100
     180:	000041c0 	call	41c <usleep>

	// display on/off - 00001000
	ALT_CI_LCD_DRIVER(0x8, 0);
     184:	00800204 	movi	r2,8
     188:	0007883a 	mov	r3,zero
     18c:	10c5c032 	custom	0,r2,r2,r3
	enable();
     190:	000005c0 	call	5c <enable>
	usleep(100);
     194:	01001904 	movi	r4,100
     198:	000041c0 	call	41c <usleep>

	clear_display();
     19c:	00000a40 	call	a4 <clear_display>

	// entry mode - 00000110
	ALT_CI_LCD_DRIVER(0x6, 0);
     1a0:	00800184 	movi	r2,6
     1a4:	0007883a 	mov	r3,zero
     1a8:	10c5c032 	custom	0,r2,r2,r3
	enable();
     1ac:	000005c0 	call	5c <enable>
	usleep(100);
     1b0:	01001904 	movi	r4,100
     1b4:	000041c0 	call	41c <usleep>

	// display on/off - 00001110 - cursor appears and doesn't blinks
	ALT_CI_LCD_DRIVER(0xE, 0);
     1b8:	00800384 	movi	r2,14
     1bc:	0007883a 	mov	r3,zero
     1c0:	10c5c032 	custom	0,r2,r2,r3
	enable();
     1c4:	000005c0 	call	5c <enable>
	usleep(100);
     1c8:	01001904 	movi	r4,100
     1cc:	000041c0 	call	41c <usleep>

	// send some data to test - 00110000
	ALT_CI_LCD_DRIVER(0x30, 1);
     1d0:	00800c04 	movi	r2,48
     1d4:	00c00044 	movi	r3,1
     1d8:	10c5c032 	custom	0,r2,r2,r3
	enable();
     1dc:	000005c0 	call	5c <enable>
	usleep(100);
     1e0:	01001904 	movi	r4,100
     1e4:	000041c0 	call	41c <usleep>
}
     1e8:	0001883a 	nop
     1ec:	e037883a 	mov	sp,fp
     1f0:	dfc00117 	ldw	ra,4(sp)
     1f4:	df000017 	ldw	fp,0(sp)
     1f8:	dec00204 	addi	sp,sp,8
     1fc:	f800283a 	ret

00000200 <main>:

int main() {
     200:	deffeb04 	addi	sp,sp,-84
     204:	dfc01415 	stw	ra,80(sp)
     208:	df001315 	stw	fp,76(sp)
     20c:	df001304 	addi	fp,sp,76
	int outputs[] = {15, 23, 27, 29, 30};
     210:	008003c4 	movi	r2,15
     214:	e0bfef15 	stw	r2,-68(fp)
     218:	008005c4 	movi	r2,23
     21c:	e0bff015 	stw	r2,-64(fp)
     220:	008006c4 	movi	r2,27
     224:	e0bff115 	stw	r2,-60(fp)
     228:	00800744 	movi	r2,29
     22c:	e0bff215 	stw	r2,-56(fp)
     230:	00800784 	movi	r2,30
     234:	e0bff315 	stw	r2,-52(fp)
	char lcd_options[][9] = {
     238:	00800034 	movhi	r2,0
     23c:	10846504 	addi	r2,r2,4500
     240:	e0fff404 	addi	r3,fp,-48
     244:	1009883a 	mov	r4,r2
     248:	00800b44 	movi	r2,45
     24c:	100d883a 	mov	r6,r2
     250:	200b883a 	mov	r5,r4
     254:	1809883a 	mov	r4,r3
     258:	00002800 	call	280 <memcpy>
			"2 - LED B",
			"3 - LED C",
			"4 - LED D",
			"5 - LED E"
	};
	int i = 0;
     25c:	e03fed15 	stw	zero,-76(fp)
	int previous_i;
	int selected = 0;
     260:	e03fee15 	stw	zero,-72(fp)

	init_lcd();
     264:	00001080 	call	108 <init_lcd>

	return 0;
     268:	0005883a 	mov	r2,zero
}
     26c:	e037883a 	mov	sp,fp
     270:	dfc00117 	ldw	ra,4(sp)
     274:	df000017 	ldw	fp,0(sp)
     278:	dec00204 	addi	sp,sp,8
     27c:	f800283a 	ret

00000280 <memcpy>:
     280:	2005883a 	mov	r2,r4
     284:	2007883a 	mov	r3,r4
     288:	218d883a 	add	r6,r4,r6
     28c:	19800526 	beq	r3,r6,2a4 <memcpy+0x24>
     290:	29000003 	ldbu	r4,0(r5)
     294:	18c00044 	addi	r3,r3,1
     298:	29400044 	addi	r5,r5,1
     29c:	193fffc5 	stb	r4,-1(r3)
     2a0:	003ffa06 	br	28c <_gp+0xffff6dfc>
     2a4:	f800283a 	ret

000002a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     2a8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     2ac:	01800034 	movhi	r6,0
     2b0:	01c00034 	movhi	r7,0
     2b4:	dfc00015 	stw	ra,0(sp)
     2b8:	31847704 	addi	r6,r6,4572
     2bc:	39c52c04 	addi	r7,r7,5296
     2c0:	31c01026 	beq	r6,r7,304 <alt_load+0x5c>
  {
    while( to != end )
     2c4:	00800034 	movhi	r2,0
     2c8:	10852c04 	addi	r2,r2,5296
     2cc:	30800d26 	beq	r6,r2,304 <alt_load+0x5c>
     2d0:	30c00104 	addi	r3,r6,4
     2d4:	10c7c83a 	sub	r3,r2,r3
     2d8:	1806d0ba 	srli	r3,r3,2
     2dc:	0005883a 	mov	r2,zero
     2e0:	18c00044 	addi	r3,r3,1
     2e4:	18c7883a 	add	r3,r3,r3
     2e8:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     2ec:	11c9883a 	add	r4,r2,r7
     2f0:	21400017 	ldw	r5,0(r4)
     2f4:	1189883a 	add	r4,r2,r6
     2f8:	10800104 	addi	r2,r2,4
     2fc:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     300:	10fffa1e 	bne	r2,r3,2ec <_gp+0xffff6e5c>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     304:	01800034 	movhi	r6,0
     308:	01c00034 	movhi	r7,0
     30c:	31800804 	addi	r6,r6,32
     310:	39c00804 	addi	r7,r7,32
     314:	31c01026 	beq	r6,r7,358 <alt_load+0xb0>
  {
    while( to != end )
     318:	00800034 	movhi	r2,0
     31c:	10800804 	addi	r2,r2,32
     320:	30800d26 	beq	r6,r2,358 <alt_load+0xb0>
     324:	30c00104 	addi	r3,r6,4
     328:	10c7c83a 	sub	r3,r2,r3
     32c:	1806d0ba 	srli	r3,r3,2
     330:	0005883a 	mov	r2,zero
     334:	18c00044 	addi	r3,r3,1
     338:	18c7883a 	add	r3,r3,r3
     33c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     340:	11c9883a 	add	r4,r2,r7
     344:	21400017 	ldw	r5,0(r4)
     348:	1189883a 	add	r4,r2,r6
     34c:	10800104 	addi	r2,r2,4
     350:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     354:	18bffa1e 	bne	r3,r2,340 <_gp+0xffff6eb0>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     358:	01800034 	movhi	r6,0
     35c:	01c00034 	movhi	r7,0
     360:	31846504 	addi	r6,r6,4500
     364:	39c46504 	addi	r7,r7,4500
     368:	31c01026 	beq	r6,r7,3ac <alt_load+0x104>
  {
    while( to != end )
     36c:	00800034 	movhi	r2,0
     370:	10847704 	addi	r2,r2,4572
     374:	30800d26 	beq	r6,r2,3ac <alt_load+0x104>
     378:	30c00104 	addi	r3,r6,4
     37c:	10c7c83a 	sub	r3,r2,r3
     380:	1806d0ba 	srli	r3,r3,2
     384:	0005883a 	mov	r2,zero
     388:	18c00044 	addi	r3,r3,1
     38c:	18c7883a 	add	r3,r3,r3
     390:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
     394:	11c9883a 	add	r4,r2,r7
     398:	21400017 	ldw	r5,0(r4)
     39c:	1189883a 	add	r4,r2,r6
     3a0:	10800104 	addi	r2,r2,4
     3a4:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     3a8:	10fffa1e 	bne	r2,r3,394 <_gp+0xffff6f04>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     3ac:	00006600 	call	660 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
     3b0:	dfc00017 	ldw	ra,0(sp)
     3b4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
     3b8:	00007a01 	jmpi	7a0 <alt_icache_flush_all>

000003bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     3bc:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     3c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     3c4:	dfc00115 	stw	ra,4(sp)
     3c8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     3cc:	00004200 	call	420 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3d0:	00004400 	call	440 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3d4:	01800034 	movhi	r6,0
     3d8:	31847104 	addi	r6,r6,4548
     3dc:	300b883a 	mov	r5,r6
     3e0:	3009883a 	mov	r4,r6
     3e4:	00008300 	call	830 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     3e8:	00006d80 	call	6d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     3ec:	01000034 	movhi	r4,0
     3f0:	2101cf04 	addi	r4,r4,1852
     3f4:	0000c3c0 	call	c3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     3f8:	d1a0bd17 	ldw	r6,-32012(gp)
     3fc:	d160be17 	ldw	r5,-32008(gp)
     400:	d120bf17 	ldw	r4,-32004(gp)
     404:	00002000 	call	200 <main>
  close(STDOUT_FILENO);
     408:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     40c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     410:	00005a00 	call	5a0 <close>
  exit (result);
     414:	8009883a 	mov	r4,r16
     418:	0000c500 	call	c50 <exit>

0000041c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
     41c:	00005181 	jmpi	518 <alt_busy_sleep>

00000420 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     420:	deffff04 	addi	sp,sp,-4
     424:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
     428:	0000a880 	call	a88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     42c:	00800044 	movi	r2,1
     430:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     434:	dfc00017 	ldw	ra,0(sp)
     438:	dec00104 	addi	sp,sp,4
     43c:	f800283a 	ret

00000440 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     440:	01000034 	movhi	r4,0
     444:	21047704 	addi	r4,r4,4572
     448:	d1600104 	addi	r5,gp,-32764
     44c:	000066c1 	jmpi	66c <alt_dev_llist_insert>

00000450 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     450:	20800017 	ldw	r2,0(r4)
     454:	21c00217 	ldw	r7,8(r4)
     458:	11000a04 	addi	r4,r2,40
     45c:	00004701 	jmpi	470 <altera_avalon_jtag_uart_read>

00000460 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     460:	20800017 	ldw	r2,0(r4)
     464:	21c00217 	ldw	r7,8(r4)
     468:	11000a04 	addi	r4,r2,40
     46c:	00004e41 	jmpi	4e4 <altera_avalon_jtag_uart_write>

00000470 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
     470:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
     474:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
     478:	2980162e 	bgeu	r5,r6,4d4 <altera_avalon_jtag_uart_read+0x64>
     47c:	2807883a 	mov	r3,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
     480:	3a90000c 	andi	r10,r7,16384
     484:	00000306 	br	494 <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     488:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
     48c:	1180092e 	bgeu	r2,r6,4b4 <altera_avalon_jtag_uart_read+0x44>
     490:	1007883a 	mov	r3,r2
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     494:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
     498:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     49c:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
     4a0:	403ff91e 	bne	r8,zero,488 <_gp+0xffff6ff8>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
     4a4:	28c0061e 	bne	r5,r3,4c0 <altera_avalon_jtag_uart_read+0x50>
      break;
    else if(flags & O_NONBLOCK)
     4a8:	5000081e 	bne	r10,zero,4cc <altera_avalon_jtag_uart_read+0x5c>
     4ac:	2805883a 	mov	r2,r5
     4b0:	003ff706 	br	490 <_gp+0xffff7000>
      break;   
    
  }

  if (ptr != buffer)
     4b4:	28800726 	beq	r5,r2,4d4 <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
     4b8:	1145c83a 	sub	r2,r2,r5
     4bc:	f800283a 	ret
     4c0:	1805883a 	mov	r2,r3
     4c4:	1145c83a 	sub	r2,r2,r5
     4c8:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     4cc:	00bffd44 	movi	r2,-11
     4d0:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
     4d4:	39d0000c 	andi	r7,r7,16384
     4d8:	383ffc1e 	bne	r7,zero,4cc <_gp+0xffff703c>
    return -EWOULDBLOCK;
  else
    return -EIO;
     4dc:	00bffec4 	movi	r2,-5
}
     4e0:	f800283a 	ret

000004e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
     4e4:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     4e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
     4ec:	298d883a 	add	r6,r5,r6
     4f0:	39000104 	addi	r4,r7,4

  while (ptr < end)
     4f4:	2980072e 	bgeu	r5,r6,514 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
     4f8:	20c00037 	ldwio	r3,0(r4)
     4fc:	18ffffec 	andhi	r3,r3,65535
     500:	183ffd26 	beq	r3,zero,4f8 <_gp+0xffff7068>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
     504:	28c00007 	ldb	r3,0(r5)
     508:	38c00035 	stwio	r3,0(r7)
     50c:	29400044 	addi	r5,r5,1
     510:	003ff806 	br	4f4 <_gp+0xffff7064>

  return count;
}
     514:	f800283a 	ret

00000518 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     518:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     51c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     520:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     524:	dc000015 	stw	r16,0(sp)
     528:	dfc00115 	stw	ra,4(sp)
     52c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     530:	000109c0 	call	109c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     534:	10001426 	beq	r2,zero,588 <alt_busy_sleep+0x70>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     538:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     53c:	013999b4 	movhi	r4,58982
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     540:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     544:	211999c4 	addi	r4,r4,26215
     548:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     54c:	297fffc4 	addi	r5,r5,-1
     550:	283ffe1e 	bne	r5,zero,54c <_gp+0xffff70bc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     554:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     558:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     55c:	18bffb16 	blt	r3,r2,54c <_gp+0xffff70bc>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     560:	01400144 	movi	r5,5
     564:	8009883a 	mov	r4,r16
     568:	00011580 	call	1158 <__mulsi3>
     56c:	10bfffc4 	addi	r2,r2,-1
     570:	103ffe1e 	bne	r2,zero,56c <_gp+0xffff70dc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
     574:	0005883a 	mov	r2,zero
     578:	dfc00117 	ldw	ra,4(sp)
     57c:	dc000017 	ldw	r16,0(sp)
     580:	dec00204 	addi	sp,sp,8
     584:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     588:	01400144 	movi	r5,5
     58c:	8009883a 	mov	r4,r16
     590:	00011580 	call	1158 <__mulsi3>
     594:	10bfffc4 	addi	r2,r2,-1
     598:	00bffe16 	blt	zero,r2,594 <_gp+0xffff7104>
     59c:	003ff506 	br	574 <_gp+0xffff70e4>

000005a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     5a0:	defffd04 	addi	sp,sp,-12
     5a4:	dfc00215 	stw	ra,8(sp)
     5a8:	dc400115 	stw	r17,4(sp)
     5ac:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     5b0:	20002016 	blt	r4,zero,634 <close+0x94>
     5b4:	01400304 	movi	r5,12
     5b8:	2021883a 	mov	r16,r4
     5bc:	00011580 	call	1158 <__mulsi3>
     5c0:	01000034 	movhi	r4,0
     5c4:	21048204 	addi	r4,r4,4616
     5c8:	2089883a 	add	r4,r4,r2

  if (fd)
     5cc:	20001926 	beq	r4,zero,634 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     5d0:	20800017 	ldw	r2,0(r4)
     5d4:	10800417 	ldw	r2,16(r2)
     5d8:	10000b26 	beq	r2,zero,608 <close+0x68>
     5dc:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     5e0:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     5e4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     5e8:	0000a2c0 	call	a2c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     5ec:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
     5f0:	88000916 	blt	r17,zero,618 <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     5f4:	dfc00217 	ldw	ra,8(sp)
     5f8:	dc400117 	ldw	r17,4(sp)
     5fc:	dc000017 	ldw	r16,0(sp)
     600:	dec00304 	addi	sp,sp,12
     604:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     608:	8009883a 	mov	r4,r16
     60c:	0000a2c0 	call	a2c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     610:	0005883a 	mov	r2,zero
     614:	003ff706 	br	5f4 <_gp+0xffff7164>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     618:	d0a00517 	ldw	r2,-32748(gp)
     61c:	10000c26 	beq	r2,zero,650 <close+0xb0>
     620:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
     624:	0463c83a 	sub	r17,zero,r17
     628:	14400015 	stw	r17,0(r2)
      return -1;
     62c:	00bfffc4 	movi	r2,-1
     630:	003ff006 	br	5f4 <_gp+0xffff7164>
     634:	d0a00517 	ldw	r2,-32748(gp)
     638:	10000726 	beq	r2,zero,658 <close+0xb8>
     63c:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
     640:	00c01444 	movi	r3,81
     644:	10c00015 	stw	r3,0(r2)
    return -1;
     648:	00bfffc4 	movi	r2,-1
     64c:	003fe906 	br	5f4 <_gp+0xffff7164>
     650:	d0a0c004 	addi	r2,gp,-32000
     654:	003ff306 	br	624 <_gp+0xffff7194>
     658:	d0a0c004 	addi	r2,gp,-32000
     65c:	003ff806 	br	640 <_gp+0xffff71b0>

00000660 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     660:	f800283a 	ret

00000664 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
     664:	3005883a 	mov	r2,r6
     668:	f800283a 	ret

0000066c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     66c:	20000a26 	beq	r4,zero,698 <alt_dev_llist_insert+0x2c>
     670:	20800217 	ldw	r2,8(r4)
     674:	10000826 	beq	r2,zero,698 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
     678:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     67c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
     680:	0005883a 	mov	r2,zero
  entry->next     = list->next;
     684:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
     688:	28c00017 	ldw	r3,0(r5)
     68c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
     690:	29000015 	stw	r4,0(r5)
     694:	f800283a 	ret
     698:	d0a00517 	ldw	r2,-32748(gp)
     69c:	10000926 	beq	r2,zero,6c4 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     6a0:	deffff04 	addi	sp,sp,-4
     6a4:	dfc00015 	stw	ra,0(sp)
     6a8:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
     6ac:	00c00584 	movi	r3,22
     6b0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     6b4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     6b8:	dfc00017 	ldw	ra,0(sp)
     6bc:	dec00104 	addi	sp,sp,4
     6c0:	f800283a 	ret
     6c4:	d0a0c004 	addi	r2,gp,-32000
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
     6c8:	00c00584 	movi	r3,22
     6cc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     6d0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     6d4:	f800283a 	ret

000006d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     6d8:	defffc04 	addi	sp,sp,-16
     6dc:	dc800215 	stw	r18,8(sp)
     6e0:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     6e4:	04800034 	movhi	r18,0
     6e8:	04000034 	movhi	r16,0
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     6ec:	dfc00315 	stw	ra,12(sp)
     6f0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     6f4:	84046404 	addi	r16,r16,4496
     6f8:	94846504 	addi	r18,r18,4500
     6fc:	84800936 	bltu	r16,r18,724 <_do_ctors+0x4c>
     700:	84a5c83a 	sub	r18,r16,r18
     704:	9024d0ba 	srli	r18,r18,2
     708:	0023883a 	mov	r17,zero
     70c:	94800044 	addi	r18,r18,1
        (*ctor) (); 
     710:	80800017 	ldw	r2,0(r16)
     714:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     718:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
     71c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     720:	8cbffb1e 	bne	r17,r18,710 <_gp+0xffff7280>
        (*ctor) (); 
}
     724:	dfc00317 	ldw	ra,12(sp)
     728:	dc800217 	ldw	r18,8(sp)
     72c:	dc400117 	ldw	r17,4(sp)
     730:	dc000017 	ldw	r16,0(sp)
     734:	dec00404 	addi	sp,sp,16
     738:	f800283a 	ret

0000073c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     73c:	defffc04 	addi	sp,sp,-16
     740:	dc800215 	stw	r18,8(sp)
     744:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     748:	04800034 	movhi	r18,0
     74c:	04000034 	movhi	r16,0
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     750:	dfc00315 	stw	ra,12(sp)
     754:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     758:	84046404 	addi	r16,r16,4496
     75c:	94846504 	addi	r18,r18,4500
     760:	84800936 	bltu	r16,r18,788 <_do_dtors+0x4c>
     764:	84a5c83a 	sub	r18,r16,r18
     768:	9024d0ba 	srli	r18,r18,2
     76c:	0023883a 	mov	r17,zero
     770:	94800044 	addi	r18,r18,1
        (*dtor) (); 
     774:	80800017 	ldw	r2,0(r16)
     778:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     77c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
     780:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     784:	8cbffb1e 	bne	r17,r18,774 <_gp+0xffff72e4>
        (*dtor) (); 
}
     788:	dfc00317 	ldw	ra,12(sp)
     78c:	dc800217 	ldw	r18,8(sp)
     790:	dc400117 	ldw	r17,4(sp)
     794:	dc000017 	ldw	r16,0(sp)
     798:	dec00404 	addi	sp,sp,16
     79c:	f800283a 	ret

000007a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     7a0:	f800283a 	ret

000007a4 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
     7a4:	defffd04 	addi	sp,sp,-12
     7a8:	2805883a 	mov	r2,r5
     7ac:	dc400115 	stw	r17,4(sp)
     7b0:	300b883a 	mov	r5,r6
     7b4:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
     7b8:	01807fc4 	movi	r6,511
     7bc:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
     7c0:	dfc00215 	stw	ra,8(sp)
     7c4:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
     7c8:	00008a40 	call	8a4 <open>

  if (old >= 0)
     7cc:	10001316 	blt	r2,zero,81c <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
     7d0:	1009883a 	mov	r4,r2
     7d4:	01400304 	movi	r5,12
     7d8:	1021883a 	mov	r16,r2
     7dc:	00011580 	call	1158 <__mulsi3>
     7e0:	00c00034 	movhi	r3,0
     7e4:	18c48204 	addi	r3,r3,4616
     7e8:	1885883a 	add	r2,r3,r2
     7ec:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
     7f0:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
     7f4:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
     7f8:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
     7fc:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
     800:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
     804:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
     808:	dfc00217 	ldw	ra,8(sp)
     80c:	dc400117 	ldw	r17,4(sp)
     810:	dc000017 	ldw	r16,0(sp)
     814:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
     818:	0000a2c1 	jmpi	a2c <alt_release_fd>
  }
} 
     81c:	dfc00217 	ldw	ra,8(sp)
     820:	dc400117 	ldw	r17,4(sp)
     824:	dc000017 	ldw	r16,0(sp)
     828:	dec00304 	addi	sp,sp,12
     82c:	f800283a 	ret

00000830 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     830:	defffb04 	addi	sp,sp,-20
     834:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     838:	04000034 	movhi	r16,0
     83c:	84048504 	addi	r16,r16,4628
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     840:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     844:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     848:	dcc00315 	stw	r19,12(sp)
     84c:	dc800215 	stw	r18,8(sp)
     850:	2827883a 	mov	r19,r5
     854:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     858:	200b883a 	mov	r5,r4
     85c:	880d883a 	mov	r6,r17
     860:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     864:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     868:	00007a40 	call	7a4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
     86c:	813ffd04 	addi	r4,r16,-12
     870:	980b883a 	mov	r5,r19
     874:	000d883a 	mov	r6,zero
     878:	00007a40 	call	7a4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     87c:	880d883a 	mov	r6,r17
     880:	900b883a 	mov	r5,r18
     884:	81000304 	addi	r4,r16,12
}  
     888:	dfc00417 	ldw	ra,16(sp)
     88c:	dcc00317 	ldw	r19,12(sp)
     890:	dc800217 	ldw	r18,8(sp)
     894:	dc400117 	ldw	r17,4(sp)
     898:	dc000017 	ldw	r16,0(sp)
     89c:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     8a0:	00007a41 	jmpi	7a4 <alt_open_fd.constprop.0>

000008a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     8a4:	defffa04 	addi	sp,sp,-24
     8a8:	dc000015 	stw	r16,0(sp)
     8ac:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     8b0:	d1600104 	addi	r5,gp,-32764
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     8b4:	dc800215 	stw	r18,8(sp)
     8b8:	dc400115 	stw	r17,4(sp)
     8bc:	dfc00515 	stw	ra,20(sp)
     8c0:	dd000415 	stw	r20,16(sp)
     8c4:	dcc00315 	stw	r19,12(sp)
     8c8:	2023883a 	mov	r17,r4
     8cc:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     8d0:	0000a900 	call	a90 <alt_find_dev>
     8d4:	10004a26 	beq	r2,zero,a00 <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
     8d8:	1009883a 	mov	r4,r2
     8dc:	1029883a 	mov	r20,r2
     8e0:	0000bb40 	call	bb4 <alt_get_fd>
     8e4:	1027883a 	mov	r19,r2
     8e8:	1000090e 	bge	r2,zero,910 <open+0x6c>
     8ec:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
     8f0:	9809883a 	mov	r4,r19
     8f4:	0000a2c0 	call	a2c <alt_release_fd>
     8f8:	d0a00517 	ldw	r2,-32748(gp)
     8fc:	10004726 	beq	r2,zero,a1c <open+0x178>
     900:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
     904:	14000015 	stw	r16,0(r2)
    return -1;
     908:	00bfffc4 	movi	r2,-1
     90c:	00003206 	br	9d8 <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     910:	01400304 	movi	r5,12
     914:	9809883a 	mov	r4,r19
     918:	00011580 	call	1158 <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     91c:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     920:	00c00034 	movhi	r3,0

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     924:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     928:	18c48204 	addi	r3,r3,4616

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     92c:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     930:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     934:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     938:	d2600017 	ldw	r9,-32768(gp)
     93c:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     940:	21400215 	stw	r5,8(r4)
     944:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     948:	000b883a 	mov	r5,zero
     94c:	00000306 	br	95c <open+0xb8>
     950:	18c00304 	addi	r3,r3,12
     954:	31800304 	addi	r6,r6,12
     958:	49401636 	bltu	r9,r5,9b4 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     95c:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     960:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     964:	3a3ffa1e 	bne	r7,r8,950 <_gp+0xffff74c0>
     968:	30800017 	ldw	r2,0(r6)
     96c:	103ff80e 	bge	r2,zero,950 <_gp+0xffff74c0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
     970:	20fff726 	beq	r4,r3,950 <_gp+0xffff74c0>
     974:	04000344 	movi	r16,13
     978:	003fdd06 	br	8f0 <_gp+0xffff7460>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
     97c:	1009883a 	mov	r4,r2
     980:	0000bb40 	call	bb4 <alt_get_fd>
     984:	1027883a 	mov	r19,r2
     988:	103fd816 	blt	r2,zero,8ec <_gp+0xffff745c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     98c:	9809883a 	mov	r4,r19
     990:	01400304 	movi	r5,12
     994:	00011580 	call	1158 <__mulsi3>
     998:	01000034 	movhi	r4,0
     99c:	21048204 	addi	r4,r4,4616
     9a0:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
     9a4:	00900034 	movhi	r2,16384
     9a8:	10bfffc4 	addi	r2,r2,-1
     9ac:	8084703a 	and	r2,r16,r2
     9b0:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
     9b4:	a0800317 	ldw	r2,12(r20)
     9b8:	10000f26 	beq	r2,zero,9f8 <open+0x154>
     9bc:	900f883a 	mov	r7,r18
     9c0:	800d883a 	mov	r6,r16
     9c4:	880b883a 	mov	r5,r17
     9c8:	103ee83a 	callr	r2
     9cc:	1007883a 	mov	r3,r2
     9d0:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
     9d4:	18001316 	blt	r3,zero,a24 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
     9d8:	dfc00517 	ldw	ra,20(sp)
     9dc:	dd000417 	ldw	r20,16(sp)
     9e0:	dcc00317 	ldw	r19,12(sp)
     9e4:	dc800217 	ldw	r18,8(sp)
     9e8:	dc400117 	ldw	r17,4(sp)
     9ec:	dc000017 	ldw	r16,0(sp)
     9f0:	dec00604 	addi	sp,sp,24
     9f4:	f800283a 	ret
     9f8:	9805883a 	mov	r2,r19
     9fc:	003ff606 	br	9d8 <_gp+0xffff7548>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
     a00:	8809883a 	mov	r4,r17
     a04:	0000b080 	call	b08 <alt_find_file>
     a08:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
     a0c:	103fdb1e 	bne	r2,zero,97c <_gp+0xffff74ec>
     a10:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
     a14:	04ffffc4 	movi	r19,-1
     a18:	003fb506 	br	8f0 <_gp+0xffff7460>
     a1c:	d0a0c004 	addi	r2,gp,-32000
     a20:	003fb806 	br	904 <_gp+0xffff7474>
     a24:	00e1c83a 	sub	r16,zero,r3
     a28:	003fb106 	br	8f0 <_gp+0xffff7460>

00000a2c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
     a2c:	00c00084 	movi	r3,2
     a30:	1900140e 	bge	r3,r4,a84 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     a34:	defffd04 	addi	sp,sp,-12
     a38:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     a3c:	01400304 	movi	r5,12
     a40:	04400034 	movhi	r17,0
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     a44:	dfc00215 	stw	ra,8(sp)
     a48:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     a4c:	8c448204 	addi	r17,r17,4616
     a50:	2021883a 	mov	r16,r4
     a54:	00011580 	call	1158 <__mulsi3>
     a58:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
     a5c:	01400304 	movi	r5,12
     a60:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     a64:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
     a68:	00011580 	call	1158 <__mulsi3>
     a6c:	8885883a 	add	r2,r17,r2
     a70:	10000015 	stw	zero,0(r2)
  }
}
     a74:	dfc00217 	ldw	ra,8(sp)
     a78:	dc400117 	ldw	r17,4(sp)
     a7c:	dc000017 	ldw	r16,0(sp)
     a80:	dec00304 	addi	sp,sp,12
     a84:	f800283a 	ret

00000a88 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
     a88:	000170fa 	wrctl	ienable,zero
     a8c:	f800283a 	ret

00000a90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     a90:	defffb04 	addi	sp,sp,-20
     a94:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
     a98:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     a9c:	dc400115 	stw	r17,4(sp)
     aa0:	2823883a 	mov	r17,r5
     aa4:	dcc00315 	stw	r19,12(sp)
     aa8:	dfc00415 	stw	ra,16(sp)
     aac:	dc800215 	stw	r18,8(sp)
     ab0:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
     ab4:	0000ca00 	call	ca0 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     ab8:	8c000b26 	beq	r17,r16,ae8 <alt_find_dev+0x58>
     abc:	14800044 	addi	r18,r2,1
     ac0:	00000206 	br	acc <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     ac4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     ac8:	8c000726 	beq	r17,r16,ae8 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     acc:	81000217 	ldw	r4,8(r16)
     ad0:	900d883a 	mov	r6,r18
     ad4:	980b883a 	mov	r5,r19
     ad8:	0000c700 	call	c70 <memcmp>
     adc:	103ff91e 	bne	r2,zero,ac4 <_gp+0xffff7634>
     ae0:	8005883a 	mov	r2,r16
     ae4:	00000106 	br	aec <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
     ae8:	0005883a 	mov	r2,zero
}
     aec:	dfc00417 	ldw	ra,16(sp)
     af0:	dcc00317 	ldw	r19,12(sp)
     af4:	dc800217 	ldw	r18,8(sp)
     af8:	dc400117 	ldw	r17,4(sp)
     afc:	dc000017 	ldw	r16,0(sp)
     b00:	dec00504 	addi	sp,sp,20
     b04:	f800283a 	ret

00000b08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     b08:	defffa04 	addi	sp,sp,-24
     b0c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
     b10:	d4200317 	ldw	r16,-32756(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     b14:	dd000415 	stw	r20,16(sp)
     b18:	dfc00515 	stw	ra,20(sp)
     b1c:	dcc00315 	stw	r19,12(sp)
     b20:	dc800215 	stw	r18,8(sp)
     b24:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
     b28:	d5200304 	addi	r20,gp,-32756
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
     b2c:	85001626 	beq	r16,r20,b88 <alt_find_file+0x80>
     b30:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
     b34:	04c00bc4 	movi	r19,47
     b38:	00000806 	br	b5c <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
     b3c:	9185883a 	add	r2,r18,r6
     b40:	10800007 	ldb	r2,0(r2)
     b44:	14c00126 	beq	r2,r19,b4c <alt_find_file+0x44>
     b48:	1000021e 	bne	r2,zero,b54 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
     b4c:	0000c700 	call	c70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
     b50:	10001626 	beq	r2,zero,bac <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     b54:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
     b58:	85000b26 	beq	r16,r20,b88 <alt_find_file+0x80>
  {
    len = strlen(next->name);
     b5c:	84400217 	ldw	r17,8(r16)
     b60:	8809883a 	mov	r4,r17
     b64:	0000ca00 	call	ca0 <strlen>
     b68:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
     b6c:	8885883a 	add	r2,r17,r2
     b70:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
     b74:	900b883a 	mov	r5,r18
     b78:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
     b7c:	14ffef1e 	bne	r2,r19,b3c <_gp+0xffff76ac>
    {
      len -= 1;
     b80:	31bfffc4 	addi	r6,r6,-1
     b84:	003fed06 	br	b3c <_gp+0xffff76ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
     b88:	0005883a 	mov	r2,zero
}
     b8c:	dfc00517 	ldw	ra,20(sp)
     b90:	dd000417 	ldw	r20,16(sp)
     b94:	dcc00317 	ldw	r19,12(sp)
     b98:	dc800217 	ldw	r18,8(sp)
     b9c:	dc400117 	ldw	r17,4(sp)
     ba0:	dc000017 	ldw	r16,0(sp)
     ba4:	dec00604 	addi	sp,sp,24
     ba8:	f800283a 	ret
     bac:	8005883a 	mov	r2,r16
     bb0:	003ff606 	br	b8c <_gp+0xffff76fc>

00000bb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
     bb4:	defffc04 	addi	sp,sp,-16
     bb8:	dc400115 	stw	r17,4(sp)
     bbc:	04400034 	movhi	r17,0
     bc0:	8c448204 	addi	r17,r17,4616
     bc4:	dc000015 	stw	r16,0(sp)
     bc8:	dfc00315 	stw	ra,12(sp)
     bcc:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
     bd0:	0021883a 	mov	r16,zero
     bd4:	8805883a 	mov	r2,r17
     bd8:	01400804 	movi	r5,32
     bdc:	00000206 	br	be8 <alt_get_fd+0x34>
     be0:	84000044 	addi	r16,r16,1
     be4:	81401326 	beq	r16,r5,c34 <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
     be8:	10c00017 	ldw	r3,0(r2)
     bec:	10800304 	addi	r2,r2,12
     bf0:	183ffb1e 	bne	r3,zero,be0 <_gp+0xffff7750>
     bf4:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
     bf8:	01400304 	movi	r5,12
     bfc:	8009883a 	mov	r4,r16
     c00:	00011580 	call	1158 <__mulsi3>
     c04:	8885883a 	add	r2,r17,r2
     c08:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
     c0c:	d0a00017 	ldw	r2,-32768(gp)
     c10:	1400010e 	bge	r2,r16,c18 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
     c14:	d4200015 	stw	r16,-32768(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
     c18:	8005883a 	mov	r2,r16
     c1c:	dfc00317 	ldw	ra,12(sp)
     c20:	dc800217 	ldw	r18,8(sp)
     c24:	dc400117 	ldw	r17,4(sp)
     c28:	dc000017 	ldw	r16,0(sp)
     c2c:	dec00404 	addi	sp,sp,16
     c30:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
     c34:	043ffa04 	movi	r16,-24
     c38:	003ff706 	br	c18 <_gp+0xffff7788>

00000c3c <atexit>:
     c3c:	200b883a 	mov	r5,r4
     c40:	000f883a 	mov	r7,zero
     c44:	000d883a 	mov	r6,zero
     c48:	0009883a 	mov	r4,zero
     c4c:	0000cbc1 	jmpi	cbc <__register_exitproc>

00000c50 <exit>:
     c50:	defffe04 	addi	sp,sp,-8
     c54:	000b883a 	mov	r5,zero
     c58:	dc000015 	stw	r16,0(sp)
     c5c:	dfc00115 	stw	ra,4(sp)
     c60:	2021883a 	mov	r16,r4
     c64:	0000e140 	call	e14 <__call_exitprocs>
     c68:	8009883a 	mov	r4,r16
     c6c:	00011800 	call	1180 <_exit>

00000c70 <memcmp>:
     c70:	218d883a 	add	r6,r4,r6
     c74:	21800826 	beq	r4,r6,c98 <memcmp+0x28>
     c78:	20800003 	ldbu	r2,0(r4)
     c7c:	28c00003 	ldbu	r3,0(r5)
     c80:	10c00226 	beq	r2,r3,c8c <memcmp+0x1c>
     c84:	10c5c83a 	sub	r2,r2,r3
     c88:	f800283a 	ret
     c8c:	21000044 	addi	r4,r4,1
     c90:	29400044 	addi	r5,r5,1
     c94:	003ff706 	br	c74 <_gp+0xffff77e4>
     c98:	0005883a 	mov	r2,zero
     c9c:	f800283a 	ret

00000ca0 <strlen>:
     ca0:	2005883a 	mov	r2,r4
     ca4:	10c00007 	ldb	r3,0(r2)
     ca8:	18000226 	beq	r3,zero,cb4 <strlen+0x14>
     cac:	10800044 	addi	r2,r2,1
     cb0:	003ffc06 	br	ca4 <_gp+0xffff7814>
     cb4:	1105c83a 	sub	r2,r2,r4
     cb8:	f800283a 	ret

00000cbc <__register_exitproc>:
     cbc:	00800034 	movhi	r2,0
     cc0:	10852a04 	addi	r2,r2,5288
     cc4:	10c00017 	ldw	r3,0(r2)
     cc8:	defff904 	addi	sp,sp,-28
     ccc:	dc000015 	stw	r16,0(sp)
     cd0:	1c000c17 	ldw	r16,48(r3)
     cd4:	dd400515 	stw	r21,20(sp)
     cd8:	dd000415 	stw	r20,16(sp)
     cdc:	dcc00315 	stw	r19,12(sp)
     ce0:	dc800215 	stw	r18,8(sp)
     ce4:	dc400115 	stw	r17,4(sp)
     ce8:	dfc00615 	stw	ra,24(sp)
     cec:	202b883a 	mov	r21,r4
     cf0:	2823883a 	mov	r17,r5
     cf4:	3027883a 	mov	r19,r6
     cf8:	3825883a 	mov	r18,r7
     cfc:	1029883a 	mov	r20,r2
     d00:	8000021e 	bne	r16,zero,d0c <__register_exitproc+0x50>
     d04:	1c000d04 	addi	r16,r3,52
     d08:	1c000c15 	stw	r16,48(r3)
     d0c:	80800117 	ldw	r2,4(r16)
     d10:	00c007c4 	movi	r3,31
     d14:	1880110e 	bge	r3,r2,d5c <__register_exitproc+0xa0>
     d18:	00800034 	movhi	r2,0
     d1c:	10800004 	addi	r2,r2,0
     d20:	1000021e 	bne	r2,zero,d2c <__register_exitproc+0x70>
     d24:	00bfffc4 	movi	r2,-1
     d28:	00003106 	br	df0 <__register_exitproc+0x134>
     d2c:	01002304 	movi	r4,140
     d30:	00000000 	call	0 <__reset>
     d34:	1021883a 	mov	r16,r2
     d38:	103ffa26 	beq	r2,zero,d24 <_gp+0xffff7894>
     d3c:	10000115 	stw	zero,4(r2)
     d40:	a0800017 	ldw	r2,0(r20)
     d44:	10c00c17 	ldw	r3,48(r2)
     d48:	80c00015 	stw	r3,0(r16)
     d4c:	14000c15 	stw	r16,48(r2)
     d50:	80002215 	stw	zero,136(r16)
     d54:	a8001d26 	beq	r21,zero,dcc <__register_exitproc+0x110>
     d58:	00000606 	br	d74 <__register_exitproc+0xb8>
     d5c:	a8001b26 	beq	r21,zero,dcc <__register_exitproc+0x110>
     d60:	80802217 	ldw	r2,136(r16)
     d64:	1000091e 	bne	r2,zero,d8c <__register_exitproc+0xd0>
     d68:	00800034 	movhi	r2,0
     d6c:	10800004 	addi	r2,r2,0
     d70:	103fec26 	beq	r2,zero,d24 <_gp+0xffff7894>
     d74:	01004204 	movi	r4,264
     d78:	00000000 	call	0 <__reset>
     d7c:	103fe926 	beq	r2,zero,d24 <_gp+0xffff7894>
     d80:	10004015 	stw	zero,256(r2)
     d84:	10004115 	stw	zero,260(r2)
     d88:	80802215 	stw	r2,136(r16)
     d8c:	81400117 	ldw	r5,4(r16)
     d90:	01000044 	movi	r4,1
     d94:	2947883a 	add	r3,r5,r5
     d98:	18c7883a 	add	r3,r3,r3
     d9c:	10c7883a 	add	r3,r2,r3
     da0:	1cc00015 	stw	r19,0(r3)
     da4:	2148983a 	sll	r4,r4,r5
     da8:	11404017 	ldw	r5,256(r2)
     dac:	290ab03a 	or	r5,r5,r4
     db0:	11404015 	stw	r5,256(r2)
     db4:	1c802015 	stw	r18,128(r3)
     db8:	00c00084 	movi	r3,2
     dbc:	a8c0031e 	bne	r21,r3,dcc <__register_exitproc+0x110>
     dc0:	10c04117 	ldw	r3,260(r2)
     dc4:	1908b03a 	or	r4,r3,r4
     dc8:	11004115 	stw	r4,260(r2)
     dcc:	80800117 	ldw	r2,4(r16)
     dd0:	10c00044 	addi	r3,r2,1
     dd4:	10800084 	addi	r2,r2,2
     dd8:	1085883a 	add	r2,r2,r2
     ddc:	1085883a 	add	r2,r2,r2
     de0:	80c00115 	stw	r3,4(r16)
     de4:	80a1883a 	add	r16,r16,r2
     de8:	84400015 	stw	r17,0(r16)
     dec:	0005883a 	mov	r2,zero
     df0:	dfc00617 	ldw	ra,24(sp)
     df4:	dd400517 	ldw	r21,20(sp)
     df8:	dd000417 	ldw	r20,16(sp)
     dfc:	dcc00317 	ldw	r19,12(sp)
     e00:	dc800217 	ldw	r18,8(sp)
     e04:	dc400117 	ldw	r17,4(sp)
     e08:	dc000017 	ldw	r16,0(sp)
     e0c:	dec00704 	addi	sp,sp,28
     e10:	f800283a 	ret

00000e14 <__call_exitprocs>:
     e14:	defff504 	addi	sp,sp,-44
     e18:	dd000515 	stw	r20,20(sp)
     e1c:	05000034 	movhi	r20,0
     e20:	dc800315 	stw	r18,12(sp)
     e24:	dfc00a15 	stw	ra,40(sp)
     e28:	df000915 	stw	fp,36(sp)
     e2c:	ddc00815 	stw	r23,32(sp)
     e30:	dd800715 	stw	r22,28(sp)
     e34:	dd400615 	stw	r21,24(sp)
     e38:	dcc00415 	stw	r19,16(sp)
     e3c:	dc400215 	stw	r17,8(sp)
     e40:	dc000115 	stw	r16,4(sp)
     e44:	d9000015 	stw	r4,0(sp)
     e48:	2825883a 	mov	r18,r5
     e4c:	a5052a04 	addi	r20,r20,5288
     e50:	a4400017 	ldw	r17,0(r20)
     e54:	8cc00c17 	ldw	r19,48(r17)
     e58:	8c400c04 	addi	r17,r17,48
     e5c:	98004526 	beq	r19,zero,f74 <__call_exitprocs+0x160>
     e60:	9c000117 	ldw	r16,4(r19)
     e64:	00900034 	movhi	r2,16384
     e68:	10bfffc4 	addi	r2,r2,-1
     e6c:	9d402217 	ldw	r21,136(r19)
     e70:	85bfffc4 	addi	r22,r16,-1
     e74:	80a1883a 	add	r16,r16,r2
     e78:	8421883a 	add	r16,r16,r16
     e7c:	8421883a 	add	r16,r16,r16
     e80:	ac2f883a 	add	r23,r21,r16
     e84:	84000204 	addi	r16,r16,8
     e88:	9c21883a 	add	r16,r19,r16
     e8c:	b0002716 	blt	r22,zero,f2c <__call_exitprocs+0x118>
     e90:	90000726 	beq	r18,zero,eb0 <__call_exitprocs+0x9c>
     e94:	a800041e 	bne	r21,zero,ea8 <__call_exitprocs+0x94>
     e98:	b5bfffc4 	addi	r22,r22,-1
     e9c:	bdffff04 	addi	r23,r23,-4
     ea0:	843fff04 	addi	r16,r16,-4
     ea4:	003ff906 	br	e8c <_gp+0xffff79fc>
     ea8:	b9002017 	ldw	r4,128(r23)
     eac:	913ffa1e 	bne	r18,r4,e98 <_gp+0xffff7a08>
     eb0:	99000117 	ldw	r4,4(r19)
     eb4:	82000017 	ldw	r8,0(r16)
     eb8:	213fffc4 	addi	r4,r4,-1
     ebc:	b100021e 	bne	r22,r4,ec8 <__call_exitprocs+0xb4>
     ec0:	9d800115 	stw	r22,4(r19)
     ec4:	00000106 	br	ecc <__call_exitprocs+0xb8>
     ec8:	80000015 	stw	zero,0(r16)
     ecc:	403ff226 	beq	r8,zero,e98 <_gp+0xffff7a08>
     ed0:	9f000117 	ldw	fp,4(r19)
     ed4:	a8000526 	beq	r21,zero,eec <__call_exitprocs+0xd8>
     ed8:	00800044 	movi	r2,1
     edc:	1592983a 	sll	r9,r2,r22
     ee0:	a9404017 	ldw	r5,256(r21)
     ee4:	494a703a 	and	r5,r9,r5
     ee8:	2800021e 	bne	r5,zero,ef4 <__call_exitprocs+0xe0>
     eec:	403ee83a 	callr	r8
     ef0:	00000906 	br	f18 <__call_exitprocs+0x104>
     ef4:	a9004117 	ldw	r4,260(r21)
     ef8:	4908703a 	and	r4,r9,r4
     efc:	2000041e 	bne	r4,zero,f10 <__call_exitprocs+0xfc>
     f00:	b9400017 	ldw	r5,0(r23)
     f04:	d9000017 	ldw	r4,0(sp)
     f08:	403ee83a 	callr	r8
     f0c:	00000206 	br	f18 <__call_exitprocs+0x104>
     f10:	b9000017 	ldw	r4,0(r23)
     f14:	403ee83a 	callr	r8
     f18:	99000117 	ldw	r4,4(r19)
     f1c:	e13fcc1e 	bne	fp,r4,e50 <_gp+0xffff79c0>
     f20:	89000017 	ldw	r4,0(r17)
     f24:	993fdc26 	beq	r19,r4,e98 <_gp+0xffff7a08>
     f28:	003fc906 	br	e50 <_gp+0xffff79c0>
     f2c:	00800034 	movhi	r2,0
     f30:	10800004 	addi	r2,r2,0
     f34:	10000f26 	beq	r2,zero,f74 <__call_exitprocs+0x160>
     f38:	99400117 	ldw	r5,4(r19)
     f3c:	99000017 	ldw	r4,0(r19)
     f40:	2800091e 	bne	r5,zero,f68 <__call_exitprocs+0x154>
     f44:	20000826 	beq	r4,zero,f68 <__call_exitprocs+0x154>
     f48:	89000015 	stw	r4,0(r17)
     f4c:	a8000226 	beq	r21,zero,f58 <__call_exitprocs+0x144>
     f50:	a809883a 	mov	r4,r21
     f54:	00000000 	call	0 <__reset>
     f58:	9809883a 	mov	r4,r19
     f5c:	00000000 	call	0 <__reset>
     f60:	8cc00017 	ldw	r19,0(r17)
     f64:	003fbd06 	br	e5c <_gp+0xffff79cc>
     f68:	9823883a 	mov	r17,r19
     f6c:	2027883a 	mov	r19,r4
     f70:	003fba06 	br	e5c <_gp+0xffff79cc>
     f74:	dfc00a17 	ldw	ra,40(sp)
     f78:	df000917 	ldw	fp,36(sp)
     f7c:	ddc00817 	ldw	r23,32(sp)
     f80:	dd800717 	ldw	r22,28(sp)
     f84:	dd400617 	ldw	r21,24(sp)
     f88:	dd000517 	ldw	r20,20(sp)
     f8c:	dcc00417 	ldw	r19,16(sp)
     f90:	dc800317 	ldw	r18,12(sp)
     f94:	dc400217 	ldw	r17,8(sp)
     f98:	dc000117 	ldw	r16,4(sp)
     f9c:	dec00b04 	addi	sp,sp,44
     fa0:	f800283a 	ret

00000fa4 <__divsi3>:
     fa4:	20001b16 	blt	r4,zero,1014 <__divsi3+0x70>
     fa8:	000f883a 	mov	r7,zero
     fac:	28001616 	blt	r5,zero,1008 <__divsi3+0x64>
     fb0:	200d883a 	mov	r6,r4
     fb4:	29001a2e 	bgeu	r5,r4,1020 <__divsi3+0x7c>
     fb8:	00800804 	movi	r2,32
     fbc:	00c00044 	movi	r3,1
     fc0:	00000106 	br	fc8 <__divsi3+0x24>
     fc4:	10000d26 	beq	r2,zero,ffc <__divsi3+0x58>
     fc8:	294b883a 	add	r5,r5,r5
     fcc:	10bfffc4 	addi	r2,r2,-1
     fd0:	18c7883a 	add	r3,r3,r3
     fd4:	293ffb36 	bltu	r5,r4,fc4 <_gp+0xffff7b34>
     fd8:	0005883a 	mov	r2,zero
     fdc:	18000726 	beq	r3,zero,ffc <__divsi3+0x58>
     fe0:	0005883a 	mov	r2,zero
     fe4:	31400236 	bltu	r6,r5,ff0 <__divsi3+0x4c>
     fe8:	314dc83a 	sub	r6,r6,r5
     fec:	10c4b03a 	or	r2,r2,r3
     ff0:	1806d07a 	srli	r3,r3,1
     ff4:	280ad07a 	srli	r5,r5,1
     ff8:	183ffa1e 	bne	r3,zero,fe4 <_gp+0xffff7b54>
     ffc:	38000126 	beq	r7,zero,1004 <__divsi3+0x60>
    1000:	0085c83a 	sub	r2,zero,r2
    1004:	f800283a 	ret
    1008:	014bc83a 	sub	r5,zero,r5
    100c:	39c0005c 	xori	r7,r7,1
    1010:	003fe706 	br	fb0 <_gp+0xffff7b20>
    1014:	0109c83a 	sub	r4,zero,r4
    1018:	01c00044 	movi	r7,1
    101c:	003fe306 	br	fac <_gp+0xffff7b1c>
    1020:	00c00044 	movi	r3,1
    1024:	003fee06 	br	fe0 <_gp+0xffff7b50>

00001028 <__modsi3>:
    1028:	20001716 	blt	r4,zero,1088 <__modsi3+0x60>
    102c:	000f883a 	mov	r7,zero
    1030:	2005883a 	mov	r2,r4
    1034:	28001216 	blt	r5,zero,1080 <__modsi3+0x58>
    1038:	2900162e 	bgeu	r5,r4,1094 <__modsi3+0x6c>
    103c:	01800804 	movi	r6,32
    1040:	00c00044 	movi	r3,1
    1044:	00000106 	br	104c <__modsi3+0x24>
    1048:	30000a26 	beq	r6,zero,1074 <__modsi3+0x4c>
    104c:	294b883a 	add	r5,r5,r5
    1050:	31bfffc4 	addi	r6,r6,-1
    1054:	18c7883a 	add	r3,r3,r3
    1058:	293ffb36 	bltu	r5,r4,1048 <_gp+0xffff7bb8>
    105c:	18000526 	beq	r3,zero,1074 <__modsi3+0x4c>
    1060:	1806d07a 	srli	r3,r3,1
    1064:	11400136 	bltu	r2,r5,106c <__modsi3+0x44>
    1068:	1145c83a 	sub	r2,r2,r5
    106c:	280ad07a 	srli	r5,r5,1
    1070:	183ffb1e 	bne	r3,zero,1060 <_gp+0xffff7bd0>
    1074:	38000126 	beq	r7,zero,107c <__modsi3+0x54>
    1078:	0085c83a 	sub	r2,zero,r2
    107c:	f800283a 	ret
    1080:	014bc83a 	sub	r5,zero,r5
    1084:	003fec06 	br	1038 <_gp+0xffff7ba8>
    1088:	0109c83a 	sub	r4,zero,r4
    108c:	01c00044 	movi	r7,1
    1090:	003fe706 	br	1030 <_gp+0xffff7ba0>
    1094:	00c00044 	movi	r3,1
    1098:	003ff106 	br	1060 <_gp+0xffff7bd0>

0000109c <__udivsi3>:
    109c:	200d883a 	mov	r6,r4
    10a0:	2900152e 	bgeu	r5,r4,10f8 <__udivsi3+0x5c>
    10a4:	28001416 	blt	r5,zero,10f8 <__udivsi3+0x5c>
    10a8:	00800804 	movi	r2,32
    10ac:	00c00044 	movi	r3,1
    10b0:	00000206 	br	10bc <__udivsi3+0x20>
    10b4:	10000e26 	beq	r2,zero,10f0 <__udivsi3+0x54>
    10b8:	28000516 	blt	r5,zero,10d0 <__udivsi3+0x34>
    10bc:	294b883a 	add	r5,r5,r5
    10c0:	10bfffc4 	addi	r2,r2,-1
    10c4:	18c7883a 	add	r3,r3,r3
    10c8:	293ffa36 	bltu	r5,r4,10b4 <_gp+0xffff7c24>
    10cc:	18000826 	beq	r3,zero,10f0 <__udivsi3+0x54>
    10d0:	0005883a 	mov	r2,zero
    10d4:	31400236 	bltu	r6,r5,10e0 <__udivsi3+0x44>
    10d8:	314dc83a 	sub	r6,r6,r5
    10dc:	10c4b03a 	or	r2,r2,r3
    10e0:	1806d07a 	srli	r3,r3,1
    10e4:	280ad07a 	srli	r5,r5,1
    10e8:	183ffa1e 	bne	r3,zero,10d4 <_gp+0xffff7c44>
    10ec:	f800283a 	ret
    10f0:	0005883a 	mov	r2,zero
    10f4:	f800283a 	ret
    10f8:	00c00044 	movi	r3,1
    10fc:	003ff406 	br	10d0 <_gp+0xffff7c40>

00001100 <__umodsi3>:
    1100:	2005883a 	mov	r2,r4
    1104:	2900122e 	bgeu	r5,r4,1150 <__umodsi3+0x50>
    1108:	28001116 	blt	r5,zero,1150 <__umodsi3+0x50>
    110c:	01800804 	movi	r6,32
    1110:	00c00044 	movi	r3,1
    1114:	00000206 	br	1120 <__umodsi3+0x20>
    1118:	30000c26 	beq	r6,zero,114c <__umodsi3+0x4c>
    111c:	28000516 	blt	r5,zero,1134 <__umodsi3+0x34>
    1120:	294b883a 	add	r5,r5,r5
    1124:	31bfffc4 	addi	r6,r6,-1
    1128:	18c7883a 	add	r3,r3,r3
    112c:	293ffa36 	bltu	r5,r4,1118 <_gp+0xffff7c88>
    1130:	18000626 	beq	r3,zero,114c <__umodsi3+0x4c>
    1134:	1806d07a 	srli	r3,r3,1
    1138:	11400136 	bltu	r2,r5,1140 <__umodsi3+0x40>
    113c:	1145c83a 	sub	r2,r2,r5
    1140:	280ad07a 	srli	r5,r5,1
    1144:	183ffb1e 	bne	r3,zero,1134 <_gp+0xffff7ca4>
    1148:	f800283a 	ret
    114c:	f800283a 	ret
    1150:	00c00044 	movi	r3,1
    1154:	003ff706 	br	1134 <_gp+0xffff7ca4>

00001158 <__mulsi3>:
    1158:	0005883a 	mov	r2,zero
    115c:	20000726 	beq	r4,zero,117c <__mulsi3+0x24>
    1160:	20c0004c 	andi	r3,r4,1
    1164:	2008d07a 	srli	r4,r4,1
    1168:	18000126 	beq	r3,zero,1170 <__mulsi3+0x18>
    116c:	1145883a 	add	r2,r2,r5
    1170:	294b883a 	add	r5,r5,r5
    1174:	203ffa1e 	bne	r4,zero,1160 <_gp+0xffff7cd0>
    1178:	f800283a 	ret
    117c:	f800283a 	ret

00001180 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1180:	20000226 	beq	r4,zero,118c <_exit+0xc>
    ALT_SIM_FAIL();
    1184:	002af070 	cmpltui	zero,zero,43969
    1188:	003fff06 	br	1188 <_gp+0xffff7cf8>
  } else {
    ALT_SIM_PASS();
    118c:	002af0b0 	cmpltui	zero,zero,43970
    1190:	003ffd06 	br	1188 <_gp+0xffff7cf8>
