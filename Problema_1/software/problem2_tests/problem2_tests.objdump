
problem2_tests.elf:     file format elf32-littlenios2
problem2_tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000878 memsz 0x00000878 flags r-x
    LOAD off    0x00001898 vaddr 0x00000898 paddr 0x000008a0 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000018a8 vaddr 0x000008a8 paddr 0x000008a8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000018a0  2**0
                  CONTENTS
  2 .text         000007ec  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  0000080c  0000080c  0000180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00000898  000008a0  00001898  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000008a8  000008a8  000018a8  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  000008b8  000008b8  000018a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000240  00000000  00000000  000018c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000015de  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b2a  00000000  00000000  000030e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c9f  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000334  00000000  00000000  000048b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000940  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a4c  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00005f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000118  00000000  00000000  00005fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000704a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000704d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007052  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 26 .jdi          000031ce  00000000  00000000  0000707d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005730d  00000000  00000000  0000a24b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000080c l    d  .rodata	00000000 .rodata
00000898 l    d  .rwdata	00000000 .rwdata
000008a8 l    d  .bss	00000000 .bss
000008b8 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../problem2_tests_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000494 g     F .text	0000002c alt_main
000008a0 g       *ABS*	00000000 __flash_rwdata_start
000004c0 g     F .text	00000038 alt_putstr
00000634 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000008b4 g     O .bss	00000004 errno
000008ac g     O .bss	00000004 alt_argv
00008898 g       *ABS*	00000000 _gp
000004f8 g     F .text	00000004 usleep
0000038c g     F .text	00000028 memcpy
00000750 g     F .text	00000064 .hidden __udivsi3
000008b8 g       *ABS*	00000000 __bss_end
0000005c g     F .text	00000034 enable
000000c0 g     F .text	00000088 write_text
0000062c g     F .text	00000004 alt_dcache_flush_all
000008a0 g       *ABS*	00000000 __ram_rwdata_end
00000898 g       *ABS*	00000000 __ram_rodata_end
000007b4 g     F .text	00000058 .hidden __umodsi3
000008b8 g       *ABS*	00000000 end
00000520 g     F .text	00000084 altera_avalon_uart_write
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	0000003c _start
0000051c g     F .text	00000004 alt_sys_init
00000364 g     F .text	00000028 .hidden __mulsi3
00000898 g       *ABS*	00000000 __ram_rwdata_start
0000080c g       *ABS*	00000000 __ram_rodata_start
000005a4 g     F .text	00000088 alt_busy_sleep
00000090 g     F .text	00000030 clear_display
000008b8 g       *ABS*	00000000 __alt_stack_base
000008a8 g       *ABS*	00000000 __bss_start
0000029c g     F .text	000000c8 main
000008a8 g     O .bss	00000004 alt_envp
0000089c g     O .rwdata	00000004 alt_errno
00000228 g     F .text	00000074 sendAT
00000658 g     F .text	00000084 .hidden __divsi3
0000080c g       *ABS*	00000000 __flash_rodata_start
000004fc g     F .text	00000020 alt_irq_init
000008b0 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000008a0 g       *ABS*	00000000 _edata
000008b8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000000 g       *ABS*	00000000 __alt_mem_memory
000006dc g     F .text	00000074 .hidden __modsi3
00000148 g     F .text	000000e0 init_lcd
00004000 g       *ABS*	00000000 __alt_data_end
00000898 g     O .rwdata	00000004 uart
0000000c g       .entry	00000000 _exit
0000063c g     F .text	0000001c strlen
00000630 g     F .text	00000004 alt_icache_flush_all
000003b4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a22614 	ori	gp,gp,34968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10822a14 	ori	r2,r2,2216

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c22e14 	ori	r3,r3,2232

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff77ac>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00003b40 	call	3b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00004940 	call	494 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff77c0>

0000005c <enable>:
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "sys/alt_stdio.h";
#include "altera_avalon_uart_regs.h"

void enable() {
  5c:	defffe04 	addi	sp,sp,-8
  60:	dc000015 	stw	r16,0(sp)
  64:	dfc00115 	stw	ra,4(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
  68:	04143404 	movi	r16,20688
  6c:	00800044 	movi	r2,1
  70:	80800035 	stwio	r2,0(r16)
	usleep(200);
  74:	01003204 	movi	r4,200
  78:	00004f80 	call	4f8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
  7c:	80000035 	stwio	zero,0(r16)
}
  80:	dfc00117 	ldw	ra,4(sp)
  84:	dc000017 	ldw	r16,0(sp)
  88:	dec00204 	addi	sp,sp,8
  8c:	f800283a 	ret

00000090 <clear_display>:

void clear_display() {
  90:	deffff04 	addi	sp,sp,-4
  94:	dfc00015 	stw	ra,0(sp)
	// clear display - 00000001
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
  98:	00942c04 	movi	r2,20656
  9c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x1);
  a0:	00942804 	movi	r2,20640
  a4:	00c00044 	movi	r3,1
  a8:	10c00035 	stwio	r3,0(r2)
	enable();
  ac:	000005c0 	call	5c <enable>
	usleep(3000);
  b0:	0102ee04 	movi	r4,3000
}
  b4:	dfc00017 	ldw	ra,0(sp)
  b8:	dec00104 	addi	sp,sp,4
void clear_display() {
	// clear display - 00000001
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x1);
	enable();
	usleep(3000);
  bc:	00004f81 	jmpi	4f8 <usleep>

000000c0 <write_text>:
}

void write_text(char* text, int size) {
  c0:	defffa04 	addi	sp,sp,-24
  c4:	dcc00315 	stw	r19,12(sp)
  c8:	dc400115 	stw	r17,4(sp)
  cc:	dfc00515 	stw	ra,20(sp)
  d0:	dd000415 	stw	r20,16(sp)
  d4:	dc800215 	stw	r18,8(sp)
  d8:	dc000015 	stw	r16,0(sp)
  dc:	2023883a 	mov	r17,r4
  e0:	2827883a 	mov	r19,r5
	clear_display();
  e4:	00000900 	call	90 <clear_display>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
  e8:	00942c04 	movi	r2,20656
  ec:	00c00044 	movi	r3,1
  f0:	10c00035 	stwio	r3,0(r2)

	int i;
	for (i = 0; i < size && text[i] != 'x'; i++) {
  f4:	8821883a 	mov	r16,r17
  f8:	04801e04 	movi	r18,120
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
  fc:	05142804 	movi	r20,20640
void write_text(char* text, int size) {
	clear_display();
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);

	int i;
	for (i = 0; i < size && text[i] != 'x'; i++) {
 100:	8445c83a 	sub	r2,r16,r17
 104:	14c0080e 	bge	r2,r19,128 <write_text+0x68>
 108:	84000044 	addi	r16,r16,1
 10c:	80bfffc7 	ldb	r2,-1(r16)
 110:	14800526 	beq	r2,r18,128 <write_text+0x68>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, text[i]);
 114:	a0800035 	stwio	r2,0(r20)
		enable();
 118:	000005c0 	call	5c <enable>
		usleep(100);
 11c:	01001904 	movi	r4,100
 120:	00004f80 	call	4f8 <usleep>
 124:	003ff606 	br	100 <_gp+0xffff7868>
	}
}
 128:	dfc00517 	ldw	ra,20(sp)
 12c:	dd000417 	ldw	r20,16(sp)
 130:	dcc00317 	ldw	r19,12(sp)
 134:	dc800217 	ldw	r18,8(sp)
 138:	dc400117 	ldw	r17,4(sp)
 13c:	dc000017 	ldw	r16,0(sp)
 140:	dec00604 	addi	sp,sp,24
 144:	f800283a 	ret

00000148 <init_lcd>:

void init_lcd() {
 148:	defffb04 	addi	sp,sp,-20
 14c:	dcc00315 	stw	r19,12(sp)
 150:	dfc00415 	stw	ra,16(sp)
 154:	dc800215 	stw	r18,8(sp)
 158:	dc400115 	stw	r17,4(sp)
 15c:	dc000015 	stw	r16,0(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
 160:	04d42c04 	movi	r19,20656
 164:	98000035 	stwio	zero,0(r19)

	// function set 3x - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
 168:	04800c04 	movi	r18,48
 16c:	04142804 	movi	r16,20640
 170:	84800035 	stwio	r18,0(r16)
	enable();
 174:	000005c0 	call	5c <enable>
	usleep(4100);
 178:	01040104 	movi	r4,4100
 17c:	00004f80 	call	4f8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
 180:	84800035 	stwio	r18,0(r16)
	enable();
 184:	000005c0 	call	5c <enable>
	usleep(100);
 188:	04401904 	movi	r17,100
 18c:	8809883a 	mov	r4,r17
 190:	00004f80 	call	4f8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x30);
 194:	84800035 	stwio	r18,0(r16)
	enable();
 198:	000005c0 	call	5c <enable>
	usleep(100);
 19c:	8809883a 	mov	r4,r17
 1a0:	00004f80 	call	4f8 <usleep>

	// real function set - 00111000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x38);
 1a4:	00800e04 	movi	r2,56
 1a8:	80800035 	stwio	r2,0(r16)
	enable();
 1ac:	000005c0 	call	5c <enable>
	usleep(100);
 1b0:	8809883a 	mov	r4,r17
 1b4:	00004f80 	call	4f8 <usleep>

	// display on/off - 00001000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x8);
 1b8:	00800204 	movi	r2,8
 1bc:	80800035 	stwio	r2,0(r16)
	enable();
 1c0:	000005c0 	call	5c <enable>
	usleep(100);
 1c4:	8809883a 	mov	r4,r17
 1c8:	00004f80 	call	4f8 <usleep>

	clear_display();
 1cc:	00000900 	call	90 <clear_display>

	// entry mode - 00000110
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x6);
 1d0:	00800184 	movi	r2,6
 1d4:	80800035 	stwio	r2,0(r16)
	enable();
 1d8:	000005c0 	call	5c <enable>
	usleep(100);
 1dc:	8809883a 	mov	r4,r17
 1e0:	00004f80 	call	4f8 <usleep>

	// display on/off - 00001110 - cursor appears and doesn't blinks
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0xE);
 1e4:	00800384 	movi	r2,14
 1e8:	80800035 	stwio	r2,0(r16)
	enable();
 1ec:	000005c0 	call	5c <enable>
	usleep(100);
 1f0:	8809883a 	mov	r4,r17
 1f4:	00004f80 	call	4f8 <usleep>

	// send some data to test - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
 1f8:	00800044 	movi	r2,1
 1fc:	98800035 	stwio	r2,0(r19)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, '0');
 200:	84800035 	stwio	r18,0(r16)
	enable();
 204:	000005c0 	call	5c <enable>
	usleep(100);
 208:	8809883a 	mov	r4,r17
}
 20c:	dfc00417 	ldw	ra,16(sp)
 210:	dcc00317 	ldw	r19,12(sp)
 214:	dc800217 	ldw	r18,8(sp)
 218:	dc400117 	ldw	r17,4(sp)
 21c:	dc000017 	ldw	r16,0(sp)
 220:	dec00504 	addi	sp,sp,20

	// send some data to test - 00110000
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, '0');
	enable();
	usleep(100);
 224:	00004f81 	jmpi	4f8 <usleep>

00000228 <sendAT>:
}

void sendAT(int i) {
	switch(i) {
 228:	00800104 	movi	r2,4
 22c:	11001a36 	bltu	r2,r4,298 <sendAT+0x70>
 230:	200890ba 	slli	r4,r4,2
 234:	00800034 	movhi	r2,0
 238:	10809204 	addi	r2,r2,584
 23c:	2089883a 	add	r4,r4,r2
 240:	20800017 	ldw	r2,0(r4)
 244:	1000683a 	jmp	r2
 248:	0000025c 	xori	zero,zero,9
 24c:	00000268 	cmpgeui	zero,zero,9
 250:	00000274 	movhi	zero,9
 254:	00000280 	call	28 <_start+0x8>
 258:	0000028c 	andi	zero,zero,10
		case 0:
			alt_putstr("AT\r\n");
 25c:	01000034 	movhi	r4,0
 260:	21020304 	addi	r4,r4,2060
 264:	00000b06 	br	294 <sendAT+0x6c>
			break;
		case 1:
			alt_putstr("AT+RST\r\n");
 268:	01000034 	movhi	r4,0
 26c:	21020504 	addi	r4,r4,2068
 270:	00000806 	br	294 <sendAT+0x6c>
			break;
		case 2:
			alt_putstr("AT+GMR\r\n");
 274:	01000034 	movhi	r4,0
 278:	21020804 	addi	r4,r4,2080
 27c:	00000506 	br	294 <sendAT+0x6c>
			break;
		case 3:
			alt_putstr("AT+CWMODE_CUR=3\r\n");
 280:	01000034 	movhi	r4,0
 284:	21020b04 	addi	r4,r4,2092
 288:	00000206 	br	294 <sendAT+0x6c>
			break;
		case 4:
			alt_putstr("AT+CWLAP\r\n");
 28c:	01000034 	movhi	r4,0
 290:	21021004 	addi	r4,r4,2112
 294:	00004c01 	jmpi	4c0 <alt_putstr>
 298:	f800283a 	ret

0000029c <main>:
	}
}

int main() {
 29c:	deffe704 	addi	sp,sp,-100
	int outputs[] = {15, 23, 27, 29, 30};

	char lcd_options[][15] = {
 2a0:	01400034 	movhi	r5,0
 2a4:	018012c4 	movi	r6,75
 2a8:	29421304 	addi	r5,r5,2124
 2ac:	d809883a 	mov	r4,sp
		case 4:
			alt_putstr("AT+CWLAP\r\n");
	}
}

int main() {
 2b0:	dfc01815 	stw	ra,96(sp)
 2b4:	dd001715 	stw	r20,92(sp)
 2b8:	dcc01615 	stw	r19,88(sp)
 2bc:	dc801515 	stw	r18,84(sp)
 2c0:	dc401415 	stw	r17,80(sp)
 2c4:	dc001315 	stw	r16,76(sp)
	int outputs[] = {15, 23, 27, 29, 30};

	char lcd_options[][15] = {
 2c8:	000038c0 	call	38c <memcpy>
	};

	int i = 0;
	int previous_i;

	init_lcd();
 2cc:	00001480 	call	148 <init_lcd>

	write_text(lcd_options[0], 15);
 2d0:	014003c4 	movi	r5,15
 2d4:	d809883a 	mov	r4,sp
 2d8:	00000c00 	call	c0 <write_text>
			"AT+GMRxxxxxxxxx",
			"AT+CWMODE_CUR=3",
			"AT+CWLAPxxxxxxx"
	};

	int i = 0;
 2dc:	0023883a 	mov	r17,zero
	init_lcd();

	write_text(lcd_options[0], 15);

	while(1) {
		int in = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
 2e0:	04942004 	movi	r18,20608

		previous_i = i;

		if (in == 13) {
 2e4:	04c00344 	movi	r19,13
			i++;
		} else if (in == 14) {
 2e8:	05000384 	movi	r20,14
	init_lcd();

	write_text(lcd_options[0], 15);

	while(1) {
		int in = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
 2ec:	90800037 	ldwio	r2,0(r18)

		previous_i = i;

		if (in == 13) {
 2f0:	14c0051e 	bne	r2,r19,308 <main+0x6c>
			i++;
 2f4:	8c000044 	addi	r16,r17,1
			i--;
		} else if (in == 7) {
			sendAT(i);
		}

		if (i > 4) {
 2f8:	00800104 	movi	r2,4
 2fc:	14000d0e 	bge	r2,r16,334 <main+0x98>
			i = 0;
 300:	0021883a 	mov	r16,zero
 304:	00000b06 	br	334 <main+0x98>

		previous_i = i;

		if (in == 13) {
			i++;
		} else if (in == 14) {
 308:	1500021e 	bne	r2,r20,314 <main+0x78>
			i--;
 30c:	8c3fffc4 	addi	r16,r17,-1
 310:	00000506 	br	328 <main+0x8c>
		} else if (in == 7) {
 314:	00c001c4 	movi	r3,7
 318:	10c0021e 	bne	r2,r3,324 <main+0x88>
			sendAT(i);
 31c:	8809883a 	mov	r4,r17
 320:	00002280 	call	228 <sendAT>
 324:	8821883a 	mov	r16,r17

		if (i > 4) {
			i = 0;
		}

		if (i < 0) {
 328:	00bfffc4 	movi	r2,-1
 32c:	8080011e 	bne	r16,r2,334 <main+0x98>
			i = 4;
 330:	04000104 	movi	r16,4
		}

		if (previous_i != i) {
 334:	8c000626 	beq	r17,r16,350 <main+0xb4>
			write_text(lcd_options[i], 15);
 338:	014003c4 	movi	r5,15
 33c:	8009883a 	mov	r4,r16
 340:	00003640 	call	364 <__mulsi3>
 344:	014003c4 	movi	r5,15
 348:	d889883a 	add	r4,sp,r2
 34c:	00000c00 	call	c0 <write_text>
		}

		usleep(100000);
 350:	010000b4 	movhi	r4,2
 354:	2121a804 	addi	r4,r4,-31072
 358:	00004f80 	call	4f8 <usleep>
	}
 35c:	8023883a 	mov	r17,r16
 360:	003fe206 	br	2ec <_gp+0xffff7a54>

00000364 <__mulsi3>:
 364:	0005883a 	mov	r2,zero
 368:	20000726 	beq	r4,zero,388 <__mulsi3+0x24>
 36c:	20c0004c 	andi	r3,r4,1
 370:	2008d07a 	srli	r4,r4,1
 374:	18000126 	beq	r3,zero,37c <__mulsi3+0x18>
 378:	1145883a 	add	r2,r2,r5
 37c:	294b883a 	add	r5,r5,r5
 380:	203ffa1e 	bne	r4,zero,36c <_gp+0xffff7ad4>
 384:	f800283a 	ret
 388:	f800283a 	ret

0000038c <memcpy>:
 38c:	2005883a 	mov	r2,r4
 390:	2007883a 	mov	r3,r4
 394:	218d883a 	add	r6,r4,r6
 398:	19800526 	beq	r3,r6,3b0 <memcpy+0x24>
 39c:	29000003 	ldbu	r4,0(r5)
 3a0:	18c00044 	addi	r3,r3,1
 3a4:	29400044 	addi	r5,r5,1
 3a8:	193fffc5 	stb	r4,-1(r3)
 3ac:	003ffa06 	br	398 <_gp+0xffff7b00>
 3b0:	f800283a 	ret

000003b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 3b4:	deffff04 	addi	sp,sp,-4
 3b8:	01000034 	movhi	r4,0
 3bc:	01400034 	movhi	r5,0
 3c0:	dfc00015 	stw	ra,0(sp)
 3c4:	21022604 	addi	r4,r4,2200
 3c8:	29422804 	addi	r5,r5,2208

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 3cc:	2140061e 	bne	r4,r5,3e8 <alt_load+0x34>
 3d0:	01000034 	movhi	r4,0
 3d4:	01400034 	movhi	r5,0
 3d8:	21000804 	addi	r4,r4,32
 3dc:	29400804 	addi	r5,r5,32
 3e0:	2140121e 	bne	r4,r5,42c <alt_load+0x78>
 3e4:	00000b06 	br	414 <alt_load+0x60>
 3e8:	00c00034 	movhi	r3,0
 3ec:	18c22804 	addi	r3,r3,2208
 3f0:	1907c83a 	sub	r3,r3,r4
 3f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 3f8:	10fff526 	beq	r2,r3,3d0 <_gp+0xffff7b38>
    {
      *to++ = *from++;
 3fc:	114f883a 	add	r7,r2,r5
 400:	39c00017 	ldw	r7,0(r7)
 404:	110d883a 	add	r6,r2,r4
 408:	10800104 	addi	r2,r2,4
 40c:	31c00015 	stw	r7,0(r6)
 410:	003ff906 	br	3f8 <_gp+0xffff7b60>
 414:	01000034 	movhi	r4,0
 418:	01400034 	movhi	r5,0
 41c:	21020304 	addi	r4,r4,2060
 420:	29420304 	addi	r5,r5,2060

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 424:	2140101e 	bne	r4,r5,468 <alt_load+0xb4>
 428:	00000b06 	br	458 <alt_load+0xa4>
 42c:	00c00034 	movhi	r3,0
 430:	18c00804 	addi	r3,r3,32
 434:	1907c83a 	sub	r3,r3,r4
 438:	0005883a 	mov	r2,zero
  {
    while( to != end )
 43c:	10fff526 	beq	r2,r3,414 <_gp+0xffff7b7c>
    {
      *to++ = *from++;
 440:	114f883a 	add	r7,r2,r5
 444:	39c00017 	ldw	r7,0(r7)
 448:	110d883a 	add	r6,r2,r4
 44c:	10800104 	addi	r2,r2,4
 450:	31c00015 	stw	r7,0(r6)
 454:	003ff906 	br	43c <_gp+0xffff7ba4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 458:	000062c0 	call	62c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 45c:	dfc00017 	ldw	ra,0(sp)
 460:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 464:	00006301 	jmpi	630 <alt_icache_flush_all>
 468:	00c00034 	movhi	r3,0
 46c:	18c22604 	addi	r3,r3,2200
 470:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 474:	0005883a 	mov	r2,zero
  {
    while( to != end )
 478:	18bff726 	beq	r3,r2,458 <_gp+0xffff7bc0>
    {
      *to++ = *from++;
 47c:	114f883a 	add	r7,r2,r5
 480:	39c00017 	ldw	r7,0(r7)
 484:	110d883a 	add	r6,r2,r4
 488:	10800104 	addi	r2,r2,4
 48c:	31c00015 	stw	r7,0(r6)
 490:	003ff906 	br	478 <_gp+0xffff7be0>

00000494 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 494:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 498:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 49c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4a0:	00004fc0 	call	4fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4a4:	000051c0 	call	51c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4a8:	d1a00417 	ldw	r6,-32752(gp)
 4ac:	d1600517 	ldw	r5,-32748(gp)
 4b0:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4b4:	dfc00017 	ldw	ra,0(sp)
 4b8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4bc:	000029c1 	jmpi	29c <main>

000004c0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4c0:	defffe04 	addi	sp,sp,-8
 4c4:	dc000015 	stw	r16,0(sp)
 4c8:	dfc00115 	stw	ra,4(sp)
 4cc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4d0:	000063c0 	call	63c <strlen>
 4d4:	01000034 	movhi	r4,0
 4d8:	000f883a 	mov	r7,zero
 4dc:	100d883a 	mov	r6,r2
 4e0:	800b883a 	mov	r5,r16
 4e4:	21022604 	addi	r4,r4,2200
#else
    return fputs(str, stdout);
#endif
#endif
}
 4e8:	dfc00117 	ldw	ra,4(sp)
 4ec:	dc000017 	ldw	r16,0(sp)
 4f0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4f4:	00005201 	jmpi	520 <altera_avalon_uart_write>

000004f8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 4f8:	00005a41 	jmpi	5a4 <alt_busy_sleep>

000004fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4fc:	deffff04 	addi	sp,sp,-4
 500:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 504:	00006340 	call	634 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 508:	00800044 	movi	r2,1
 50c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 510:	dfc00017 	ldw	ra,0(sp)
 514:	dec00104 	addi	sp,sp,4
 518:	f800283a 	ret

0000051c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 51c:	f800283a 	ret

00000520 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 520:	defffd04 	addi	sp,sp,-12
 524:	dc400115 	stw	r17,4(sp)
 528:	dc000015 	stw	r16,0(sp)
 52c:	dfc00215 	stw	ra,8(sp)
 530:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
 534:	39d0000c 	andi	r7,r7,16384
  count = len;
 538:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
 53c:	20c00017 	ldw	r3,0(r4)
 540:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
 544:	1080100c 	andi	r2,r2,64
 548:	10000526 	beq	r2,zero,560 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
 54c:	28800044 	addi	r2,r5,1
 550:	29400007 	ldb	r5,0(r5)
 554:	19400135 	stwio	r5,4(r3)
      count--;
 558:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
 55c:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
 560:	3800021e 	bne	r7,zero,56c <altera_avalon_uart_write+0x4c>
 564:	803ff51e 	bne	r16,zero,53c <_gp+0xffff7ca4>
 568:	00000806 	br	58c <altera_avalon_uart_write+0x6c>

  if (count)
 56c:	80000726 	beq	r16,zero,58c <altera_avalon_uart_write+0x6c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 570:	d0a00117 	ldw	r2,-32764(gp)
 574:	10000226 	beq	r2,zero,580 <altera_avalon_uart_write+0x60>
 578:	103ee83a 	callr	r2
 57c:	00000106 	br	584 <altera_avalon_uart_write+0x64>
 580:	d0a00704 	addi	r2,gp,-32740
  {
    ALT_ERRNO = EWOULDBLOCK;
 584:	00c002c4 	movi	r3,11
 588:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
 58c:	8c05c83a 	sub	r2,r17,r16
 590:	dfc00217 	ldw	ra,8(sp)
 594:	dc400117 	ldw	r17,4(sp)
 598:	dc000017 	ldw	r16,0(sp)
 59c:	dec00304 	addi	sp,sp,12
 5a0:	f800283a 	ret

000005a4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5a4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 5a8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5ac:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 5b0:	dc000015 	stw	r16,0(sp)
 5b4:	dfc00115 	stw	ra,4(sp)
 5b8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5bc:	00007500 	call	750 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5c0:	10001026 	beq	r2,zero,604 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5c4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5c8:	013999b4 	movhi	r4,58982
 5cc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5d0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5d4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5d8:	297fffc4 	addi	r5,r5,-1
 5dc:	283ffe1e 	bne	r5,zero,5d8 <_gp+0xffff7d40>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5e0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5e4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5e8:	18bffb16 	blt	r3,r2,5d8 <_gp+0xffff7d40>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5ec:	01400144 	movi	r5,5
 5f0:	8009883a 	mov	r4,r16
 5f4:	00003640 	call	364 <__mulsi3>
 5f8:	10bfffc4 	addi	r2,r2,-1
 5fc:	103ffe1e 	bne	r2,zero,5f8 <_gp+0xffff7d60>
 600:	00000506 	br	618 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 604:	01400144 	movi	r5,5
 608:	8009883a 	mov	r4,r16
 60c:	00003640 	call	364 <__mulsi3>
 610:	10bfffc4 	addi	r2,r2,-1
 614:	00bffe16 	blt	zero,r2,610 <_gp+0xffff7d78>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 618:	0005883a 	mov	r2,zero
 61c:	dfc00117 	ldw	ra,4(sp)
 620:	dc000017 	ldw	r16,0(sp)
 624:	dec00204 	addi	sp,sp,8
 628:	f800283a 	ret

0000062c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 62c:	f800283a 	ret

00000630 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 630:	f800283a 	ret

00000634 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 634:	000170fa 	wrctl	ienable,zero
 638:	f800283a 	ret

0000063c <strlen>:
 63c:	2005883a 	mov	r2,r4
 640:	10c00007 	ldb	r3,0(r2)
 644:	18000226 	beq	r3,zero,650 <strlen+0x14>
 648:	10800044 	addi	r2,r2,1
 64c:	003ffc06 	br	640 <_gp+0xffff7da8>
 650:	1105c83a 	sub	r2,r2,r4
 654:	f800283a 	ret

00000658 <__divsi3>:
 658:	20001b16 	blt	r4,zero,6c8 <__divsi3+0x70>
 65c:	000f883a 	mov	r7,zero
 660:	28001616 	blt	r5,zero,6bc <__divsi3+0x64>
 664:	200d883a 	mov	r6,r4
 668:	29001a2e 	bgeu	r5,r4,6d4 <__divsi3+0x7c>
 66c:	00800804 	movi	r2,32
 670:	00c00044 	movi	r3,1
 674:	00000106 	br	67c <__divsi3+0x24>
 678:	10000d26 	beq	r2,zero,6b0 <__divsi3+0x58>
 67c:	294b883a 	add	r5,r5,r5
 680:	10bfffc4 	addi	r2,r2,-1
 684:	18c7883a 	add	r3,r3,r3
 688:	293ffb36 	bltu	r5,r4,678 <_gp+0xffff7de0>
 68c:	0005883a 	mov	r2,zero
 690:	18000726 	beq	r3,zero,6b0 <__divsi3+0x58>
 694:	0005883a 	mov	r2,zero
 698:	31400236 	bltu	r6,r5,6a4 <__divsi3+0x4c>
 69c:	314dc83a 	sub	r6,r6,r5
 6a0:	10c4b03a 	or	r2,r2,r3
 6a4:	1806d07a 	srli	r3,r3,1
 6a8:	280ad07a 	srli	r5,r5,1
 6ac:	183ffa1e 	bne	r3,zero,698 <_gp+0xffff7e00>
 6b0:	38000126 	beq	r7,zero,6b8 <__divsi3+0x60>
 6b4:	0085c83a 	sub	r2,zero,r2
 6b8:	f800283a 	ret
 6bc:	014bc83a 	sub	r5,zero,r5
 6c0:	39c0005c 	xori	r7,r7,1
 6c4:	003fe706 	br	664 <_gp+0xffff7dcc>
 6c8:	0109c83a 	sub	r4,zero,r4
 6cc:	01c00044 	movi	r7,1
 6d0:	003fe306 	br	660 <_gp+0xffff7dc8>
 6d4:	00c00044 	movi	r3,1
 6d8:	003fee06 	br	694 <_gp+0xffff7dfc>

000006dc <__modsi3>:
 6dc:	20001716 	blt	r4,zero,73c <__modsi3+0x60>
 6e0:	000f883a 	mov	r7,zero
 6e4:	2005883a 	mov	r2,r4
 6e8:	28001216 	blt	r5,zero,734 <__modsi3+0x58>
 6ec:	2900162e 	bgeu	r5,r4,748 <__modsi3+0x6c>
 6f0:	01800804 	movi	r6,32
 6f4:	00c00044 	movi	r3,1
 6f8:	00000106 	br	700 <__modsi3+0x24>
 6fc:	30000a26 	beq	r6,zero,728 <__modsi3+0x4c>
 700:	294b883a 	add	r5,r5,r5
 704:	31bfffc4 	addi	r6,r6,-1
 708:	18c7883a 	add	r3,r3,r3
 70c:	293ffb36 	bltu	r5,r4,6fc <_gp+0xffff7e64>
 710:	18000526 	beq	r3,zero,728 <__modsi3+0x4c>
 714:	1806d07a 	srli	r3,r3,1
 718:	11400136 	bltu	r2,r5,720 <__modsi3+0x44>
 71c:	1145c83a 	sub	r2,r2,r5
 720:	280ad07a 	srli	r5,r5,1
 724:	183ffb1e 	bne	r3,zero,714 <_gp+0xffff7e7c>
 728:	38000126 	beq	r7,zero,730 <__modsi3+0x54>
 72c:	0085c83a 	sub	r2,zero,r2
 730:	f800283a 	ret
 734:	014bc83a 	sub	r5,zero,r5
 738:	003fec06 	br	6ec <_gp+0xffff7e54>
 73c:	0109c83a 	sub	r4,zero,r4
 740:	01c00044 	movi	r7,1
 744:	003fe706 	br	6e4 <_gp+0xffff7e4c>
 748:	00c00044 	movi	r3,1
 74c:	003ff106 	br	714 <_gp+0xffff7e7c>

00000750 <__udivsi3>:
 750:	200d883a 	mov	r6,r4
 754:	2900152e 	bgeu	r5,r4,7ac <__udivsi3+0x5c>
 758:	28001416 	blt	r5,zero,7ac <__udivsi3+0x5c>
 75c:	00800804 	movi	r2,32
 760:	00c00044 	movi	r3,1
 764:	00000206 	br	770 <__udivsi3+0x20>
 768:	10000e26 	beq	r2,zero,7a4 <__udivsi3+0x54>
 76c:	28000516 	blt	r5,zero,784 <__udivsi3+0x34>
 770:	294b883a 	add	r5,r5,r5
 774:	10bfffc4 	addi	r2,r2,-1
 778:	18c7883a 	add	r3,r3,r3
 77c:	293ffa36 	bltu	r5,r4,768 <_gp+0xffff7ed0>
 780:	18000826 	beq	r3,zero,7a4 <__udivsi3+0x54>
 784:	0005883a 	mov	r2,zero
 788:	31400236 	bltu	r6,r5,794 <__udivsi3+0x44>
 78c:	314dc83a 	sub	r6,r6,r5
 790:	10c4b03a 	or	r2,r2,r3
 794:	1806d07a 	srli	r3,r3,1
 798:	280ad07a 	srli	r5,r5,1
 79c:	183ffa1e 	bne	r3,zero,788 <_gp+0xffff7ef0>
 7a0:	f800283a 	ret
 7a4:	0005883a 	mov	r2,zero
 7a8:	f800283a 	ret
 7ac:	00c00044 	movi	r3,1
 7b0:	003ff406 	br	784 <_gp+0xffff7eec>

000007b4 <__umodsi3>:
 7b4:	2005883a 	mov	r2,r4
 7b8:	2900122e 	bgeu	r5,r4,804 <__umodsi3+0x50>
 7bc:	28001116 	blt	r5,zero,804 <__umodsi3+0x50>
 7c0:	01800804 	movi	r6,32
 7c4:	00c00044 	movi	r3,1
 7c8:	00000206 	br	7d4 <__umodsi3+0x20>
 7cc:	30000c26 	beq	r6,zero,800 <__umodsi3+0x4c>
 7d0:	28000516 	blt	r5,zero,7e8 <__umodsi3+0x34>
 7d4:	294b883a 	add	r5,r5,r5
 7d8:	31bfffc4 	addi	r6,r6,-1
 7dc:	18c7883a 	add	r3,r3,r3
 7e0:	293ffa36 	bltu	r5,r4,7cc <_gp+0xffff7f34>
 7e4:	18000626 	beq	r3,zero,800 <__umodsi3+0x4c>
 7e8:	1806d07a 	srli	r3,r3,1
 7ec:	11400136 	bltu	r2,r5,7f4 <__umodsi3+0x40>
 7f0:	1145c83a 	sub	r2,r2,r5
 7f4:	280ad07a 	srli	r5,r5,1
 7f8:	183ffb1e 	bne	r3,zero,7e8 <_gp+0xffff7f50>
 7fc:	f800283a 	ret
 800:	f800283a 	ret
 804:	00c00044 	movi	r3,1
 808:	003ff706 	br	7e8 <_gp+0xffff7f50>
